
STM32_RA_01H.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  080052b4  080052b4  000152b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d8  080055d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080055d8  080055d8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055d8  080055d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d8  080055d8  000155d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055dc  080055dc  000155dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000070  08005650  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08005650  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b059  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e6e  00000000  00000000  0002b0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0002cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002d958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186b4  00000000  00000000  0002e278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be1c  00000000  00000000  0004692c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ab60  00000000  00000000  00052748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd2a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033dc  00000000  00000000  000dd2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800529c 	.word	0x0800529c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800529c 	.word	0x0800529c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000170:	b4b0      	push	{r4, r5, r7}
 8000172:	b08f      	sub	sp, #60	; 0x3c
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000178:	f240 13b1 	movw	r3, #433	; 0x1b1
 800017c:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800017e:	2307      	movs	r3, #7
 8000180:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000184:	2307      	movs	r3, #7
 8000186:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 800018a:	2301      	movs	r3, #1
 800018c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8000190:	23ff      	movs	r3, #255	; 0xff
 8000192:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000196:	2364      	movs	r3, #100	; 0x64
 8000198:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 800019c:	2308      	movs	r3, #8
 800019e:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	461d      	mov	r5, r3
 80001a4:	f107 040c 	add.w	r4, r7, #12
 80001a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80001b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80001b8:	6878      	ldr	r0, [r7, #4]
 80001ba:	373c      	adds	r7, #60	; 0x3c
 80001bc:	46bd      	mov	sp, r7
 80001be:	bcb0      	pop	{r4, r5, r7}
 80001c0:	4770      	bx	lr

080001c2 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80001c2:	b580      	push	{r7, lr}
 80001c4:	b084      	sub	sp, #16
 80001c6:	af00      	add	r7, sp, #0
 80001c8:	6078      	str	r0, [r7, #4]
 80001ca:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 80001cc:	2101      	movs	r1, #1
 80001ce:	6878      	ldr	r0, [r7, #4]
 80001d0:	f000 f99f 	bl	8000512 <LoRa_read>
 80001d4:	4603      	mov	r3, r0
 80001d6:	73bb      	strb	r3, [r7, #14]
	data = read;
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d107      	bne.n	80001f2 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f023 0307 	bic.w	r3, r3, #7
 80001e8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2200      	movs	r2, #0
 80001ee:	61da      	str	r2, [r3, #28]
 80001f0:	e03e      	b.n	8000270 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d10c      	bne.n	8000212 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80001f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80001fc:	f023 0307 	bic.w	r3, r3, #7
 8000200:	b25b      	sxtb	r3, r3
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	b25b      	sxtb	r3, r3
 8000208:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2201      	movs	r2, #1
 800020e:	61da      	str	r2, [r3, #28]
 8000210:	e02e      	b.n	8000270 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	2b03      	cmp	r3, #3
 8000216:	d10c      	bne.n	8000232 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800021c:	f023 0307 	bic.w	r3, r3, #7
 8000220:	b25b      	sxtb	r3, r3
 8000222:	f043 0303 	orr.w	r3, r3, #3
 8000226:	b25b      	sxtb	r3, r3
 8000228:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2203      	movs	r2, #3
 800022e:	61da      	str	r2, [r3, #28]
 8000230:	e01e      	b.n	8000270 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	2b05      	cmp	r3, #5
 8000236:	d10c      	bne.n	8000252 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000238:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800023c:	f023 0307 	bic.w	r3, r3, #7
 8000240:	b25b      	sxtb	r3, r3
 8000242:	f043 0305 	orr.w	r3, r3, #5
 8000246:	b25b      	sxtb	r3, r3
 8000248:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2205      	movs	r2, #5
 800024e:	61da      	str	r2, [r3, #28]
 8000250:	e00e      	b.n	8000270 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	2b06      	cmp	r3, #6
 8000256:	d10b      	bne.n	8000270 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000258:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800025c:	f023 0307 	bic.w	r3, r3, #7
 8000260:	b25b      	sxtb	r3, r3
 8000262:	f043 0306 	orr.w	r3, r3, #6
 8000266:	b25b      	sxtb	r3, r3
 8000268:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2206      	movs	r2, #6
 800026e:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000270:	7bfb      	ldrb	r3, [r7, #15]
 8000272:	461a      	mov	r2, r3
 8000274:	2101      	movs	r1, #1
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f000 f965 	bl	8000546 <LoRa_write>
	//HAL_Delay(10);
}
 800027c:	bf00      	nop
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	60f8      	str	r0, [r7, #12]
 800028c:	60b9      	str	r1, [r7, #8]
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	4613      	mov	r3, r2
 8000292:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	6818      	ldr	r0, [r3, #0]
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	889b      	ldrh	r3, [r3, #4]
 800029c:	2200      	movs	r2, #0
 800029e:	4619      	mov	r1, r3
 80002a0:	f002 f930 	bl	8002504 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	6998      	ldr	r0, [r3, #24]
 80002a8:	88fa      	ldrh	r2, [r7, #6]
 80002aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80002ae:	68b9      	ldr	r1, [r7, #8]
 80002b0:	f002 fdec 	bl	8002e8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80002b4:	bf00      	nop
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	699b      	ldr	r3, [r3, #24]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f003 f9f1 	bl	80036a2 <HAL_SPI_GetState>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d1f7      	bne.n	80002b6 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	6998      	ldr	r0, [r3, #24]
 80002ca:	8b3a      	ldrh	r2, [r7, #24]
 80002cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80002d0:	6839      	ldr	r1, [r7, #0]
 80002d2:	f002 ff1e 	bl	8003112 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80002d6:	bf00      	nop
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4618      	mov	r0, r3
 80002de:	f003 f9e0 	bl	80036a2 <HAL_SPI_GetState>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d1f7      	bne.n	80002d8 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	6818      	ldr	r0, [r3, #0]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	889b      	ldrh	r3, [r3, #4]
 80002f0:	2201      	movs	r2, #1
 80002f2:	4619      	mov	r1, r3
 80002f4:	f002 f906 	bl	8002504 <HAL_GPIO_WritePin>
}
 80002f8:	bf00      	nop
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	603b      	str	r3, [r7, #0]
 800030c:	4613      	mov	r3, r2
 800030e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	6818      	ldr	r0, [r3, #0]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	889b      	ldrh	r3, [r3, #4]
 8000318:	2200      	movs	r2, #0
 800031a:	4619      	mov	r1, r3
 800031c:	f002 f8f2 	bl	8002504 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	6998      	ldr	r0, [r3, #24]
 8000324:	88fa      	ldrh	r2, [r7, #6]
 8000326:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800032a:	68b9      	ldr	r1, [r7, #8]
 800032c:	f002 fdae 	bl	8002e8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000330:	bf00      	nop
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	4618      	mov	r0, r3
 8000338:	f003 f9b3 	bl	80036a2 <HAL_SPI_GetState>
 800033c:	4603      	mov	r3, r0
 800033e:	2b01      	cmp	r3, #1
 8000340:	d1f7      	bne.n	8000332 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	6998      	ldr	r0, [r3, #24]
 8000346:	8b3a      	ldrh	r2, [r7, #24]
 8000348:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800034c:	6839      	ldr	r1, [r7, #0]
 800034e:	f002 fd9d 	bl	8002e8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000352:	bf00      	nop
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4618      	mov	r0, r3
 800035a:	f003 f9a2 	bl	80036a2 <HAL_SPI_GetState>
 800035e:	4603      	mov	r3, r0
 8000360:	2b01      	cmp	r3, #1
 8000362:	d1f7      	bne.n	8000354 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	6818      	ldr	r0, [r3, #0]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	889b      	ldrh	r3, [r3, #4]
 800036c:	2201      	movs	r2, #1
 800036e:	4619      	mov	r1, r3
 8000370:	f002 f8c8 	bl	8002504 <HAL_GPIO_WritePin>
}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	04db      	lsls	r3, r3, #19
 800038a:	115b      	asrs	r3, r3, #5
 800038c:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	0c1b      	lsrs	r3, r3, #16
 8000392:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000394:	7afb      	ldrb	r3, [r7, #11]
 8000396:	461a      	mov	r2, r3
 8000398:	2106      	movs	r1, #6
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 f8d3 	bl	8000546 <LoRa_write>
	HAL_Delay(5);
 80003a0:	2005      	movs	r0, #5
 80003a2:	f001 fdf9 	bl	8001f98 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	0a1b      	lsrs	r3, r3, #8
 80003aa:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80003ac:	7afb      	ldrb	r3, [r7, #11]
 80003ae:	461a      	mov	r2, r3
 80003b0:	2107      	movs	r1, #7
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	f000 f8c7 	bl	8000546 <LoRa_write>
	HAL_Delay(5);
 80003b8:	2005      	movs	r0, #5
 80003ba:	f001 fded 	bl	8001f98 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80003c2:	7afb      	ldrb	r3, [r7, #11]
 80003c4:	461a      	mov	r2, r3
 80003c6:	2108      	movs	r1, #8
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f000 f8bc 	bl	8000546 <LoRa_write>
	HAL_Delay(5);
 80003ce:	2005      	movs	r0, #5
 80003d0:	f001 fde2 	bl	8001f98 <HAL_Delay>
}
 80003d4:	bf00      	nop
 80003d6:	3710      	adds	r7, #16
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	2b0c      	cmp	r3, #12
 80003ea:	dd01      	ble.n	80003f0 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80003ec:	230c      	movs	r3, #12
 80003ee:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	2b06      	cmp	r3, #6
 80003f4:	dc01      	bgt.n	80003fa <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80003f6:	2307      	movs	r3, #7
 80003f8:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80003fa:	211e      	movs	r1, #30
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f000 f888 	bl	8000512 <LoRa_read>
 8000402:	4603      	mov	r3, r0
 8000404:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000406:	200a      	movs	r0, #10
 8000408:	f001 fdc6 	bl	8001f98 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	b2db      	uxtb	r3, r3
 8000410:	011b      	lsls	r3, r3, #4
 8000412:	b2da      	uxtb	r2, r3
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	f003 030f 	and.w	r3, r3, #15
 800041a:	b2db      	uxtb	r3, r3
 800041c:	4413      	add	r3, r2
 800041e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000420:	7bbb      	ldrb	r3, [r7, #14]
 8000422:	461a      	mov	r2, r3
 8000424:	211e      	movs	r1, #30
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f000 f88d 	bl	8000546 <LoRa_write>
	HAL_Delay(10);
 800042c:	200a      	movs	r0, #10
 800042e:	f001 fdb3 	bl	8001f98 <HAL_Delay>
}
 8000432:	bf00      	nop
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
 8000442:	460b      	mov	r3, r1
 8000444:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000446:	78fb      	ldrb	r3, [r7, #3]
 8000448:	461a      	mov	r2, r3
 800044a:	2109      	movs	r1, #9
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f000 f87a 	bl	8000546 <LoRa_write>
	HAL_Delay(10);
 8000452:	200a      	movs	r0, #10
 8000454:	f001 fda0 	bl	8001f98 <HAL_Delay>
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	460b      	mov	r3, r1
 800046a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000470:	78fb      	ldrb	r3, [r7, #3]
 8000472:	2b2c      	cmp	r3, #44	; 0x2c
 8000474:	d801      	bhi.n	800047a <LoRa_setOCP+0x1a>
		current = 45;
 8000476:	232d      	movs	r3, #45	; 0x2d
 8000478:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800047a:	78fb      	ldrb	r3, [r7, #3]
 800047c:	2bf0      	cmp	r3, #240	; 0xf0
 800047e:	d901      	bls.n	8000484 <LoRa_setOCP+0x24>
		current = 240;
 8000480:	23f0      	movs	r3, #240	; 0xf0
 8000482:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	2b78      	cmp	r3, #120	; 0x78
 8000488:	d809      	bhi.n	800049e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800048a:	78fb      	ldrb	r3, [r7, #3]
 800048c:	3b2d      	subs	r3, #45	; 0x2d
 800048e:	4a12      	ldr	r2, [pc, #72]	; (80004d8 <LoRa_setOCP+0x78>)
 8000490:	fb82 1203 	smull	r1, r2, r2, r3
 8000494:	1052      	asrs	r2, r2, #1
 8000496:	17db      	asrs	r3, r3, #31
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	73fb      	strb	r3, [r7, #15]
 800049c:	e00b      	b.n	80004b6 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800049e:	78fb      	ldrb	r3, [r7, #3]
 80004a0:	2bf0      	cmp	r3, #240	; 0xf0
 80004a2:	d808      	bhi.n	80004b6 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80004a4:	78fb      	ldrb	r3, [r7, #3]
 80004a6:	331e      	adds	r3, #30
 80004a8:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <LoRa_setOCP+0x78>)
 80004aa:	fb82 1203 	smull	r1, r2, r2, r3
 80004ae:	1092      	asrs	r2, r2, #2
 80004b0:	17db      	asrs	r3, r3, #31
 80004b2:	1ad3      	subs	r3, r2, r3
 80004b4:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80004b6:	7bfb      	ldrb	r3, [r7, #15]
 80004b8:	3320      	adds	r3, #32
 80004ba:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	461a      	mov	r2, r3
 80004c0:	210b      	movs	r1, #11
 80004c2:	6878      	ldr	r0, [r7, #4]
 80004c4:	f000 f83f 	bl	8000546 <LoRa_write>
	HAL_Delay(10);
 80004c8:	200a      	movs	r0, #10
 80004ca:	f001 fd65 	bl	8001f98 <HAL_Delay>
}
 80004ce:	bf00      	nop
 80004d0:	3710      	adds	r7, #16
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	66666667 	.word	0x66666667

080004dc <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80004e4:	211e      	movs	r1, #30
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f000 f813 	bl	8000512 <LoRa_read>
 80004ec:	4603      	mov	r3, r0
 80004ee:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	f043 0307 	orr.w	r3, r3, #7
 80004f6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80004f8:	7bbb      	ldrb	r3, [r7, #14]
 80004fa:	461a      	mov	r2, r3
 80004fc:	211e      	movs	r1, #30
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f000 f821 	bl	8000546 <LoRa_write>
	HAL_Delay(10);
 8000504:	200a      	movs	r0, #10
 8000506:	f001 fd47 	bl	8001f98 <HAL_Delay>
}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000512:	b580      	push	{r7, lr}
 8000514:	b086      	sub	sp, #24
 8000516:	af02      	add	r7, sp, #8
 8000518:	6078      	str	r0, [r7, #4]
 800051a:	460b      	mov	r3, r1
 800051c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800051e:	78fb      	ldrb	r3, [r7, #3]
 8000520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000524:	b2db      	uxtb	r3, r3
 8000526:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000528:	f107 030f 	add.w	r3, r7, #15
 800052c:	f107 010e 	add.w	r1, r7, #14
 8000530:	2201      	movs	r2, #1
 8000532:	9200      	str	r2, [sp, #0]
 8000534:	2201      	movs	r2, #1
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f7ff fea4 	bl	8000284 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800053c:	7bfb      	ldrb	r3, [r7, #15]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000546:	b580      	push	{r7, lr}
 8000548:	b086      	sub	sp, #24
 800054a:	af02      	add	r7, sp, #8
 800054c:	6078      	str	r0, [r7, #4]
 800054e:	460b      	mov	r3, r1
 8000550:	70fb      	strb	r3, [r7, #3]
 8000552:	4613      	mov	r3, r2
 8000554:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000556:	78fb      	ldrb	r3, [r7, #3]
 8000558:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800055c:	b2db      	uxtb	r3, r3
 800055e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000560:	78bb      	ldrb	r3, [r7, #2]
 8000562:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000564:	f107 030f 	add.w	r3, r7, #15
 8000568:	f107 010e 	add.w	r1, r7, #14
 800056c:	2201      	movs	r2, #1
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	2201      	movs	r2, #1
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff fec4 	bl	8000300 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	607a      	str	r2, [r7, #4]
 800058a:	461a      	mov	r2, r3
 800058c:	460b      	mov	r3, r1
 800058e:	72fb      	strb	r3, [r7, #11]
 8000590:	4613      	mov	r3, r2
 8000592:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000594:	7afb      	ldrb	r3, [r7, #11]
 8000596:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800059a:	b2db      	uxtb	r3, r3
 800059c:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	6818      	ldr	r0, [r3, #0]
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	889b      	ldrh	r3, [r3, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	4619      	mov	r1, r3
 80005aa:	f001 ffab 	bl	8002504 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	6998      	ldr	r0, [r3, #24]
 80005b2:	f107 0117 	add.w	r1, r7, #23
 80005b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005ba:	2201      	movs	r2, #1
 80005bc:	f002 fc66 	bl	8002e8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80005c0:	bf00      	nop
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 f86b 	bl	80036a2 <HAL_SPI_GetState>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d1f7      	bne.n	80005c2 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	6998      	ldr	r0, [r3, #24]
 80005d6:	7abb      	ldrb	r3, [r7, #10]
 80005d8:	b29a      	uxth	r2, r3
 80005da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	f002 fc54 	bl	8002e8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80005e4:	bf00      	nop
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f859 	bl	80036a2 <HAL_SPI_GetState>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d1f7      	bne.n	80005e6 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	6818      	ldr	r0, [r3, #0]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	889b      	ldrh	r3, [r3, #4]
 80005fe:	2201      	movs	r2, #1
 8000600:	4619      	mov	r1, r3
 8000602:	f001 ff7f 	bl	8002504 <HAL_GPIO_WritePin>
}
 8000606:	bf00      	nop
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]

	return 1;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000622:	b580      	push	{r7, lr}
 8000624:	b086      	sub	sp, #24
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	4611      	mov	r1, r2
 800062e:	461a      	mov	r2, r3
 8000630:	460b      	mov	r3, r1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	69db      	ldr	r3, [r3, #28]
 800063c:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800063e:	2101      	movs	r1, #1
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff fdbe 	bl	80001c2 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000646:	210e      	movs	r1, #14
 8000648:	68f8      	ldr	r0, [r7, #12]
 800064a:	f7ff ff62 	bl	8000512 <LoRa_read>
 800064e:	4603      	mov	r3, r0
 8000650:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000652:	7cfb      	ldrb	r3, [r7, #19]
 8000654:	461a      	mov	r2, r3
 8000656:	210d      	movs	r1, #13
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f7ff ff74 	bl	8000546 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	461a      	mov	r2, r3
 8000662:	2122      	movs	r1, #34	; 0x22
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f7ff ff6e 	bl	8000546 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	2100      	movs	r1, #0
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ff85 	bl	8000580 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000676:	2103      	movs	r1, #3
 8000678:	68f8      	ldr	r0, [r7, #12]
 800067a:	f7ff fda2 	bl	80001c2 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 800067e:	2112      	movs	r1, #18
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f7ff ff46 	bl	8000512 <LoRa_read>
 8000686:	4603      	mov	r3, r0
 8000688:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800068a:	7cfb      	ldrb	r3, [r7, #19]
 800068c:	f003 0308 	and.w	r3, r3, #8
 8000690:	2b00      	cmp	r3, #0
 8000692:	d00a      	beq.n	80006aa <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000694:	22ff      	movs	r2, #255	; 0xff
 8000696:	2112      	movs	r1, #18
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff ff54 	bl	8000546 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800069e:	6979      	ldr	r1, [r7, #20]
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f7ff fd8e 	bl	80001c2 <LoRa_gotoMode>
			return 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e00f      	b.n	80006ca <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 80006aa:	88bb      	ldrh	r3, [r7, #4]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	80bb      	strh	r3, [r7, #4]
 80006b0:	88bb      	ldrh	r3, [r7, #4]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d105      	bne.n	80006c2 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80006b6:	6979      	ldr	r1, [r7, #20]
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	f7ff fd82 	bl	80001c2 <LoRa_gotoMode>
				return 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	e003      	b.n	80006ca <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80006c2:	2001      	movs	r0, #1
 80006c4:	f001 fc68 	bl	8001f98 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80006c8:	e7d9      	b.n	800067e <LoRa_transmit+0x5c>
	}

}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80006da:	2105      	movs	r1, #5
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff fd70 	bl	80001c2 <LoRa_gotoMode>
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80006ea:	b590      	push	{r4, r7, lr}
 80006ec:	b089      	sub	sp, #36	; 0x24
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
 8000700:	e007      	b.n	8000712 <LoRa_receive+0x28>
		data[i]=0;
 8000702:	69bb      	ldr	r3, [r7, #24]
 8000704:	68ba      	ldr	r2, [r7, #8]
 8000706:	4413      	add	r3, r2
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	3301      	adds	r3, #1
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	69ba      	ldr	r2, [r7, #24]
 8000716:	429a      	cmp	r2, r3
 8000718:	dbf3      	blt.n	8000702 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800071a:	2101      	movs	r1, #1
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f7ff fd50 	bl	80001c2 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000722:	2112      	movs	r1, #18
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f7ff fef4 	bl	8000512 <LoRa_read>
 800072a:	4603      	mov	r3, r0
 800072c:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 800072e:	7cfb      	ldrb	r3, [r7, #19]
 8000730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000734:	2b00      	cmp	r3, #0
 8000736:	d02f      	beq.n	8000798 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000738:	22ff      	movs	r2, #255	; 0xff
 800073a:	2112      	movs	r1, #18
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f7ff ff02 	bl	8000546 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000742:	2113      	movs	r1, #19
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f7ff fee4 	bl	8000512 <LoRa_read>
 800074a:	4603      	mov	r3, r0
 800074c:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 800074e:	2110      	movs	r1, #16
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f7ff fede 	bl	8000512 <LoRa_read>
 8000756:	4603      	mov	r3, r0
 8000758:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	461a      	mov	r2, r3
 800075e:	210d      	movs	r1, #13
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f7ff fef0 	bl	8000546 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000766:	7cba      	ldrb	r2, [r7, #18]
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	4293      	cmp	r3, r2
 800076c:	bf28      	it	cs
 800076e:	4613      	movcs	r3, r2
 8000770:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	e00b      	b.n	8000790 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	18d4      	adds	r4, r2, r3
 800077e:	2100      	movs	r1, #0
 8000780:	68f8      	ldr	r0, [r7, #12]
 8000782:	f7ff fec6 	bl	8000512 <LoRa_read>
 8000786:	4603      	mov	r3, r0
 8000788:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	3301      	adds	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	7ffb      	ldrb	r3, [r7, #31]
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	429a      	cmp	r2, r3
 8000796:	dbef      	blt.n	8000778 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000798:	2105      	movs	r1, #5
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f7ff fd11 	bl	80001c2 <LoRa_gotoMode>
    return min;
 80007a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3724      	adds	r7, #36	; 0x24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd90      	pop	{r4, r7, pc}

080007aa <LoRa_getRSSI>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Returns the RSSI value of last received packet.
\* ----------------------------------------------------------------------------- */
int LoRa_getRSSI(LoRa* _LoRa){
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b084      	sub	sp, #16
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
	uint8_t read;
	read = LoRa_read(_LoRa, RegPktRssiValue);
 80007b2:	211a      	movs	r1, #26
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff feac 	bl	8000512 <LoRa_read>
 80007ba:	4603      	mov	r3, r0
 80007bc:	73fb      	strb	r3, [r7, #15]
	return -164 + read;
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	3ba4      	subs	r3, #164	; 0xa4

}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b084      	sub	sp, #16
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ff1b 	bl	800060e <LoRa_isvalid>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	f000 808c 	beq.w	80008f8 <LoRa_init+0x12e>
		// goto sleep mode:
//			LoRa_gotoMode(_LoRa, SLEEP_MODE);
//			HAL_Delay(10);

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80007e0:	2101      	movs	r1, #1
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff fe95 	bl	8000512 <LoRa_read>
 80007e8:	4603      	mov	r3, r0
 80007ea:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80007ec:	200a      	movs	r0, #10
 80007ee:	f001 fbd3 	bl	8001f98 <HAL_Delay>
			data = read | 0x80;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007f8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80007fa:	7bbb      	ldrb	r3, [r7, #14]
 80007fc:	461a      	mov	r2, r3
 80007fe:	2101      	movs	r1, #1
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff fea0 	bl	8000546 <LoRa_write>
			HAL_Delay(100);
 8000806:	2064      	movs	r0, #100	; 0x64
 8000808:	f001 fbc6 	bl	8001f98 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6a1b      	ldr	r3, [r3, #32]
 8000810:	4619      	mov	r1, r3
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff fdb2 	bl	800037c <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800081e:	4619      	mov	r1, r3
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff fe0a 	bl	800043a <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800082c:	4619      	mov	r1, r3
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff fe16 	bl	8000460 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000834:	2223      	movs	r2, #35	; 0x23
 8000836:	210c      	movs	r1, #12
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff fe84 	bl	8000546 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff fe4c 	bl	80004dc <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff fdc5 	bl	80003dc <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000852:	22ff      	movs	r2, #255	; 0xff
 8000854:	211f      	movs	r1, #31
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff fe75 	bl	8000546 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000866:	011b      	lsls	r3, r3, #4
 8000868:	b2da      	uxtb	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	4413      	add	r3, r2
 8000876:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000878:	7bbb      	ldrb	r3, [r7, #14]
 800087a:	461a      	mov	r2, r3
 800087c:	211d      	movs	r1, #29
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff fe61 	bl	8000546 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000888:	0a1b      	lsrs	r3, r3, #8
 800088a:	b29b      	uxth	r3, r3
 800088c:	b2db      	uxtb	r3, r3
 800088e:	461a      	mov	r2, r3
 8000890:	2120      	movs	r1, #32
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff fe57 	bl	8000546 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800089c:	b2db      	uxtb	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	2121      	movs	r1, #33	; 0x21
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff fe4f 	bl	8000546 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80008a8:	2140      	movs	r1, #64	; 0x40
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff fe31 	bl	8000512 <LoRa_read>
 80008b0:	4603      	mov	r3, r0
 80008b2:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80008ba:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80008bc:	7bbb      	ldrb	r3, [r7, #14]
 80008be:	461a      	mov	r2, r3
 80008c0:	2140      	movs	r1, #64	; 0x40
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff fe3f 	bl	8000546 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80008c8:	2101      	movs	r1, #1
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff fc79 	bl	80001c2 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2201      	movs	r2, #1
 80008d4:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80008d6:	200a      	movs	r0, #10
 80008d8:	f001 fb5e 	bl	8001f98 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80008dc:	2142      	movs	r1, #66	; 0x42
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff fe17 	bl	8000512 <LoRa_read>
 80008e4:	4603      	mov	r3, r0
 80008e6:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	2b12      	cmp	r3, #18
 80008ec:	d101      	bne.n	80008f2 <LoRa_init+0x128>
				return LORA_OK;
 80008ee:	23c8      	movs	r3, #200	; 0xc8
 80008f0:	e004      	b.n	80008fc <LoRa_init+0x132>
			else
				return LORA_NOT_FOUND;
 80008f2:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80008f6:	e001      	b.n	80008fc <LoRa_init+0x132>
	}
	else {
		return LORA_UNAVAILABLE;
 80008f8:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <LoRa_sendPing>:
void LoRa_sendPing(LoRa* _LoRa){
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
    uint8_t data[20];
    sprintf(data,"PING;%d;0",LORA_NODE_ID);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2201      	movs	r2, #1
 8000912:	490b      	ldr	r1, [pc, #44]	; (8000940 <LoRa_sendPing+0x3c>)
 8000914:	4618      	mov	r0, r3
 8000916:	f003 faef 	bl	8003ef8 <siprintf>
	LoRa_transmit(_LoRa, data, strlen(data), 1000);
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fc1e 	bl	8000160 <strlen>
 8000924:	4603      	mov	r3, r0
 8000926:	b2da      	uxtb	r2, r3
 8000928:	f107 010c 	add.w	r1, r7, #12
 800092c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fe76 	bl	8000622 <LoRa_transmit>
}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	080052b4 	.word	0x080052b4

08000944 <LoRa_addNeighbor>:
}

LoRa_Neighbor *neighbors = NULL ;

void LoRa_addNeighbor(int neighbor_id, const int rssi)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b097      	sub	sp, #92	; 0x5c
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
    LoRa_Neighbor *s;

    HASH_FIND_INT(neighbors, &neighbor_id, s);  /* id already in the hash? */
 800094e:	2300      	movs	r3, #0
 8000950:	657b      	str	r3, [r7, #84]	; 0x54
 8000952:	4b78      	ldr	r3, [pc, #480]	; (8000b34 <LoRa_addNeighbor+0x1f0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	f000 820c 	beq.w	8000d74 <LoRa_addNeighbor+0x430>
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	643b      	str	r3, [r7, #64]	; 0x40
 8000960:	4b75      	ldr	r3, [pc, #468]	; (8000b38 <LoRa_addNeighbor+0x1f4>)
 8000962:	653b      	str	r3, [r7, #80]	; 0x50
 8000964:	4b75      	ldr	r3, [pc, #468]	; (8000b3c <LoRa_addNeighbor+0x1f8>)
 8000966:	64bb      	str	r3, [r7, #72]	; 0x48
 8000968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800096a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800096c:	2304      	movs	r3, #4
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
 8000970:	e0bb      	b.n	8000aea <LoRa_addNeighbor+0x1a6>
 8000972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800097a:	3301      	adds	r3, #1
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	021b      	lsls	r3, r3, #8
 8000980:	441a      	add	r2, r3
 8000982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000984:	3302      	adds	r3, #2
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	041b      	lsls	r3, r3, #16
 800098a:	441a      	add	r2, r3
 800098c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800098e:	3303      	adds	r3, #3
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	061b      	lsls	r3, r3, #24
 8000994:	4413      	add	r3, r2
 8000996:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000998:	4413      	add	r3, r2
 800099a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800099c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800099e:	3304      	adds	r3, #4
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a6:	3305      	adds	r3, #5
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	021b      	lsls	r3, r3, #8
 80009ac:	441a      	add	r2, r3
 80009ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009b0:	3306      	adds	r3, #6
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	041b      	lsls	r3, r3, #16
 80009b6:	441a      	add	r2, r3
 80009b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009ba:	3307      	adds	r3, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	061b      	lsls	r3, r3, #24
 80009c0:	4413      	add	r3, r2
 80009c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80009c4:	4413      	add	r3, r2
 80009c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80009c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009ca:	3308      	adds	r3, #8
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009d2:	3309      	adds	r3, #9
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	021b      	lsls	r3, r3, #8
 80009d8:	441a      	add	r2, r3
 80009da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009dc:	330a      	adds	r3, #10
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	041b      	lsls	r3, r3, #16
 80009e2:	441a      	add	r2, r3
 80009e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009e6:	330b      	adds	r3, #11
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	061b      	lsls	r3, r3, #24
 80009ec:	4413      	add	r3, r2
 80009ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80009f0:	4413      	add	r3, r2
 80009f2:	653b      	str	r3, [r7, #80]	; 0x50
 80009f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80009f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80009fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a06:	0b5b      	lsrs	r3, r3, #13
 8000a08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a0a:	4053      	eors	r3, r2
 8000a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a20:	021b      	lsls	r3, r3, #8
 8000a22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a24:	4053      	eors	r3, r2
 8000a26:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8000a30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	653b      	str	r3, [r7, #80]	; 0x50
 8000a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a3a:	0b5b      	lsrs	r3, r3, #13
 8000a3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a3e:	4053      	eors	r3, r2
 8000a40:	653b      	str	r3, [r7, #80]	; 0x50
 8000a42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a54:	0b1b      	lsrs	r3, r3, #12
 8000a56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a58:	4053      	eors	r3, r2
 8000a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a6e:	041b      	lsls	r3, r3, #16
 8000a70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a72:	4053      	eors	r3, r2
 8000a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	653b      	str	r3, [r7, #80]	; 0x50
 8000a7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	653b      	str	r3, [r7, #80]	; 0x50
 8000a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a88:	095b      	lsrs	r3, r3, #5
 8000a8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a8c:	4053      	eors	r3, r2
 8000a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8000a90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aa2:	08db      	lsrs	r3, r3, #3
 8000aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000aa6:	4053      	eors	r3, r2
 8000aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000aaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000abc:	029b      	lsls	r3, r3, #10
 8000abe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ac0:	4053      	eors	r3, r2
 8000ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ac4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	653b      	str	r3, [r7, #80]	; 0x50
 8000acc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8000ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ad6:	0bdb      	lsrs	r3, r3, #15
 8000ad8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ada:	4053      	eors	r3, r2
 8000adc:	653b      	str	r3, [r7, #80]	; 0x50
 8000ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ae0:	330c      	adds	r3, #12
 8000ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8000ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ae6:	3b0c      	subs	r3, #12
 8000ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8000aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000aec:	2b0b      	cmp	r3, #11
 8000aee:	f63f af40 	bhi.w	8000972 <LoRa_addNeighbor+0x2e>
 8000af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000af4:	3304      	adds	r3, #4
 8000af6:	653b      	str	r3, [r7, #80]	; 0x50
 8000af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000afa:	3b01      	subs	r3, #1
 8000afc:	2b0a      	cmp	r3, #10
 8000afe:	d86b      	bhi.n	8000bd8 <LoRa_addNeighbor+0x294>
 8000b00:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <LoRa_addNeighbor+0x1c4>)
 8000b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b06:	bf00      	nop
 8000b08:	08000bcd 	.word	0x08000bcd
 8000b0c:	08000bbf 	.word	0x08000bbf
 8000b10:	08000bb1 	.word	0x08000bb1
 8000b14:	08000ba3 	.word	0x08000ba3
 8000b18:	08000b95 	.word	0x08000b95
 8000b1c:	08000b87 	.word	0x08000b87
 8000b20:	08000b79 	.word	0x08000b79
 8000b24:	08000b6b 	.word	0x08000b6b
 8000b28:	08000b5d 	.word	0x08000b5d
 8000b2c:	08000b4f 	.word	0x08000b4f
 8000b30:	08000b41 	.word	0x08000b41
 8000b34:	2000008c 	.word	0x2000008c
 8000b38:	feedbeef 	.word	0xfeedbeef
 8000b3c:	9e3779b9 	.word	0x9e3779b9
 8000b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b42:	330a      	adds	r3, #10
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	061b      	lsls	r3, r3, #24
 8000b48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b4a:	4413      	add	r3, r2
 8000b4c:	653b      	str	r3, [r7, #80]	; 0x50
 8000b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b50:	3309      	adds	r3, #9
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	041b      	lsls	r3, r3, #16
 8000b56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b58:	4413      	add	r3, r2
 8000b5a:	653b      	str	r3, [r7, #80]	; 0x50
 8000b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b5e:	3308      	adds	r3, #8
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b66:	4413      	add	r3, r2
 8000b68:	653b      	str	r3, [r7, #80]	; 0x50
 8000b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b6c:	3307      	adds	r3, #7
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	061b      	lsls	r3, r3, #24
 8000b72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b74:	4413      	add	r3, r2
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b7a:	3306      	adds	r3, #6
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	041b      	lsls	r3, r3, #16
 8000b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b82:	4413      	add	r3, r2
 8000b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b88:	3305      	adds	r3, #5
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	021b      	lsls	r3, r3, #8
 8000b8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b90:	4413      	add	r3, r2
 8000b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b96:	3304      	adds	r3, #4
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b9e:	4413      	add	r3, r2
 8000ba0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	061b      	lsls	r3, r3, #24
 8000baa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bac:	4413      	add	r3, r2
 8000bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	041b      	lsls	r3, r3, #16
 8000bb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bba:	4413      	add	r3, r2
 8000bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bc8:	4413      	add	r3, r2
 8000bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bd4:	4413      	add	r3, r2
 8000bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000be0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bea:	0b5b      	lsrs	r3, r3, #13
 8000bec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bee:	4053      	eors	r3, r2
 8000bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000bfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c08:	4053      	eors	r3, r2
 8000c0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	653b      	str	r3, [r7, #80]	; 0x50
 8000c14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8000c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c1e:	0b5b      	lsrs	r3, r3, #13
 8000c20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c22:	4053      	eors	r3, r2
 8000c24:	653b      	str	r3, [r7, #80]	; 0x50
 8000c26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c38:	0b1b      	lsrs	r3, r3, #12
 8000c3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c3c:	4053      	eors	r3, r2
 8000c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c52:	041b      	lsls	r3, r3, #16
 8000c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c56:	4053      	eors	r3, r2
 8000c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	653b      	str	r3, [r7, #80]	; 0x50
 8000c62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	653b      	str	r3, [r7, #80]	; 0x50
 8000c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c6c:	095b      	lsrs	r3, r3, #5
 8000c6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c70:	4053      	eors	r3, r2
 8000c72:	653b      	str	r3, [r7, #80]	; 0x50
 8000c74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c86:	08db      	lsrs	r3, r3, #3
 8000c88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c8a:	4053      	eors	r3, r2
 8000c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ca0:	029b      	lsls	r3, r3, #10
 8000ca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ca4:	4053      	eors	r3, r2
 8000ca6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ca8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	653b      	str	r3, [r7, #80]	; 0x50
 8000cb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	653b      	str	r3, [r7, #80]	; 0x50
 8000cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cba:	0bdb      	lsrs	r3, r3, #15
 8000cbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000cbe:	4053      	eors	r3, r2
 8000cc0:	653b      	str	r3, [r7, #80]	; 0x50
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	657b      	str	r3, [r7, #84]	; 0x54
 8000cc6:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <LoRa_addNeighbor+0x460>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d052      	beq.n	8000d74 <LoRa_addNeighbor+0x430>
 8000cce:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <LoRa_addNeighbor+0x460>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000cda:	4013      	ands	r3, r2
 8000cdc:	623b      	str	r3, [r7, #32]
 8000cde:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <LoRa_addNeighbor+0x460>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	6819      	ldr	r1, [r3, #0]
 8000ce6:	6a3a      	ldr	r2, [r7, #32]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4413      	add	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d012      	beq.n	8000d1e <LoRa_addNeighbor+0x3da>
 8000cf8:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <LoRa_addNeighbor+0x460>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	6819      	ldr	r1, [r3, #0]
 8000d00:	6a3a      	ldr	r2, [r7, #32]
 8000d02:	4613      	mov	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <LoRa_addNeighbor+0x460>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	425b      	negs	r3, r3
 8000d18:	4413      	add	r3, r2
 8000d1a:	657b      	str	r3, [r7, #84]	; 0x54
 8000d1c:	e025      	b.n	8000d6a <LoRa_addNeighbor+0x426>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	657b      	str	r3, [r7, #84]	; 0x54
 8000d22:	e022      	b.n	8000d6a <LoRa_addNeighbor+0x426>
 8000d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d10d      	bne.n	8000d4a <LoRa_addNeighbor+0x406>
 8000d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	d109      	bne.n	8000d4a <LoRa_addNeighbor+0x406>
 8000d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	1d39      	adds	r1, r7, #4
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 ffd6 	bl	8003cf0 <memcmp>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d013      	beq.n	8000d72 <LoRa_addNeighbor+0x42e>
 8000d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d009      	beq.n	8000d66 <LoRa_addNeighbor+0x422>
 8000d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d54:	699a      	ldr	r2, [r3, #24]
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <LoRa_addNeighbor+0x460>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	425b      	negs	r3, r3
 8000d60:	4413      	add	r3, r2
 8000d62:	657b      	str	r3, [r7, #84]	; 0x54
 8000d64:	e001      	b.n	8000d6a <LoRa_addNeighbor+0x426>
 8000d66:	2300      	movs	r3, #0
 8000d68:	657b      	str	r3, [r7, #84]	; 0x54
 8000d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1d9      	bne.n	8000d24 <LoRa_addNeighbor+0x3e0>
 8000d70:	e000      	b.n	8000d74 <LoRa_addNeighbor+0x430>
 8000d72:	bf00      	nop
    if (s == NULL) {
 8000d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f040 8353 	bne.w	8001422 <LoRa_addNeighbor+0xade>
        s = (LoRa_Neighbor*)malloc(sizeof *s);
 8000d7c:	2028      	movs	r0, #40	; 0x28
 8000d7e:	f002 ffa7 	bl	8003cd0 <malloc>
 8000d82:	4603      	mov	r3, r0
 8000d84:	657b      	str	r3, [r7, #84]	; 0x54
        s->id = neighbor_id;
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d8a:	601a      	str	r2, [r3, #0]
        HASH_ADD_INT(neighbors, id, s);  /* id is the key field */
 8000d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <LoRa_addNeighbor+0x464>)
 8000d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <LoRa_addNeighbor+0x468>)
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
 8000d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8000da0:	e0c2      	b.n	8000f28 <LoRa_addNeighbor+0x5e4>
 8000da2:	bf00      	nop
 8000da4:	2000008c 	.word	0x2000008c
 8000da8:	feedbeef 	.word	0xfeedbeef
 8000dac:	9e3779b9 	.word	0x9e3779b9
 8000db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db8:	3301      	adds	r3, #1
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	441a      	add	r2, r3
 8000dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	041b      	lsls	r3, r3, #16
 8000dc8:	441a      	add	r2, r3
 8000dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dcc:	3303      	adds	r3, #3
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	061b      	lsls	r3, r3, #24
 8000dd2:	4413      	add	r3, r2
 8000dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000dd6:	4413      	add	r3, r2
 8000dd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ddc:	3304      	adds	r3, #4
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de4:	3305      	adds	r3, #5
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	441a      	add	r2, r3
 8000dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dee:	3306      	adds	r3, #6
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	041b      	lsls	r3, r3, #16
 8000df4:	441a      	add	r2, r3
 8000df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df8:	3307      	adds	r3, #7
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	061b      	lsls	r3, r3, #24
 8000dfe:	4413      	add	r3, r2
 8000e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e02:	4413      	add	r3, r2
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
 8000e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e08:	3308      	adds	r3, #8
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e10:	3309      	adds	r3, #9
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	441a      	add	r2, r3
 8000e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1a:	330a      	adds	r3, #10
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	041b      	lsls	r3, r3, #16
 8000e20:	441a      	add	r2, r3
 8000e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e24:	330b      	adds	r3, #11
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	061b      	lsls	r3, r3, #24
 8000e2a:	4413      	add	r3, r2
 8000e2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e2e:	4413      	add	r3, r2
 8000e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e44:	0b5b      	lsrs	r3, r3, #13
 8000e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e48:	4053      	eors	r3, r2
 8000e4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
 8000e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8000e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e62:	4053      	eors	r3, r2
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
 8000e66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e78:	0b5b      	lsrs	r3, r3, #13
 8000e7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e7c:	4053      	eors	r3, r2
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e92:	0b1b      	lsrs	r3, r3, #12
 8000e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e96:	4053      	eors	r3, r2
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8000ea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8000eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eac:	041b      	lsls	r3, r3, #16
 8000eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000eb0:	4053      	eors	r3, r2
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8000eb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ebc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000eca:	4053      	eors	r3, r2
 8000ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ee4:	4053      	eors	r3, r2
 8000ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	637b      	str	r3, [r7, #52]	; 0x34
 8000ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000efa:	029b      	lsls	r3, r3, #10
 8000efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000efe:	4053      	eors	r3, r2
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
 8000f02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f14:	0bdb      	lsrs	r3, r3, #15
 8000f16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f18:	4053      	eors	r3, r2
 8000f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1e:	330c      	adds	r3, #12
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f24:	3b0c      	subs	r3, #12
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
 8000f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f2a:	2b0b      	cmp	r3, #11
 8000f2c:	f63f af40 	bhi.w	8000db0 <LoRa_addNeighbor+0x46c>
 8000f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f32:	3304      	adds	r3, #4
 8000f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	2b0a      	cmp	r3, #10
 8000f3c:	d864      	bhi.n	8001008 <LoRa_addNeighbor+0x6c4>
 8000f3e:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <LoRa_addNeighbor+0x600>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000ffd 	.word	0x08000ffd
 8000f48:	08000fef 	.word	0x08000fef
 8000f4c:	08000fe1 	.word	0x08000fe1
 8000f50:	08000fd3 	.word	0x08000fd3
 8000f54:	08000fc5 	.word	0x08000fc5
 8000f58:	08000fb7 	.word	0x08000fb7
 8000f5c:	08000fa9 	.word	0x08000fa9
 8000f60:	08000f9b 	.word	0x08000f9b
 8000f64:	08000f8d 	.word	0x08000f8d
 8000f68:	08000f7f 	.word	0x08000f7f
 8000f6c:	08000f71 	.word	0x08000f71
 8000f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f72:	330a      	adds	r3, #10
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	061b      	lsls	r3, r3, #24
 8000f78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f7a:	4413      	add	r3, r2
 8000f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f80:	3309      	adds	r3, #9
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	041b      	lsls	r3, r3, #16
 8000f86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f88:	4413      	add	r3, r2
 8000f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8e:	3308      	adds	r3, #8
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f96:	4413      	add	r3, r2
 8000f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f9c:	3307      	adds	r3, #7
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	061b      	lsls	r3, r3, #24
 8000fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fa4:	4413      	add	r3, r2
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8000fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000faa:	3306      	adds	r3, #6
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	041b      	lsls	r3, r3, #16
 8000fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fb2:	4413      	add	r3, r2
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8000fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb8:	3305      	adds	r3, #5
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fc0:	4413      	add	r3, r2
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8000fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fce:	4413      	add	r3, r2
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	3303      	adds	r3, #3
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	061b      	lsls	r3, r3, #24
 8000fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fdc:	4413      	add	r3, r2
 8000fde:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	041b      	lsls	r3, r3, #16
 8000fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fea:	4413      	add	r3, r2
 8000fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ff8:	4413      	add	r3, r2
 8000ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001004:	4413      	add	r3, r2
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
 8001008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800100a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	63bb      	str	r3, [r7, #56]	; 0x38
 8001018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800101a:	0b5b      	lsrs	r3, r3, #13
 800101c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800101e:	4053      	eors	r3, r2
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
 8001022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
 800102a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800102c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
 8001032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001038:	4053      	eors	r3, r2
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
 800103c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800103e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800104c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104e:	0b5b      	lsrs	r3, r3, #13
 8001050:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001052:	4053      	eors	r3, r2
 8001054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	63bb      	str	r3, [r7, #56]	; 0x38
 800105e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	63bb      	str	r3, [r7, #56]	; 0x38
 8001066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001068:	0b1b      	lsrs	r3, r3, #12
 800106a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800106c:	4053      	eors	r3, r2
 800106e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001070:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
 8001078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800107a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
 8001080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001082:	041b      	lsls	r3, r3, #16
 8001084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001086:	4053      	eors	r3, r2
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
 800108a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800108c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800109a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109c:	095b      	lsrs	r3, r3, #5
 800109e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010a0:	4053      	eors	r3, r2
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80010ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80010b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010b6:	08db      	lsrs	r3, r3, #3
 80010b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010ba:	4053      	eors	r3, r2
 80010bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80010be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	637b      	str	r3, [r7, #52]	; 0x34
 80010c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
 80010ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010d0:	029b      	lsls	r3, r3, #10
 80010d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010d4:	4053      	eors	r3, r2
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
 80010d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ea:	0bdb      	lsrs	r3, r3, #15
 80010ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010ee:	4053      	eors	r3, r2
 80010f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
 80010f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010fc:	61da      	str	r2, [r3, #28]
 80010fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001100:	2204      	movs	r2, #4
 8001102:	621a      	str	r2, [r3, #32]
 8001104:	4b81      	ldr	r3, [pc, #516]	; (800130c <LoRa_addNeighbor+0x9c8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d14e      	bne.n	80011aa <LoRa_addNeighbor+0x866>
 800110c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	202c      	movs	r0, #44	; 0x2c
 800111a:	f002 fdd9 	bl	8003cd0 <malloc>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d103      	bne.n	8001136 <LoRa_addNeighbor+0x7f2>
 800112e:	f04f 30ff 	mov.w	r0, #4294967295
 8001132:	f002 fd95 	bl	8003c60 <exit>
 8001136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	222c      	movs	r2, #44	; 0x2c
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fde6 	bl	8003d10 <memset>
 8001144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800114a:	3208      	adds	r2, #8
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2220      	movs	r2, #32
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2205      	movs	r2, #5
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2208      	movs	r2, #8
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001168:	689c      	ldr	r4, [r3, #8]
 800116a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800116e:	f002 fdaf 	bl	8003cd0 <malloc>
 8001172:	4603      	mov	r3, r0
 8001174:	6023      	str	r3, [r4, #0]
 8001176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	4a65      	ldr	r2, [pc, #404]	; (8001310 <LoRa_addNeighbor+0x9cc>)
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
 800117e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d103      	bne.n	8001190 <LoRa_addNeighbor+0x84c>
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f002 fd68 	bl	8003c60 <exit>
 8001190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f002 fdb7 	bl	8003d10 <memset>
 80011a2:	4a5a      	ldr	r2, [pc, #360]	; (800130c <LoRa_addNeighbor+0x9c8>)
 80011a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	e01f      	b.n	80011ea <LoRa_addNeighbor+0x8a6>
 80011aa:	4b58      	ldr	r3, [pc, #352]	; (800130c <LoRa_addNeighbor+0x9c8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
 80011ba:	4b54      	ldr	r3, [pc, #336]	; (800130c <LoRa_addNeighbor+0x9c8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	691a      	ldr	r2, [r3, #16]
 80011c2:	4b52      	ldr	r3, [pc, #328]	; (800130c <LoRa_addNeighbor+0x9c8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	425b      	negs	r3, r3
 80011cc:	441a      	add	r2, r3
 80011ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	4b4e      	ldr	r3, [pc, #312]	; (800130c <LoRa_addNeighbor+0x9c8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	4b4b      	ldr	r3, [pc, #300]	; (800130c <LoRa_addNeighbor+0x9c8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011e6:	3208      	adds	r2, #8
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	4b48      	ldr	r3, [pc, #288]	; (800130c <LoRa_addNeighbor+0x9c8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	3201      	adds	r2, #1
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	4b45      	ldr	r3, [pc, #276]	; (800130c <LoRa_addNeighbor+0x9c8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001202:	4013      	ands	r3, r2
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	4b41      	ldr	r3, [pc, #260]	; (800130c <LoRa_addNeighbor+0x9c8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	6819      	ldr	r1, [r3, #0]
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800122c:	619a      	str	r2, [r3, #24]
 800122e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d004      	beq.n	8001246 <LoRa_addNeighbor+0x902>
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001242:	3208      	adds	r2, #8
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001248:	f103 0208 	add.w	r2, r3, #8
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6859      	ldr	r1, [r3, #4]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4299      	cmp	r1, r3
 8001264:	f0c0 80dd 	bcc.w	8001422 <LoRa_addNeighbor+0xade>
 8001268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	2b00      	cmp	r3, #0
 8001270:	f040 80d7 	bne.w	8001422 <LoRa_addNeighbor+0xade>
 8001274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fd24 	bl	8003cd0 <malloc>
 8001288:	4603      	mov	r3, r0
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d103      	bne.n	800129a <LoRa_addNeighbor+0x956>
 8001292:	f04f 30ff 	mov.w	r0, #4294967295
 8001296:	f002 fce3 	bl	8003c60 <exit>
 800129a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	461a      	mov	r2, r3
 80012aa:	2100      	movs	r1, #0
 80012ac:	6978      	ldr	r0, [r7, #20]
 80012ae:	f002 fd2f 	bl	8003d10 <memset>
 80012b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	3301      	adds	r3, #1
 80012c0:	40da      	lsrs	r2, r3
 80012c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	68d9      	ldr	r1, [r3, #12]
 80012c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	3b01      	subs	r3, #1
 80012d2:	400b      	ands	r3, r1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <LoRa_addNeighbor+0x998>
 80012d8:	2101      	movs	r1, #1
 80012da:	e000      	b.n	80012de <LoRa_addNeighbor+0x99a>
 80012dc:	2100      	movs	r1, #0
 80012de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	440a      	add	r2, r1
 80012e4:	619a      	str	r2, [r3, #24]
 80012e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
 80012ee:	2300      	movs	r3, #0
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80012f2:	e05f      	b.n	80013b4 <LoRa_addNeighbor+0xa70>
 80012f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	6819      	ldr	r1, [r3, #0]
 80012fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
 800130a:	e04d      	b.n	80013a8 <LoRa_addNeighbor+0xa64>
 800130c:	2000008c 	.word	0x2000008c
 8001310:	a0111fe1 	.word	0xa0111fe1
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	69da      	ldr	r2, [r3, #28]
 800131e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	3b01      	subs	r3, #1
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	461a      	mov	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	4413      	add	r3, r2
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	429a      	cmp	r2, r3
 8001354:	d914      	bls.n	8001380 <LoRa_addNeighbor+0xa3c>
 8001356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	69da      	ldr	r2, [r3, #28]
 800135c:	3201      	adds	r2, #1
 800135e:	61da      	str	r2, [r3, #28]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800136a:	6889      	ldr	r1, [r1, #8]
 800136c:	6989      	ldr	r1, [r1, #24]
 800136e:	fb01 f303 	mul.w	r3, r1, r3
 8001372:	429a      	cmp	r2, r3
 8001374:	d904      	bls.n	8001380 <LoRa_addNeighbor+0xa3c>
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	611a      	str	r2, [r3, #16]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <LoRa_addNeighbor+0xa5a>
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1b2      	bne.n	8001314 <LoRa_addNeighbor+0x9d0>
 80013ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b0:	3301      	adds	r3, #1
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013bc:	429a      	cmp	r2, r3
 80013be:	d399      	bcc.n	80012f4 <LoRa_addNeighbor+0x9b0>
 80013c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fc8a 	bl	8003ce0 <free>
 80013cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	0052      	lsls	r2, r2, #1
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	3201      	adds	r2, #1
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	69da      	ldr	r2, [r3, #28]
 80013f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	085b      	lsrs	r3, r3, #1
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d904      	bls.n	8001408 <LoRa_addNeighbor+0xac4>
 80013fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	3301      	adds	r3, #1
 8001406:	e000      	b.n	800140a <LoRa_addNeighbor+0xac6>
 8001408:	2300      	movs	r3, #0
 800140a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800140c:	6892      	ldr	r2, [r2, #8]
 800140e:	6213      	str	r3, [r2, #32]
 8001410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d903      	bls.n	8001422 <LoRa_addNeighbor+0xade>
 800141a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2201      	movs	r2, #1
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
    }
    s->rssi = rssi;
 8001422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	605a      	str	r2, [r3, #4]
}
 8001428:	bf00      	nop
 800142a:	375c      	adds	r7, #92	; 0x5c
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}

08001430 <LoRa_deleteAll>:
    HASH_DEL(neighbors, neighbor);  /* neighbor: pointer to deletee */
    free(neighbor);
}

void LoRa_deleteAll()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
    LoRa_Neighbor *current_neighbor;
    LoRa_Neighbor *tmp;

    HASH_ITER(hh, neighbors, current_neighbor, tmp) {
 8001436:	4b57      	ldr	r3, [pc, #348]	; (8001594 <LoRa_deleteAll+0x164>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	4b55      	ldr	r3, [pc, #340]	; (8001594 <LoRa_deleteAll+0x164>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <LoRa_deleteAll+0x1c>
 8001444:	4b53      	ldr	r3, [pc, #332]	; (8001594 <LoRa_deleteAll+0x164>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	e000      	b.n	800144e <LoRa_deleteAll+0x1e>
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	e096      	b.n	8001580 <LoRa_deleteAll+0x150>
        HASH_DEL(neighbors, current_neighbor);  /* delete it (neighbors advances to next) */
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	3308      	adds	r3, #8
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d114      	bne.n	800148a <LoRa_deleteAll+0x5a>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d110      	bne.n	800148a <LoRa_deleteAll+0x5a>
 8001468:	4b4a      	ldr	r3, [pc, #296]	; (8001594 <LoRa_deleteAll+0x164>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f002 fc35 	bl	8003ce0 <free>
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <LoRa_deleteAll+0x164>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4618      	mov	r0, r3
 800147e:	f002 fc2f 	bl	8003ce0 <free>
 8001482:	4b44      	ldr	r3, [pc, #272]	; (8001594 <LoRa_deleteAll+0x164>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e06d      	b.n	8001566 <LoRa_deleteAll+0x136>
 800148a:	4b42      	ldr	r3, [pc, #264]	; (8001594 <LoRa_deleteAll+0x164>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d10b      	bne.n	80014b0 <LoRa_deleteAll+0x80>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <LoRa_deleteAll+0x164>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	4619      	mov	r1, r3
 80014a6:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <LoRa_deleteAll+0x164>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	440a      	add	r2, r1
 80014ae:	611a      	str	r2, [r3, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00a      	beq.n	80014ce <LoRa_deleteAll+0x9e>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a35      	ldr	r2, [pc, #212]	; (8001594 <LoRa_deleteAll+0x164>)
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	6892      	ldr	r2, [r2, #8]
 80014c2:	6952      	ldr	r2, [r2, #20]
 80014c4:	4413      	add	r3, r2
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	6892      	ldr	r2, [r2, #8]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	e003      	b.n	80014d6 <LoRa_deleteAll+0xa6>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	4a30      	ldr	r2, [pc, #192]	; (8001594 <LoRa_deleteAll+0x164>)
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d009      	beq.n	80014f2 <LoRa_deleteAll+0xc2>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	4a2c      	ldr	r2, [pc, #176]	; (8001594 <LoRa_deleteAll+0x164>)
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	6892      	ldr	r2, [r2, #8]
 80014e8:	6952      	ldr	r2, [r2, #20]
 80014ea:	4413      	add	r3, r2
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	6852      	ldr	r2, [r2, #4]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	69da      	ldr	r2, [r3, #28]
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <LoRa_deleteAll+0x164>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	4b23      	ldr	r3, [pc, #140]	; (8001594 <LoRa_deleteAll+0x164>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	6819      	ldr	r1, [r3, #0]
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	1e5a      	subs	r2, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	429a      	cmp	r2, r3
 800152c:	d103      	bne.n	8001536 <LoRa_deleteAll+0x106>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	691a      	ldr	r2, [r3, #16]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d004      	beq.n	8001548 <LoRa_deleteAll+0x118>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	6912      	ldr	r2, [r2, #16]
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d004      	beq.n	800155a <LoRa_deleteAll+0x12a>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	68d2      	ldr	r2, [r2, #12]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <LoRa_deleteAll+0x164>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	3a01      	subs	r2, #1
 8001564:	60da      	str	r2, [r3, #12]
        free(current_neighbor);             /* free it */
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f002 fbba 	bl	8003ce0 <free>
    HASH_ITER(hh, neighbors, current_neighbor, tmp) {
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <LoRa_deleteAll+0x14c>
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	e000      	b.n	800157e <LoRa_deleteAll+0x14e>
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f47f af65 	bne.w	8001452 <LoRa_deleteAll+0x22>
    }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000008c 	.word	0x2000008c

08001598 <LoRa_getNeighborRssi>:
int by_id(const LoRa_Neighbor *a, const LoRa_Neighbor *b)
{
    return (a->id - b->id);
}

void LoRa_getNeighborRssi(const char *input, char *command, int *id, int *rssi) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	603b      	str	r3, [r7, #0]
    char *token = strtok(input, ";");
 80015a6:	4916      	ldr	r1, [pc, #88]	; (8001600 <LoRa_getNeighborRssi+0x68>)
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f002 fccd 	bl	8003f48 <strtok>
 80015ae:	6178      	str	r0, [r7, #20]

    if (token != NULL) {
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01f      	beq.n	80015f6 <LoRa_getNeighborRssi+0x5e>
        strcpy(command, token);
 80015b6:	6979      	ldr	r1, [r7, #20]
 80015b8:	68b8      	ldr	r0, [r7, #8]
 80015ba:	f002 fcbd 	bl	8003f38 <strcpy>

        token = strtok(NULL, ";");
 80015be:	4910      	ldr	r1, [pc, #64]	; (8001600 <LoRa_getNeighborRssi+0x68>)
 80015c0:	2000      	movs	r0, #0
 80015c2:	f002 fcc1 	bl	8003f48 <strtok>
 80015c6:	6178      	str	r0, [r7, #20]
        if (token != NULL) {
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d013      	beq.n	80015f6 <LoRa_getNeighborRssi+0x5e>
            *id = atoi(token);
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f002 fb3c 	bl	8003c4c <atoi>
 80015d4:	4602      	mov	r2, r0
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]

            token = strtok(NULL, ";");
 80015da:	4909      	ldr	r1, [pc, #36]	; (8001600 <LoRa_getNeighborRssi+0x68>)
 80015dc:	2000      	movs	r0, #0
 80015de:	f002 fcb3 	bl	8003f48 <strtok>
 80015e2:	6178      	str	r0, [r7, #20]
            if (token != NULL) {
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <LoRa_getNeighborRssi+0x5e>
                *rssi = atoi(token);
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f002 fb2e 	bl	8003c4c <atoi>
 80015f0:	4602      	mov	r2, r0
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	080052dc 	.word	0x080052dc

08001604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001618:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <MX_GPIO_Init+0xb4>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <MX_GPIO_Init+0xb4>)
 800161e:	f043 0320 	orr.w	r3, r3, #32
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <MX_GPIO_Init+0xb4>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0320 	and.w	r3, r3, #32
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <MX_GPIO_Init+0xb4>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a20      	ldr	r2, [pc, #128]	; (80016b8 <MX_GPIO_Init+0xb4>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <MX_GPIO_Init+0xb4>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <MX_GPIO_Init+0xb4>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a1a      	ldr	r2, [pc, #104]	; (80016b8 <MX_GPIO_Init+0xb4>)
 800164e:	f043 0308 	orr.w	r3, r3, #8
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <MX_GPIO_Init+0xb4>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	2103      	movs	r1, #3
 8001664:	4815      	ldr	r0, [pc, #84]	; (80016bc <MX_GPIO_Init+0xb8>)
 8001666:	f000 ff4d 	bl	8002504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800166a:	2310      	movs	r3, #16
 800166c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_GPIO_Init+0xbc>)
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	4619      	mov	r1, r3
 800167c:	4811      	ldr	r0, [pc, #68]	; (80016c4 <MX_GPIO_Init+0xc0>)
 800167e:	f000 fdbd 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8001682:	2303      	movs	r3, #3
 8001684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2302      	movs	r3, #2
 8001690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	4619      	mov	r1, r3
 8001698:	4808      	ldr	r0, [pc, #32]	; (80016bc <MX_GPIO_Init+0xb8>)
 800169a:	f000 fdaf 	bl	80021fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	200a      	movs	r0, #10
 80016a4:	f000 fd73 	bl	800218e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80016a8:	200a      	movs	r0, #10
 80016aa:	f000 fd8c 	bl	80021c6 <HAL_NVIC_EnableIRQ>

}
 80016ae:	bf00      	nop
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40010c00 	.word	0x40010c00
 80016c0:	10110000 	.word	0x10110000
 80016c4:	40010800 	.word	0x40010800

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b08c      	sub	sp, #48	; 0x30
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ce:	f000 fc01 	bl	8001ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d2:	f000 f877 	bl	80017c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d6:	f7ff ff95 	bl	8001604 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016da:	f000 f9b9 	bl	8001a50 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80016de:	f000 fb5d 	bl	8001d9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  myLoRa = newLoRa();
 80016e2:	4c30      	ldr	r4, [pc, #192]	; (80017a4 <main+0xdc>)
 80016e4:	463b      	mov	r3, r7
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe fd42 	bl	8000170 <newLoRa>
 80016ec:	4625      	mov	r5, r4
 80016ee:	463c      	mov	r4, r7
 80016f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <main+0xdc>)
 8001702:	4a29      	ldr	r2, [pc, #164]	; (80017a8 <main+0xe0>)
 8001704:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8001706:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <main+0xdc>)
 8001708:	2201      	movs	r2, #1
 800170a:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <main+0xdc>)
 800170e:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <main+0xe0>)
 8001710:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <main+0xdc>)
 8001714:	2202      	movs	r2, #2
 8001716:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <main+0xdc>)
 800171a:	4a24      	ldr	r2, [pc, #144]	; (80017ac <main+0xe4>)
 800171c:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <main+0xdc>)
 8001720:	2210      	movs	r2, #16
 8001722:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <main+0xdc>)
 8001726:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <main+0xe8>)
 8001728:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 868;             // default = 433 MHz
 800172a:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <main+0xdc>)
 800172c:	f44f 7259 	mov.w	r2, #868	; 0x364
 8001730:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <main+0xdc>)
 8001734:	2207      	movs	r2, #7
 8001736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <main+0xdc>)
 800173c:	2207      	movs	r2, #7
 800173e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <main+0xdc>)
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <main+0xdc>)
 800174c:	22ff      	movs	r2, #255	; 0xff
 800174e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <main+0xdc>)
 8001754:	2282      	movs	r2, #130	; 0x82
 8001756:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.preamble              = 9;              // default = 8;
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <main+0xdc>)
 800175c:	2209      	movs	r2, #9
 800175e:	851a      	strh	r2, [r3, #40]	; 0x28

//  LoRa_reset(&myLoRa);
  if (LoRa_init(&myLoRa) == LORA_OK ){
 8001760:	4810      	ldr	r0, [pc, #64]	; (80017a4 <main+0xdc>)
 8001762:	f7ff f832 	bl	80007ca <LoRa_init>
 8001766:	4603      	mov	r3, r0
 8001768:	2bc8      	cmp	r3, #200	; 0xc8
 800176a:	d102      	bne.n	8001772 <main+0xaa>
	  LoRa_stat = 1;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <main+0xec>)
 800176e:	2201      	movs	r2, #1
 8001770:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 8001772:	480c      	ldr	r0, [pc, #48]	; (80017a4 <main+0xdc>)
 8001774:	f7fe ffad 	bl	80006d2 <LoRa_startReceiving>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	HAL_UART_Transmit(&huart1, (uint8_t *)"Enviando mensaje\n", 17, HAL_MAX_DELAY);
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	2211      	movs	r2, #17
 800177e:	490e      	ldr	r1, [pc, #56]	; (80017b8 <main+0xf0>)
 8001780:	480e      	ldr	r0, [pc, #56]	; (80017bc <main+0xf4>)
 8001782:	f002 f8e3 	bl	800394c <HAL_UART_Transmit>
	LoRa_sendPing(&myLoRa);
 8001786:	4807      	ldr	r0, [pc, #28]	; (80017a4 <main+0xdc>)
 8001788:	f7ff f8bc 	bl	8000904 <LoRa_sendPing>
	HAL_UART_Transmit(&huart1, (uint8_t *)"Esperando respuesta...\n", 23, HAL_MAX_DELAY);
 800178c:	f04f 33ff 	mov.w	r3, #4294967295
 8001790:	2217      	movs	r2, #23
 8001792:	490b      	ldr	r1, [pc, #44]	; (80017c0 <main+0xf8>)
 8001794:	4809      	ldr	r0, [pc, #36]	; (80017bc <main+0xf4>)
 8001796:	f002 f8d9 	bl	800394c <HAL_UART_Transmit>
	HAL_Delay(1000);
 800179a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800179e:	f000 fbfb 	bl	8001f98 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)"Enviando mensaje\n", 17, HAL_MAX_DELAY);
 80017a2:	e7e9      	b.n	8001778 <main+0xb0>
 80017a4:	20000090 	.word	0x20000090
 80017a8:	40010c00 	.word	0x40010c00
 80017ac:	40010800 	.word	0x40010800
 80017b0:	20000144 	.word	0x20000144
 80017b4:	200000bc 	.word	0x200000bc
 80017b8:	080052e0 	.word	0x080052e0
 80017bc:	200001a0 	.word	0x200001a0
 80017c0:	080052f4 	.word	0x080052f4

080017c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b090      	sub	sp, #64	; 0x40
 80017c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ca:	f107 0318 	add.w	r3, r7, #24
 80017ce:	2228      	movs	r2, #40	; 0x28
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 fa9c 	bl	8003d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ea:	2301      	movs	r3, #1
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ee:	2310      	movs	r3, #16
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f2:	2302      	movs	r3, #2
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80017f6:	2300      	movs	r3, #0
 80017f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 80017fa:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80017fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001800:	f107 0318 	add.w	r3, r7, #24
 8001804:	4618      	mov	r0, r3
 8001806:	f000 fead 	bl	8002564 <HAL_RCC_OscConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001810:	f000 f918 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001814:	230f      	movs	r3, #15
 8001816:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001818:	2302      	movs	r3, #2
 800181a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f001 f91a 	bl	8002a68 <HAL_RCC_ClockConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800183a:	f000 f903 	bl	8001a44 <Error_Handler>
  }
}
 800183e:	bf00      	nop
 8001840:	3740      	adds	r7, #64	; 0x40
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800184c:	b0b3      	sub	sp, #204	; 0xcc
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	80fb      	strh	r3, [r7, #6]
 8001854:	466b      	mov	r3, sp
 8001856:	461e      	mov	r6, r3
	if(GPIO_Pin == DIO0_Pin){
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	2b10      	cmp	r3, #16
 800185c:	d10a      	bne.n	8001874 <HAL_GPIO_EXTI_Callback+0x2c>
	LoRa_receive(&myLoRa, RxBuffer, 128);
 800185e:	2280      	movs	r2, #128	; 0x80
 8001860:	496e      	ldr	r1, [pc, #440]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001862:	486f      	ldr	r0, [pc, #444]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8001864:	f7fe ff41 	bl	80006ea <LoRa_receive>
	RSSI = LoRa_getRSSI(&myLoRa);
 8001868:	486d      	ldr	r0, [pc, #436]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800186a:	f7fe ff9e 	bl	80007aa <LoRa_getRSSI>
 800186e:	4603      	mov	r3, r0
 8001870:	4a6c      	ldr	r2, [pc, #432]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001872:	6013      	str	r3, [r2, #0]
	}
	uint8_t uartBuff[128];
	int len_message = sizeof(RxBuffer) / sizeof(RxBuffer[0]);
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	char message[len_message];
 800187a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800187e:	1e4b      	subs	r3, r1, #1
 8001880:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001884:	460a      	mov	r2, r1
 8001886:	2300      	movs	r3, #0
 8001888:	4690      	mov	r8, r2
 800188a:	4699      	mov	r9, r3
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001898:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800189c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018a0:	460a      	mov	r2, r1
 80018a2:	2300      	movs	r3, #0
 80018a4:	4614      	mov	r4, r2
 80018a6:	461d      	mov	r5, r3
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	00eb      	lsls	r3, r5, #3
 80018b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b6:	00e2      	lsls	r2, r4, #3
 80018b8:	460b      	mov	r3, r1
 80018ba:	3307      	adds	r3, #7
 80018bc:	08db      	lsrs	r3, r3, #3
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	ebad 0d03 	sub.w	sp, sp, r3
 80018c4:	466b      	mov	r3, sp
 80018c6:	3300      	adds	r3, #0
 80018c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	for (int i=0;i<len_message;i++){
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80018d2:	e010      	b.n	80018f6 <HAL_GPIO_EXTI_Callback+0xae>
		message[i] = (char)RxBuffer[i];
 80018d4:	4a51      	ldr	r2, [pc, #324]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x1d4>)
 80018d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018da:	4413      	add	r3, r2
 80018dc:	7819      	ldrb	r1, [r3, #0]
 80018de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80018e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018e6:	4413      	add	r3, r2
 80018e8:	460a      	mov	r2, r1
 80018ea:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<len_message;i++){
 80018ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018f0:	3301      	adds	r3, #1
 80018f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80018f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80018fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018fe:	429a      	cmp	r2, r3
 8001900:	dbe8      	blt.n	80018d4 <HAL_GPIO_EXTI_Callback+0x8c>
	}
	message[len_message] = '\0';
 8001902:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001906:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800190a:	4413      	add	r3, r2
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
	sprintf(uartBuff, "%s rssi:%d\n",message,RSSI);
 8001910:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001918:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800191c:	4942      	ldr	r1, [pc, #264]	; (8001a28 <HAL_GPIO_EXTI_Callback+0x1e0>)
 800191e:	f002 faeb 	bl	8003ef8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8001922:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fc1a 	bl	8000160 <strlen>
 800192c:	4603      	mov	r3, r0
 800192e:	b29a      	uxth	r2, r3
 8001930:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
 8001938:	483c      	ldr	r0, [pc, #240]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x1e4>)
 800193a:	f002 f807 	bl	800394c <HAL_UART_Transmit>

	char command[20];
	int id, rssi;
	LoRa_getNeighborRssi(message,command, &id, &rssi);
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	f107 0220 	add.w	r2, r7, #32
 8001946:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800194a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800194e:	f7ff fe23 	bl	8001598 <LoRa_getNeighborRssi>

	if(strcmp(command,"ANSPING")==0){
 8001952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001956:	4936      	ldr	r1, [pc, #216]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fbf7 	bl	800014c <strcmp>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d11c      	bne.n	800199e <HAL_GPIO_EXTI_Callback+0x156>
		sprintf(uartBuff, "ID: %d rssi: %d\n",id, rssi);
 8001964:	6a3a      	ldr	r2, [r7, #32]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800196c:	4931      	ldr	r1, [pc, #196]	; (8001a34 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800196e:	f002 fac3 	bl	8003ef8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8001972:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fbf2 	bl	8000160 <strlen>
 800197c:	4603      	mov	r3, r0
 800197e:	b29a      	uxth	r2, r3
 8001980:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
 8001988:	4828      	ldr	r0, [pc, #160]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x1e4>)
 800198a:	f001 ffdf 	bl	800394c <HAL_UART_Transmit>
		LoRa_deleteAll();
 800198e:	f7ff fd4f 	bl	8001430 <LoRa_deleteAll>
		LoRa_addNeighbor(id, rssi);
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe ffd3 	bl	8000944 <LoRa_addNeighbor>
//		LoRa_printNeighbors();
	}
	if(strcmp(command,"PING")==0){
 800199e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a2:	4925      	ldr	r1, [pc, #148]	; (8001a38 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fbd1 	bl	800014c <strcmp>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d12e      	bne.n	8001a0e <HAL_GPIO_EXTI_Callback+0x1c6>

	    uint8_t response_ping[20];
	    sprintf(response_ping,"ANSPING;%d;%d",LORA_NODE_ID,RSSI);
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f107 0008 	add.w	r0, r7, #8
 80019b8:	2201      	movs	r2, #1
 80019ba:	4920      	ldr	r1, [pc, #128]	; (8001a3c <HAL_GPIO_EXTI_Callback+0x1f4>)
 80019bc:	f002 fa9c 	bl	8003ef8 <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t *)response_ping, strlen(response_ping), HAL_MAX_DELAY);
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fbcb 	bl	8000160 <strlen>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	f107 0108 	add.w	r1, r7, #8
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	4815      	ldr	r0, [pc, #84]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x1e4>)
 80019d8:	f001 ffb8 	bl	800394c <HAL_UART_Transmit>
	    HAL_Delay(1000);
 80019dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019e0:	f000 fada 	bl	8001f98 <HAL_Delay>
		LoRa_transmit(&myLoRa, response_ping, strlen(response_ping), 1000);
 80019e4:	f107 0308 	add.w	r3, r7, #8
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fbb9 	bl	8000160 <strlen>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	f107 0108 	add.w	r1, r7, #8
 80019f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fa:	4809      	ldr	r0, [pc, #36]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80019fc:	f7fe fe11 	bl	8000622 <LoRa_transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)"\nMensaje enviado", 16, HAL_MAX_DELAY);
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
 8001a04:	2210      	movs	r2, #16
 8001a06:	490e      	ldr	r1, [pc, #56]	; (8001a40 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001a08:	4808      	ldr	r0, [pc, #32]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001a0a:	f001 ff9f 	bl	800394c <HAL_UART_Transmit>
 8001a0e:	46b5      	mov	sp, r6

	}

}
 8001a10:	bf00      	nop
 8001a12:	37cc      	adds	r7, #204	; 0xcc
 8001a14:	46bd      	mov	sp, r7
 8001a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200000c0 	.word	0x200000c0
 8001a20:	20000090 	.word	0x20000090
 8001a24:	20000140 	.word	0x20000140
 8001a28:	0800530c 	.word	0x0800530c
 8001a2c:	200001a0 	.word	0x200001a0
 8001a30:	08005318 	.word	0x08005318
 8001a34:	08005320 	.word	0x08005320
 8001a38:	08005334 	.word	0x08005334
 8001a3c:	0800533c 	.word	0x0800533c
 8001a40:	0800534c 	.word	0x0800534c

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <Error_Handler+0x8>
	...

08001a50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a54:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a56:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a84:	2210      	movs	r2, #16
 8001a86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a9c:	220a      	movs	r2, #10
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001aa2:	f001 f96f 	bl	8002d84 <HAL_SPI_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001aac:	f7ff ffca 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000144 	.word	0x20000144
 8001ab8:	40013000 	.word	0x40013000

08001abc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <HAL_SPI_MspInit+0x88>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d12f      	bne.n	8001b3c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_SPI_MspInit+0x8c>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <HAL_SPI_MspInit+0x8c>)
 8001ae2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <HAL_SPI_MspInit+0x8c>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_SPI_MspInit+0x8c>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <HAL_SPI_MspInit+0x8c>)
 8001afa:	f043 0304 	orr.w	r3, r3, #4
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_SPI_MspInit+0x8c>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b0c:	23a0      	movs	r3, #160	; 0xa0
 8001b0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480b      	ldr	r0, [pc, #44]	; (8001b4c <HAL_SPI_MspInit+0x90>)
 8001b20:	f000 fb6c 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b24:	2340      	movs	r3, #64	; 0x40
 8001b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4619      	mov	r1, r3
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <HAL_SPI_MspInit+0x90>)
 8001b38:	f000 fb60 	bl	80021fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	3720      	adds	r7, #32
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40013000 	.word	0x40013000
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40010800 	.word	0x40010800

08001b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_MspInit+0x5c>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	4a14      	ldr	r2, [pc, #80]	; (8001bac <HAL_MspInit+0x5c>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6193      	str	r3, [r2, #24]
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_MspInit+0x5c>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <HAL_MspInit+0x5c>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <HAL_MspInit+0x5c>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b78:	61d3      	str	r3, [r2, #28]
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_MspInit+0x5c>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b86:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <HAL_MspInit+0x60>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <HAL_MspInit+0x60>)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010000 	.word	0x40010000

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <NMI_Handler+0x4>

08001bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <BusFault_Handler+0x4>

08001bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <UsageFault_Handler+0x4>

08001bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfa:	f000 f9b1 	bl	8001f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001c06:	2010      	movs	r0, #16
 8001c08:	f000 fc94 	bl	8002534 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return 1;
 8001c14:	2301      	movs	r3, #1
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <_kill>:

int _kill(int pid, int sig)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c28:	f002 f814 	bl	8003c54 <__errno>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2216      	movs	r2, #22
 8001c30:	601a      	str	r2, [r3, #0]
  return -1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_exit>:

void _exit (int status)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c46:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ffe7 	bl	8001c1e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c50:	e7fe      	b.n	8001c50 <_exit+0x12>

08001c52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e00a      	b.n	8001c7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c64:	f3af 8000 	nop.w
 8001c68:	4601      	mov	r1, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	60ba      	str	r2, [r7, #8]
 8001c70:	b2ca      	uxtb	r2, r1
 8001c72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	3301      	adds	r3, #1
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	dbf0      	blt.n	8001c64 <_read+0x12>
  }

  return len;
 8001c82:	687b      	ldr	r3, [r7, #4]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	e009      	b.n	8001cb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	60ba      	str	r2, [r7, #8]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	dbf1      	blt.n	8001c9e <_write+0x12>
  }
  return len;
 8001cba:	687b      	ldr	r3, [r7, #4]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_close>:

int _close(int file)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cea:	605a      	str	r2, [r3, #4]
  return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <_isatty>:

int _isatty(int file)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d00:	2301      	movs	r3, #1
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d2c:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <_sbrk+0x5c>)
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <_sbrk+0x60>)
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <_sbrk+0x64>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <_sbrk+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d207      	bcs.n	8001d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d54:	f001 ff7e 	bl	8003c54 <__errno>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	e009      	b.n	8001d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <_sbrk+0x64>)
 8001d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20005000 	.word	0x20005000
 8001d84:	00000400 	.word	0x00000400
 8001d88:	2000019c 	.word	0x2000019c
 8001d8c:	20000200 	.word	0x20000200

08001d90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <MX_USART1_UART_Init+0x50>)
 8001da4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dd2:	4805      	ldr	r0, [pc, #20]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001dd4:	f001 fd6a 	bl	80038ac <HAL_UART_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dde:	f7ff fe31 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200001a0 	.word	0x200001a0
 8001dec:	40013800 	.word	0x40013800

08001df0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <HAL_UART_MspInit+0x8c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d131      	bne.n	8001e74 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_UART_MspInit+0x90>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a1a      	ldr	r2, [pc, #104]	; (8001e80 <HAL_UART_MspInit+0x90>)
 8001e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_UART_MspInit+0x90>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_UART_MspInit+0x90>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <HAL_UART_MspInit+0x90>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_UART_MspInit+0x90>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4619      	mov	r1, r3
 8001e54:	480b      	ldr	r0, [pc, #44]	; (8001e84 <HAL_UART_MspInit+0x94>)
 8001e56:	f000 f9d1 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <HAL_UART_MspInit+0x94>)
 8001e70:	f000 f9c4 	bl	80021fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e74:	bf00      	nop
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40013800 	.word	0x40013800
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010800 	.word	0x40010800

08001e88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e88:	f7ff ff82 	bl	8001d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e8c:	480b      	ldr	r0, [pc, #44]	; (8001ebc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e8e:	490c      	ldr	r1, [pc, #48]	; (8001ec0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e90:	4a0c      	ldr	r2, [pc, #48]	; (8001ec4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e94:	e002      	b.n	8001e9c <LoopCopyDataInit>

08001e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9a:	3304      	adds	r3, #4

08001e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea0:	d3f9      	bcc.n	8001e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ea4:	4c09      	ldr	r4, [pc, #36]	; (8001ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea8:	e001      	b.n	8001eae <LoopFillZerobss>

08001eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eac:	3204      	adds	r2, #4

08001eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb0:	d3fb      	bcc.n	8001eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eb2:	f001 fee9 	bl	8003c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eb6:	f7ff fc07 	bl	80016c8 <main>
  bx lr
 8001eba:	4770      	bx	lr
  ldr r0, =_sdata
 8001ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ec4:	080055e0 	.word	0x080055e0
  ldr r2, =_sbss
 8001ec8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ecc:	200001fc 	.word	0x200001fc

08001ed0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ed0:	e7fe      	b.n	8001ed0 <ADC1_2_IRQHandler>
	...

08001ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_Init+0x28>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a07      	ldr	r2, [pc, #28]	; (8001efc <HAL_Init+0x28>)
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f000 f947 	bl	8002178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eea:	200f      	movs	r0, #15
 8001eec:	f000 f808 	bl	8001f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef0:	f7ff fe2e 	bl	8001b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40022000 	.word	0x40022000

08001f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_InitTick+0x54>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_InitTick+0x58>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f95f 	bl	80021e2 <HAL_SYSTICK_Config>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00e      	b.n	8001f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b0f      	cmp	r3, #15
 8001f32:	d80a      	bhi.n	8001f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f34:	2200      	movs	r2, #0
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	f000 f927 	bl	800218e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f40:	4a06      	ldr	r2, [pc, #24]	; (8001f5c <HAL_InitTick+0x5c>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	20000004 	.word	0x20000004

08001f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_IncTick+0x1c>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_IncTick+0x20>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a03      	ldr	r2, [pc, #12]	; (8001f80 <HAL_IncTick+0x20>)
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	20000008 	.word	0x20000008
 8001f80:	200001e8 	.word	0x200001e8

08001f84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return uwTick;
 8001f88:	4b02      	ldr	r3, [pc, #8]	; (8001f94 <HAL_GetTick+0x10>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	200001e8 	.word	0x200001e8

08001f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa0:	f7ff fff0 	bl	8001f84 <HAL_GetTick>
 8001fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb0:	d005      	beq.n	8001fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_Delay+0x44>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4413      	add	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fbe:	bf00      	nop
 8001fc0:	f7ff ffe0 	bl	8001f84 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d8f7      	bhi.n	8001fc0 <HAL_Delay+0x28>
  {
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000008 	.word	0x20000008

08001fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800200c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002012:	4a04      	ldr	r2, [pc, #16]	; (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	60d3      	str	r3, [r2, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <__NVIC_GetPriorityGrouping+0x18>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	f003 0307 	and.w	r3, r3, #7
}
 8002036:	4618      	mov	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	2b00      	cmp	r3, #0
 8002054:	db0b      	blt.n	800206e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	f003 021f 	and.w	r2, r3, #31
 800205c:	4906      	ldr	r1, [pc, #24]	; (8002078 <__NVIC_EnableIRQ+0x34>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2001      	movs	r0, #1
 8002066:	fa00 f202 	lsl.w	r2, r0, r2
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	e000e100 	.word	0xe000e100

0800207c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0a      	blt.n	80020a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	490c      	ldr	r1, [pc, #48]	; (80020c8 <__NVIC_SetPriority+0x4c>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	0112      	lsls	r2, r2, #4
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	440b      	add	r3, r1
 80020a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a4:	e00a      	b.n	80020bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4908      	ldr	r1, [pc, #32]	; (80020cc <__NVIC_SetPriority+0x50>)
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	3b04      	subs	r3, #4
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	440b      	add	r3, r1
 80020ba:	761a      	strb	r2, [r3, #24]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f1c3 0307 	rsb	r3, r3, #7
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	bf28      	it	cs
 80020ee:	2304      	movcs	r3, #4
 80020f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d902      	bls.n	8002100 <NVIC_EncodePriority+0x30>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3b03      	subs	r3, #3
 80020fe:	e000      	b.n	8002102 <NVIC_EncodePriority+0x32>
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	f04f 32ff 	mov.w	r2, #4294967295
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	401a      	ands	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	43d9      	mvns	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	4313      	orrs	r3, r2
         );
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	; 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002144:	d301      	bcc.n	800214a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002146:	2301      	movs	r3, #1
 8002148:	e00f      	b.n	800216a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <SysTick_Config+0x40>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002152:	210f      	movs	r1, #15
 8002154:	f04f 30ff 	mov.w	r0, #4294967295
 8002158:	f7ff ff90 	bl	800207c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <SysTick_Config+0x40>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <SysTick_Config+0x40>)
 8002164:	2207      	movs	r2, #7
 8002166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	e000e010 	.word	0xe000e010

08002178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ff2d 	bl	8001fe0 <__NVIC_SetPriorityGrouping>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a0:	f7ff ff42 	bl	8002028 <__NVIC_GetPriorityGrouping>
 80021a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	6978      	ldr	r0, [r7, #20]
 80021ac:	f7ff ff90 	bl	80020d0 <NVIC_EncodePriority>
 80021b0:	4602      	mov	r2, r0
 80021b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff5f 	bl	800207c <__NVIC_SetPriority>
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff35 	bl	8002044 <__NVIC_EnableIRQ>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffa2 	bl	8002134 <SysTick_Config>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b08b      	sub	sp, #44	; 0x2c
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002206:	2300      	movs	r3, #0
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220e:	e169      	b.n	80024e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002210:	2201      	movs	r2, #1
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	429a      	cmp	r2, r3
 800222a:	f040 8158 	bne.w	80024de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4a9a      	ldr	r2, [pc, #616]	; (800249c <HAL_GPIO_Init+0x2a0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d05e      	beq.n	80022f6 <HAL_GPIO_Init+0xfa>
 8002238:	4a98      	ldr	r2, [pc, #608]	; (800249c <HAL_GPIO_Init+0x2a0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d875      	bhi.n	800232a <HAL_GPIO_Init+0x12e>
 800223e:	4a98      	ldr	r2, [pc, #608]	; (80024a0 <HAL_GPIO_Init+0x2a4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d058      	beq.n	80022f6 <HAL_GPIO_Init+0xfa>
 8002244:	4a96      	ldr	r2, [pc, #600]	; (80024a0 <HAL_GPIO_Init+0x2a4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d86f      	bhi.n	800232a <HAL_GPIO_Init+0x12e>
 800224a:	4a96      	ldr	r2, [pc, #600]	; (80024a4 <HAL_GPIO_Init+0x2a8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d052      	beq.n	80022f6 <HAL_GPIO_Init+0xfa>
 8002250:	4a94      	ldr	r2, [pc, #592]	; (80024a4 <HAL_GPIO_Init+0x2a8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d869      	bhi.n	800232a <HAL_GPIO_Init+0x12e>
 8002256:	4a94      	ldr	r2, [pc, #592]	; (80024a8 <HAL_GPIO_Init+0x2ac>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d04c      	beq.n	80022f6 <HAL_GPIO_Init+0xfa>
 800225c:	4a92      	ldr	r2, [pc, #584]	; (80024a8 <HAL_GPIO_Init+0x2ac>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d863      	bhi.n	800232a <HAL_GPIO_Init+0x12e>
 8002262:	4a92      	ldr	r2, [pc, #584]	; (80024ac <HAL_GPIO_Init+0x2b0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d046      	beq.n	80022f6 <HAL_GPIO_Init+0xfa>
 8002268:	4a90      	ldr	r2, [pc, #576]	; (80024ac <HAL_GPIO_Init+0x2b0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d85d      	bhi.n	800232a <HAL_GPIO_Init+0x12e>
 800226e:	2b12      	cmp	r3, #18
 8002270:	d82a      	bhi.n	80022c8 <HAL_GPIO_Init+0xcc>
 8002272:	2b12      	cmp	r3, #18
 8002274:	d859      	bhi.n	800232a <HAL_GPIO_Init+0x12e>
 8002276:	a201      	add	r2, pc, #4	; (adr r2, 800227c <HAL_GPIO_Init+0x80>)
 8002278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227c:	080022f7 	.word	0x080022f7
 8002280:	080022d1 	.word	0x080022d1
 8002284:	080022e3 	.word	0x080022e3
 8002288:	08002325 	.word	0x08002325
 800228c:	0800232b 	.word	0x0800232b
 8002290:	0800232b 	.word	0x0800232b
 8002294:	0800232b 	.word	0x0800232b
 8002298:	0800232b 	.word	0x0800232b
 800229c:	0800232b 	.word	0x0800232b
 80022a0:	0800232b 	.word	0x0800232b
 80022a4:	0800232b 	.word	0x0800232b
 80022a8:	0800232b 	.word	0x0800232b
 80022ac:	0800232b 	.word	0x0800232b
 80022b0:	0800232b 	.word	0x0800232b
 80022b4:	0800232b 	.word	0x0800232b
 80022b8:	0800232b 	.word	0x0800232b
 80022bc:	0800232b 	.word	0x0800232b
 80022c0:	080022d9 	.word	0x080022d9
 80022c4:	080022ed 	.word	0x080022ed
 80022c8:	4a79      	ldr	r2, [pc, #484]	; (80024b0 <HAL_GPIO_Init+0x2b4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022ce:	e02c      	b.n	800232a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	623b      	str	r3, [r7, #32]
          break;
 80022d6:	e029      	b.n	800232c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	3304      	adds	r3, #4
 80022de:	623b      	str	r3, [r7, #32]
          break;
 80022e0:	e024      	b.n	800232c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	3308      	adds	r3, #8
 80022e8:	623b      	str	r3, [r7, #32]
          break;
 80022ea:	e01f      	b.n	800232c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	330c      	adds	r3, #12
 80022f2:	623b      	str	r3, [r7, #32]
          break;
 80022f4:	e01a      	b.n	800232c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022fe:	2304      	movs	r3, #4
 8002300:	623b      	str	r3, [r7, #32]
          break;
 8002302:	e013      	b.n	800232c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d105      	bne.n	8002318 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800230c:	2308      	movs	r3, #8
 800230e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	611a      	str	r2, [r3, #16]
          break;
 8002316:	e009      	b.n	800232c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002318:	2308      	movs	r3, #8
 800231a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	615a      	str	r2, [r3, #20]
          break;
 8002322:	e003      	b.n	800232c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002324:	2300      	movs	r3, #0
 8002326:	623b      	str	r3, [r7, #32]
          break;
 8002328:	e000      	b.n	800232c <HAL_GPIO_Init+0x130>
          break;
 800232a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2bff      	cmp	r3, #255	; 0xff
 8002330:	d801      	bhi.n	8002336 <HAL_GPIO_Init+0x13a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	e001      	b.n	800233a <HAL_GPIO_Init+0x13e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3304      	adds	r3, #4
 800233a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2bff      	cmp	r3, #255	; 0xff
 8002340:	d802      	bhi.n	8002348 <HAL_GPIO_Init+0x14c>
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	e002      	b.n	800234e <HAL_GPIO_Init+0x152>
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	3b08      	subs	r3, #8
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	210f      	movs	r1, #15
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	401a      	ands	r2, r3
 8002360:	6a39      	ldr	r1, [r7, #32]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	431a      	orrs	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 80b1 	beq.w	80024de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800237c:	4b4d      	ldr	r3, [pc, #308]	; (80024b4 <HAL_GPIO_Init+0x2b8>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4a4c      	ldr	r2, [pc, #304]	; (80024b4 <HAL_GPIO_Init+0x2b8>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6193      	str	r3, [r2, #24]
 8002388:	4b4a      	ldr	r3, [pc, #296]	; (80024b4 <HAL_GPIO_Init+0x2b8>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002394:	4a48      	ldr	r2, [pc, #288]	; (80024b8 <HAL_GPIO_Init+0x2bc>)
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	3302      	adds	r3, #2
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	220f      	movs	r2, #15
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4013      	ands	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a40      	ldr	r2, [pc, #256]	; (80024bc <HAL_GPIO_Init+0x2c0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d013      	beq.n	80023e8 <HAL_GPIO_Init+0x1ec>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a3f      	ldr	r2, [pc, #252]	; (80024c0 <HAL_GPIO_Init+0x2c4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00d      	beq.n	80023e4 <HAL_GPIO_Init+0x1e8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a3e      	ldr	r2, [pc, #248]	; (80024c4 <HAL_GPIO_Init+0x2c8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d007      	beq.n	80023e0 <HAL_GPIO_Init+0x1e4>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a3d      	ldr	r2, [pc, #244]	; (80024c8 <HAL_GPIO_Init+0x2cc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_GPIO_Init+0x1e0>
 80023d8:	2303      	movs	r3, #3
 80023da:	e006      	b.n	80023ea <HAL_GPIO_Init+0x1ee>
 80023dc:	2304      	movs	r3, #4
 80023de:	e004      	b.n	80023ea <HAL_GPIO_Init+0x1ee>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e002      	b.n	80023ea <HAL_GPIO_Init+0x1ee>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_GPIO_Init+0x1ee>
 80023e8:	2300      	movs	r3, #0
 80023ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ec:	f002 0203 	and.w	r2, r2, #3
 80023f0:	0092      	lsls	r2, r2, #2
 80023f2:	4093      	lsls	r3, r2
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023fa:	492f      	ldr	r1, [pc, #188]	; (80024b8 <HAL_GPIO_Init+0x2bc>)
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002414:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <HAL_GPIO_Init+0x2d0>)
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	492c      	ldr	r1, [pc, #176]	; (80024cc <HAL_GPIO_Init+0x2d0>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	608b      	str	r3, [r1, #8]
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002422:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <HAL_GPIO_Init+0x2d0>)
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	43db      	mvns	r3, r3
 800242a:	4928      	ldr	r1, [pc, #160]	; (80024cc <HAL_GPIO_Init+0x2d0>)
 800242c:	4013      	ands	r3, r2
 800242e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800243c:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_GPIO_Init+0x2d0>)
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	4922      	ldr	r1, [pc, #136]	; (80024cc <HAL_GPIO_Init+0x2d0>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	60cb      	str	r3, [r1, #12]
 8002448:	e006      	b.n	8002458 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <HAL_GPIO_Init+0x2d0>)
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	43db      	mvns	r3, r3
 8002452:	491e      	ldr	r1, [pc, #120]	; (80024cc <HAL_GPIO_Init+0x2d0>)
 8002454:	4013      	ands	r3, r2
 8002456:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d006      	beq.n	8002472 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002464:	4b19      	ldr	r3, [pc, #100]	; (80024cc <HAL_GPIO_Init+0x2d0>)
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4918      	ldr	r1, [pc, #96]	; (80024cc <HAL_GPIO_Init+0x2d0>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
 8002470:	e006      	b.n	8002480 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002472:	4b16      	ldr	r3, [pc, #88]	; (80024cc <HAL_GPIO_Init+0x2d0>)
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	43db      	mvns	r3, r3
 800247a:	4914      	ldr	r1, [pc, #80]	; (80024cc <HAL_GPIO_Init+0x2d0>)
 800247c:	4013      	ands	r3, r2
 800247e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d021      	beq.n	80024d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <HAL_GPIO_Init+0x2d0>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	490e      	ldr	r1, [pc, #56]	; (80024cc <HAL_GPIO_Init+0x2d0>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e021      	b.n	80024de <HAL_GPIO_Init+0x2e2>
 800249a:	bf00      	nop
 800249c:	10320000 	.word	0x10320000
 80024a0:	10310000 	.word	0x10310000
 80024a4:	10220000 	.word	0x10220000
 80024a8:	10210000 	.word	0x10210000
 80024ac:	10120000 	.word	0x10120000
 80024b0:	10110000 	.word	0x10110000
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010000 	.word	0x40010000
 80024bc:	40010800 	.word	0x40010800
 80024c0:	40010c00 	.word	0x40010c00
 80024c4:	40011000 	.word	0x40011000
 80024c8:	40011400 	.word	0x40011400
 80024cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_GPIO_Init+0x304>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	4909      	ldr	r1, [pc, #36]	; (8002500 <HAL_GPIO_Init+0x304>)
 80024da:	4013      	ands	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	3301      	adds	r3, #1
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	fa22 f303 	lsr.w	r3, r2, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f47f ae8e 	bne.w	8002210 <HAL_GPIO_Init+0x14>
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	372c      	adds	r7, #44	; 0x2c
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	40010400 	.word	0x40010400

08002504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
 8002510:	4613      	mov	r3, r2
 8002512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002514:	787b      	ldrb	r3, [r7, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002520:	e003      	b.n	800252a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	041a      	lsls	r2, r3, #16
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	611a      	str	r2, [r3, #16]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff f978 	bl	8001848 <HAL_GPIO_EXTI_Callback>
  }
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40010400 	.word	0x40010400

08002564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e272      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8087 	beq.w	8002692 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002584:	4b92      	ldr	r3, [pc, #584]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b04      	cmp	r3, #4
 800258e:	d00c      	beq.n	80025aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002590:	4b8f      	ldr	r3, [pc, #572]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 030c 	and.w	r3, r3, #12
 8002598:	2b08      	cmp	r3, #8
 800259a:	d112      	bne.n	80025c2 <HAL_RCC_OscConfig+0x5e>
 800259c:	4b8c      	ldr	r3, [pc, #560]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a8:	d10b      	bne.n	80025c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025aa:	4b89      	ldr	r3, [pc, #548]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d06c      	beq.n	8002690 <HAL_RCC_OscConfig+0x12c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d168      	bne.n	8002690 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e24c      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ca:	d106      	bne.n	80025da <HAL_RCC_OscConfig+0x76>
 80025cc:	4b80      	ldr	r3, [pc, #512]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a7f      	ldr	r2, [pc, #508]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	e02e      	b.n	8002638 <HAL_RCC_OscConfig+0xd4>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10c      	bne.n	80025fc <HAL_RCC_OscConfig+0x98>
 80025e2:	4b7b      	ldr	r3, [pc, #492]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a7a      	ldr	r2, [pc, #488]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b78      	ldr	r3, [pc, #480]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a77      	ldr	r2, [pc, #476]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e01d      	b.n	8002638 <HAL_RCC_OscConfig+0xd4>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0xbc>
 8002606:	4b72      	ldr	r3, [pc, #456]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a71      	ldr	r2, [pc, #452]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 800260c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	4b6f      	ldr	r3, [pc, #444]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a6e      	ldr	r2, [pc, #440]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e00b      	b.n	8002638 <HAL_RCC_OscConfig+0xd4>
 8002620:	4b6b      	ldr	r3, [pc, #428]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a6a      	ldr	r2, [pc, #424]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 8002626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b68      	ldr	r3, [pc, #416]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a67      	ldr	r2, [pc, #412]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002636:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7ff fca0 	bl	8001f84 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002648:	f7ff fc9c 	bl	8001f84 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	; 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e200      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b5d      	ldr	r3, [pc, #372]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0xe4>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff fc8c 	bl	8001f84 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff fc88 	bl	8001f84 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e1ec      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	4b53      	ldr	r3, [pc, #332]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x10c>
 800268e:	e000      	b.n	8002692 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d063      	beq.n	8002766 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800269e:	4b4c      	ldr	r3, [pc, #304]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026aa:	4b49      	ldr	r3, [pc, #292]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d11c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x18c>
 80026b6:	4b46      	ldr	r3, [pc, #280]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d116      	bne.n	80026f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c2:	4b43      	ldr	r3, [pc, #268]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_RCC_OscConfig+0x176>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d001      	beq.n	80026da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e1c0      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026da:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4939      	ldr	r1, [pc, #228]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ee:	e03a      	b.n	8002766 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f8:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fe:	f7ff fc41 	bl	8001f84 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002706:	f7ff fc3d 	bl	8001f84 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e1a1      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002724:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4927      	ldr	r1, [pc, #156]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]
 8002738:	e015      	b.n	8002766 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800273a:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7ff fc20 	bl	8001f84 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002748:	f7ff fc1c 	bl	8001f84 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e180      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d03a      	beq.n	80027e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d019      	beq.n	80027ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277a:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <HAL_RCC_OscConfig+0x274>)
 800277c:	2201      	movs	r2, #1
 800277e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002780:	f7ff fc00 	bl	8001f84 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002788:	f7ff fbfc 	bl	8001f84 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e160      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_RCC_OscConfig+0x26c>)
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027a6:	2001      	movs	r0, #1
 80027a8:	f000 face 	bl	8002d48 <RCC_Delay>
 80027ac:	e01c      	b.n	80027e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <HAL_RCC_OscConfig+0x274>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b4:	f7ff fbe6 	bl	8001f84 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ba:	e00f      	b.n	80027dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027bc:	f7ff fbe2 	bl	8001f84 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d908      	bls.n	80027dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e146      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	42420000 	.word	0x42420000
 80027d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	4b92      	ldr	r3, [pc, #584]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1e9      	bne.n	80027bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80a6 	beq.w	8002942 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fa:	4b8b      	ldr	r3, [pc, #556]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10d      	bne.n	8002822 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	4b88      	ldr	r3, [pc, #544]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	4a87      	ldr	r2, [pc, #540]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002810:	61d3      	str	r3, [r2, #28]
 8002812:	4b85      	ldr	r3, [pc, #532]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281e:	2301      	movs	r3, #1
 8002820:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002822:	4b82      	ldr	r3, [pc, #520]	; (8002a2c <HAL_RCC_OscConfig+0x4c8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d118      	bne.n	8002860 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800282e:	4b7f      	ldr	r3, [pc, #508]	; (8002a2c <HAL_RCC_OscConfig+0x4c8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a7e      	ldr	r2, [pc, #504]	; (8002a2c <HAL_RCC_OscConfig+0x4c8>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283a:	f7ff fba3 	bl	8001f84 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002842:	f7ff fb9f 	bl	8001f84 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b64      	cmp	r3, #100	; 0x64
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e103      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	4b75      	ldr	r3, [pc, #468]	; (8002a2c <HAL_RCC_OscConfig+0x4c8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x312>
 8002868:	4b6f      	ldr	r3, [pc, #444]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4a6e      	ldr	r2, [pc, #440]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6213      	str	r3, [r2, #32]
 8002874:	e02d      	b.n	80028d2 <HAL_RCC_OscConfig+0x36e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x334>
 800287e:	4b6a      	ldr	r3, [pc, #424]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4a69      	ldr	r2, [pc, #420]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	6213      	str	r3, [r2, #32]
 800288a:	4b67      	ldr	r3, [pc, #412]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	4a66      	ldr	r2, [pc, #408]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 8002890:	f023 0304 	bic.w	r3, r3, #4
 8002894:	6213      	str	r3, [r2, #32]
 8002896:	e01c      	b.n	80028d2 <HAL_RCC_OscConfig+0x36e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b05      	cmp	r3, #5
 800289e:	d10c      	bne.n	80028ba <HAL_RCC_OscConfig+0x356>
 80028a0:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4a60      	ldr	r2, [pc, #384]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	f043 0304 	orr.w	r3, r3, #4
 80028aa:	6213      	str	r3, [r2, #32]
 80028ac:	4b5e      	ldr	r3, [pc, #376]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4a5d      	ldr	r2, [pc, #372]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6213      	str	r3, [r2, #32]
 80028b8:	e00b      	b.n	80028d2 <HAL_RCC_OscConfig+0x36e>
 80028ba:	4b5b      	ldr	r3, [pc, #364]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4a5a      	ldr	r2, [pc, #360]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f023 0301 	bic.w	r3, r3, #1
 80028c4:	6213      	str	r3, [r2, #32]
 80028c6:	4b58      	ldr	r3, [pc, #352]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4a57      	ldr	r2, [pc, #348]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	f023 0304 	bic.w	r3, r3, #4
 80028d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d015      	beq.n	8002906 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028da:	f7ff fb53 	bl	8001f84 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e0:	e00a      	b.n	80028f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7ff fb4f 	bl	8001f84 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e0b1      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f8:	4b4b      	ldr	r3, [pc, #300]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0ee      	beq.n	80028e2 <HAL_RCC_OscConfig+0x37e>
 8002904:	e014      	b.n	8002930 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002906:	f7ff fb3d 	bl	8001f84 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290c:	e00a      	b.n	8002924 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290e:	f7ff fb39 	bl	8001f84 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	; 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e09b      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002924:	4b40      	ldr	r3, [pc, #256]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1ee      	bne.n	800290e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d105      	bne.n	8002942 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002936:	4b3c      	ldr	r3, [pc, #240]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	4a3b      	ldr	r2, [pc, #236]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 800293c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002940:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8087 	beq.w	8002a5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800294c:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b08      	cmp	r3, #8
 8002956:	d061      	beq.n	8002a1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d146      	bne.n	80029ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002960:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <HAL_RCC_OscConfig+0x4cc>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7ff fb0d 	bl	8001f84 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296e:	f7ff fb09 	bl	8001f84 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e06d      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002980:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f0      	bne.n	800296e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002994:	d108      	bne.n	80029a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002996:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	4921      	ldr	r1, [pc, #132]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a8:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a19      	ldr	r1, [r3, #32]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	430b      	orrs	r3, r1
 80029ba:	491b      	ldr	r1, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_RCC_OscConfig+0x4cc>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c6:	f7ff fadd 	bl	8001f84 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ce:	f7ff fad9 	bl	8001f84 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e03d      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x46a>
 80029ec:	e035      	b.n	8002a5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <HAL_RCC_OscConfig+0x4cc>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7ff fac6 	bl	8001f84 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fc:	f7ff fac2 	bl	8001f84 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e026      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x498>
 8002a1a:	e01e      	b.n	8002a5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e019      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_RCC_OscConfig+0x500>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40021000 	.word	0x40021000

08002a68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0d0      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b6a      	ldr	r3, [pc, #424]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d910      	bls.n	8002aac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b67      	ldr	r3, [pc, #412]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 0207 	bic.w	r2, r3, #7
 8002a92:	4965      	ldr	r1, [pc, #404]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b63      	ldr	r3, [pc, #396]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0b8      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac4:	4b59      	ldr	r3, [pc, #356]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a58      	ldr	r2, [pc, #352]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ace:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002adc:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4a52      	ldr	r2, [pc, #328]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ae6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae8:	4b50      	ldr	r3, [pc, #320]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	494d      	ldr	r1, [pc, #308]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d040      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d115      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e07f      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b26:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e073      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b36:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e06b      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b46:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f023 0203 	bic.w	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4936      	ldr	r1, [pc, #216]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b58:	f7ff fa14 	bl	8001f84 <HAL_GetTick>
 8002b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b60:	f7ff fa10 	bl	8001f84 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e053      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	4b2d      	ldr	r3, [pc, #180]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 020c 	and.w	r2, r3, #12
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d1eb      	bne.n	8002b60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b88:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d210      	bcs.n	8002bb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 0207 	bic.w	r2, r3, #7
 8002b9e:	4922      	ldr	r1, [pc, #136]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e032      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4916      	ldr	r1, [pc, #88]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	490e      	ldr	r1, [pc, #56]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bf6:	f000 f821 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	490a      	ldr	r1, [pc, #40]	; (8002c30 <HAL_RCC_ClockConfig+0x1c8>)
 8002c08:	5ccb      	ldrb	r3, [r1, r3]
 8002c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0e:	4a09      	ldr	r2, [pc, #36]	; (8002c34 <HAL_RCC_ClockConfig+0x1cc>)
 8002c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <HAL_RCC_ClockConfig+0x1d0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff f972 	bl	8001f00 <HAL_InitTick>

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40022000 	.word	0x40022000
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	08005360 	.word	0x08005360
 8002c34:	20000000 	.word	0x20000000
 8002c38:	20000004 	.word	0x20000004

08002c3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c56:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d002      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x30>
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_GetSysClockFreq+0x36>
 8002c6a:	e027      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c6c:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c6e:	613b      	str	r3, [r7, #16]
      break;
 8002c70:	e027      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	0c9b      	lsrs	r3, r3, #18
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	4a17      	ldr	r2, [pc, #92]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c7c:	5cd3      	ldrb	r3, [r2, r3]
 8002c7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d010      	beq.n	8002cac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	0c5b      	lsrs	r3, r3, #17
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c96:	5cd3      	ldrb	r3, [r2, r3]
 8002c98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	e004      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a0c      	ldr	r2, [pc, #48]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cb0:	fb02 f303 	mul.w	r3, r2, r3
 8002cb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	613b      	str	r3, [r7, #16]
      break;
 8002cba:	e002      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cbe:	613b      	str	r3, [r7, #16]
      break;
 8002cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc2:	693b      	ldr	r3, [r7, #16]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	371c      	adds	r7, #28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	007a1200 	.word	0x007a1200
 8002cd8:	08005378 	.word	0x08005378
 8002cdc:	08005388 	.word	0x08005388
 8002ce0:	003d0900 	.word	0x003d0900

08002ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce8:	4b02      	ldr	r3, [pc, #8]	; (8002cf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	20000000 	.word	0x20000000

08002cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cfc:	f7ff fff2 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	0a1b      	lsrs	r3, r3, #8
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4903      	ldr	r1, [pc, #12]	; (8002d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	08005370 	.word	0x08005370

08002d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d24:	f7ff ffde 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	0adb      	lsrs	r3, r3, #11
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000
 8002d44:	08005370 	.word	0x08005370

08002d48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <RCC_Delay+0x34>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <RCC_Delay+0x38>)
 8002d56:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5a:	0a5b      	lsrs	r3, r3, #9
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	fb02 f303 	mul.w	r3, r2, r3
 8002d62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d64:	bf00      	nop
  }
  while (Delay --);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1e5a      	subs	r2, r3, #1
 8002d6a:	60fa      	str	r2, [r7, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f9      	bne.n	8002d64 <RCC_Delay+0x1c>
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	10624dd3 	.word	0x10624dd3

08002d84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e076      	b.n	8002e84 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d108      	bne.n	8002db0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002da6:	d009      	beq.n	8002dbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	61da      	str	r2, [r3, #28]
 8002dae:	e005      	b.n	8002dbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fe fe70 	bl	8001abc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	ea42 0103 	orr.w	r1, r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	0c1a      	lsrs	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f002 0204 	and.w	r2, r2, #4
 8002e62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69da      	ldr	r2, [r3, #28]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_SPI_Transmit+0x22>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e12d      	b.n	800310a <HAL_SPI_Transmit+0x27e>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eb6:	f7ff f865 	bl	8001f84 <HAL_GetTick>
 8002eba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d002      	beq.n	8002ed2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ed0:	e116      	b.n	8003100 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_SPI_Transmit+0x52>
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ee2:	e10d      	b.n	8003100 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	88fa      	ldrh	r2, [r7, #6]
 8002efc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	88fa      	ldrh	r2, [r7, #6]
 8002f02:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f2a:	d10f      	bne.n	8002f4c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f56:	2b40      	cmp	r3, #64	; 0x40
 8002f58:	d007      	beq.n	8002f6a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f72:	d14f      	bne.n	8003014 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_SPI_Transmit+0xf6>
 8002f7c:	8afb      	ldrh	r3, [r7, #22]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d142      	bne.n	8003008 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	881a      	ldrh	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	1c9a      	adds	r2, r3, #2
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fa6:	e02f      	b.n	8003008 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d112      	bne.n	8002fdc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	881a      	ldrh	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	1c9a      	adds	r2, r3, #2
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fda:	e015      	b.n	8003008 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fdc:	f7fe ffd2 	bl	8001f84 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d803      	bhi.n	8002ff4 <HAL_SPI_Transmit+0x168>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d102      	bne.n	8002ffa <HAL_SPI_Transmit+0x16e>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003006:	e07b      	b.n	8003100 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1ca      	bne.n	8002fa8 <HAL_SPI_Transmit+0x11c>
 8003012:	e050      	b.n	80030b6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_SPI_Transmit+0x196>
 800301c:	8afb      	ldrh	r3, [r7, #22]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d144      	bne.n	80030ac <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	330c      	adds	r3, #12
 800302c:	7812      	ldrb	r2, [r2, #0]
 800302e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003048:	e030      	b.n	80030ac <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b02      	cmp	r3, #2
 8003056:	d113      	bne.n	8003080 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	330c      	adds	r3, #12
 8003062:	7812      	ldrb	r2, [r2, #0]
 8003064:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	86da      	strh	r2, [r3, #54]	; 0x36
 800307e:	e015      	b.n	80030ac <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003080:	f7fe ff80 	bl	8001f84 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d803      	bhi.n	8003098 <HAL_SPI_Transmit+0x20c>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003096:	d102      	bne.n	800309e <HAL_SPI_Transmit+0x212>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80030aa:	e029      	b.n	8003100 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1c9      	bne.n	800304a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	6839      	ldr	r1, [r7, #0]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fbd8 	bl	8003870 <SPI_EndRxTxTransaction>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030d4:	2300      	movs	r3, #0
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	e003      	b.n	8003100 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003108:	7ffb      	ldrb	r3, [r7, #31]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b088      	sub	sp, #32
 8003116:	af02      	add	r7, sp, #8
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	4613      	mov	r3, r2
 8003120:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d002      	beq.n	8003138 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003132:	2302      	movs	r3, #2
 8003134:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003136:	e0fb      	b.n	8003330 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003140:	d112      	bne.n	8003168 <HAL_SPI_Receive+0x56>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10e      	bne.n	8003168 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2204      	movs	r2, #4
 800314e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f8ef 	bl	8003342 <HAL_SPI_TransmitReceive>
 8003164:	4603      	mov	r3, r0
 8003166:	e0e8      	b.n	800333a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_SPI_Receive+0x64>
 8003172:	2302      	movs	r3, #2
 8003174:	e0e1      	b.n	800333a <HAL_SPI_Receive+0x228>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800317e:	f7fe ff01 	bl	8001f84 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_SPI_Receive+0x7e>
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003194:	e0cc      	b.n	8003330 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2204      	movs	r2, #4
 800319a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	88fa      	ldrh	r2, [r7, #6]
 80031ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	88fa      	ldrh	r2, [r7, #6]
 80031b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031dc:	d10f      	bne.n	80031fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003208:	2b40      	cmp	r3, #64	; 0x40
 800320a:	d007      	beq.n	800321c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800321a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d16a      	bne.n	80032fa <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003224:	e032      	b.n	800328c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b01      	cmp	r3, #1
 8003232:	d115      	bne.n	8003260 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f103 020c 	add.w	r2, r3, #12
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	7812      	ldrb	r2, [r2, #0]
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800325e:	e015      	b.n	800328c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003260:	f7fe fe90 	bl	8001f84 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d803      	bhi.n	8003278 <HAL_SPI_Receive+0x166>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d102      	bne.n	800327e <HAL_SPI_Receive+0x16c>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800328a:	e051      	b.n	8003330 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1c7      	bne.n	8003226 <HAL_SPI_Receive+0x114>
 8003296:	e035      	b.n	8003304 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d113      	bne.n	80032ce <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b0:	b292      	uxth	r2, r2
 80032b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	1c9a      	adds	r2, r3, #2
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032cc:	e015      	b.n	80032fa <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ce:	f7fe fe59 	bl	8001f84 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d803      	bhi.n	80032e6 <HAL_SPI_Receive+0x1d4>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d102      	bne.n	80032ec <HAL_SPI_Receive+0x1da>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d106      	bne.n	80032fa <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80032f8:	e01a      	b.n	8003330 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1c9      	bne.n	8003298 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	6839      	ldr	r1, [r7, #0]
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 fa5f 	bl	80037cc <SPI_EndRxTransaction>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	75fb      	strb	r3, [r7, #23]
 8003326:	e003      	b.n	8003330 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003338:	7dfb      	ldrb	r3, [r7, #23]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b08c      	sub	sp, #48	; 0x30
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003350:	2301      	movs	r3, #1
 8003352:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_SPI_TransmitReceive+0x26>
 8003364:	2302      	movs	r3, #2
 8003366:	e198      	b.n	800369a <HAL_SPI_TransmitReceive+0x358>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003370:	f7fe fe08 	bl	8001f84 <HAL_GetTick>
 8003374:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800337c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003386:	887b      	ldrh	r3, [r7, #2]
 8003388:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800338a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800338e:	2b01      	cmp	r3, #1
 8003390:	d00f      	beq.n	80033b2 <HAL_SPI_TransmitReceive+0x70>
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003398:	d107      	bne.n	80033aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <HAL_SPI_TransmitReceive+0x68>
 80033a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d003      	beq.n	80033b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80033aa:	2302      	movs	r3, #2
 80033ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033b0:	e16d      	b.n	800368e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_SPI_TransmitReceive+0x82>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_SPI_TransmitReceive+0x82>
 80033be:	887b      	ldrh	r3, [r7, #2]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d103      	bne.n	80033cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033ca:	e160      	b.n	800368e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d003      	beq.n	80033e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2205      	movs	r2, #5
 80033dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	887a      	ldrh	r2, [r7, #2]
 80033f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	887a      	ldrh	r2, [r7, #2]
 8003402:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	2b40      	cmp	r3, #64	; 0x40
 8003422:	d007      	beq.n	8003434 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003432:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343c:	d17c      	bne.n	8003538 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_SPI_TransmitReceive+0x10a>
 8003446:	8b7b      	ldrh	r3, [r7, #26]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d16a      	bne.n	8003522 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	881a      	ldrh	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	1c9a      	adds	r2, r3, #2
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003470:	e057      	b.n	8003522 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b02      	cmp	r3, #2
 800347e:	d11b      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x176>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d016      	beq.n	80034b8 <HAL_SPI_TransmitReceive+0x176>
 800348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d113      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	881a      	ldrh	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	1c9a      	adds	r2, r3, #2
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d119      	bne.n	80034fa <HAL_SPI_TransmitReceive+0x1b8>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d014      	beq.n	80034fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	b292      	uxth	r2, r2
 80034dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	1c9a      	adds	r2, r3, #2
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034f6:	2301      	movs	r3, #1
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034fa:	f7fe fd43 	bl	8001f84 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003506:	429a      	cmp	r2, r3
 8003508:	d80b      	bhi.n	8003522 <HAL_SPI_TransmitReceive+0x1e0>
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d007      	beq.n	8003522 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003520:	e0b5      	b.n	800368e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1a2      	bne.n	8003472 <HAL_SPI_TransmitReceive+0x130>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d19d      	bne.n	8003472 <HAL_SPI_TransmitReceive+0x130>
 8003536:	e080      	b.n	800363a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <HAL_SPI_TransmitReceive+0x204>
 8003540:	8b7b      	ldrh	r3, [r7, #26]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d16f      	bne.n	8003626 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	330c      	adds	r3, #12
 8003550:	7812      	ldrb	r2, [r2, #0]
 8003552:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800356c:	e05b      	b.n	8003626 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b02      	cmp	r3, #2
 800357a:	d11c      	bne.n	80035b6 <HAL_SPI_TransmitReceive+0x274>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d017      	beq.n	80035b6 <HAL_SPI_TransmitReceive+0x274>
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d114      	bne.n	80035b6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	330c      	adds	r3, #12
 8003596:	7812      	ldrb	r2, [r2, #0]
 8003598:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d119      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x2b6>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d014      	beq.n	80035f8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035f4:	2301      	movs	r3, #1
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035f8:	f7fe fcc4 	bl	8001f84 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003604:	429a      	cmp	r2, r3
 8003606:	d803      	bhi.n	8003610 <HAL_SPI_TransmitReceive+0x2ce>
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360e:	d102      	bne.n	8003616 <HAL_SPI_TransmitReceive+0x2d4>
 8003610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003612:	2b00      	cmp	r3, #0
 8003614:	d107      	bne.n	8003626 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003624:	e033      	b.n	800368e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d19e      	bne.n	800356e <HAL_SPI_TransmitReceive+0x22c>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d199      	bne.n	800356e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800363a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f916 	bl	8003870 <SPI_EndRxTxTransaction>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d006      	beq.n	8003658 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003656:	e01a      	b.n	800368e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003684:	e003      	b.n	800368e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003696:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800369a:	4618      	mov	r0, r3
 800369c:	3730      	adds	r7, #48	; 0x30
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036b0:	b2db      	uxtb	r3, r3
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036cc:	f7fe fc5a 	bl	8001f84 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	4413      	add	r3, r2
 80036da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036dc:	f7fe fc52 	bl	8001f84 <HAL_GetTick>
 80036e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036e2:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	015b      	lsls	r3, r3, #5
 80036e8:	0d1b      	lsrs	r3, r3, #20
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036f2:	e054      	b.n	800379e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fa:	d050      	beq.n	800379e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036fc:	f7fe fc42 	bl	8001f84 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	429a      	cmp	r2, r3
 800370a:	d902      	bls.n	8003712 <SPI_WaitFlagStateUntilTimeout+0x56>
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d13d      	bne.n	800378e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003720:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372a:	d111      	bne.n	8003750 <SPI_WaitFlagStateUntilTimeout+0x94>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003734:	d004      	beq.n	8003740 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373e:	d107      	bne.n	8003750 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003758:	d10f      	bne.n	800377a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003778:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e017      	b.n	80037be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	3b01      	subs	r3, #1
 800379c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4013      	ands	r3, r2
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	bf0c      	ite	eq
 80037ae:	2301      	moveq	r3, #1
 80037b0:	2300      	movne	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d19b      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000000 	.word	0x20000000

080037cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037e0:	d111      	bne.n	8003806 <SPI_EndRxTransaction+0x3a>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ea:	d004      	beq.n	80037f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f4:	d107      	bne.n	8003806 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003804:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800380e:	d117      	bne.n	8003840 <SPI_EndRxTransaction+0x74>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003818:	d112      	bne.n	8003840 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2200      	movs	r2, #0
 8003822:	2101      	movs	r1, #1
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f7ff ff49 	bl	80036bc <SPI_WaitFlagStateUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01a      	beq.n	8003866 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e013      	b.n	8003868 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2200      	movs	r2, #0
 8003848:	2180      	movs	r1, #128	; 0x80
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f7ff ff36 	bl	80036bc <SPI_WaitFlagStateUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d007      	beq.n	8003866 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	f043 0220 	orr.w	r2, r3, #32
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e000      	b.n	8003868 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2200      	movs	r2, #0
 8003884:	2180      	movs	r1, #128	; 0x80
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f7ff ff18 	bl	80036bc <SPI_WaitFlagStateUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	f043 0220 	orr.w	r2, r3, #32
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e000      	b.n	80038a4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e042      	b.n	8003944 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fe fa8c 	bl	8001df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2224      	movs	r2, #36	; 0x24
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f91d 	bl	8003b30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003904:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003914:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003924:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b20      	cmp	r3, #32
 800396a:	d16d      	bne.n	8003a48 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_UART_Transmit+0x2c>
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e066      	b.n	8003a4a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2221      	movs	r2, #33	; 0x21
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800398a:	f7fe fafb 	bl	8001f84 <HAL_GetTick>
 800398e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	88fa      	ldrh	r2, [r7, #6]
 800399a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a4:	d108      	bne.n	80039b8 <HAL_UART_Transmit+0x6c>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d104      	bne.n	80039b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	e003      	b.n	80039c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039c0:	e02a      	b.n	8003a18 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2200      	movs	r2, #0
 80039ca:	2180      	movs	r1, #128	; 0x80
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f840 	bl	8003a52 <UART_WaitOnFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e036      	b.n	8003a4a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10b      	bne.n	80039fa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	3302      	adds	r3, #2
 80039f6:	61bb      	str	r3, [r7, #24]
 80039f8:	e007      	b.n	8003a0a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	3301      	adds	r3, #1
 8003a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1cf      	bne.n	80039c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2140      	movs	r1, #64	; 0x40
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f810 	bl	8003a52 <UART_WaitOnFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e006      	b.n	8003a4a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	e000      	b.n	8003a4a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a48:	2302      	movs	r3, #2
  }
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3720      	adds	r7, #32
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b090      	sub	sp, #64	; 0x40
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	603b      	str	r3, [r7, #0]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a62:	e050      	b.n	8003b06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6a:	d04c      	beq.n	8003b06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a72:	f7fe fa87 	bl	8001f84 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d241      	bcs.n	8003b06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	330c      	adds	r3, #12
 8003a88:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aa2:	637a      	str	r2, [r7, #52]	; 0x34
 8003aa4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e5      	bne.n	8003a82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3314      	adds	r3, #20
 8003abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3314      	adds	r3, #20
 8003ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ad6:	623a      	str	r2, [r7, #32]
 8003ad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	69f9      	ldr	r1, [r7, #28]
 8003adc:	6a3a      	ldr	r2, [r7, #32]
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e5      	bne.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e00f      	b.n	8003b26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	bf0c      	ite	eq
 8003b16:	2301      	moveq	r3, #1
 8003b18:	2300      	movne	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d09f      	beq.n	8003a64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3740      	adds	r7, #64	; 0x40
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b6a:	f023 030c 	bic.w	r3, r3, #12
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	430b      	orrs	r3, r1
 8003b76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2c      	ldr	r2, [pc, #176]	; (8003c44 <UART_SetConfig+0x114>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d103      	bne.n	8003ba0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b98:	f7ff f8c2 	bl	8002d20 <HAL_RCC_GetPCLK2Freq>
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	e002      	b.n	8003ba6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ba0:	f7ff f8aa 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 8003ba4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	009a      	lsls	r2, r3, #2
 8003bb0:	441a      	add	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbc:	4a22      	ldr	r2, [pc, #136]	; (8003c48 <UART_SetConfig+0x118>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	0119      	lsls	r1, r3, #4
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	009a      	lsls	r2, r3, #2
 8003bd0:	441a      	add	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bdc:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <UART_SetConfig+0x118>)
 8003bde:	fba3 0302 	umull	r0, r3, r3, r2
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2064      	movs	r0, #100	; 0x64
 8003be6:	fb00 f303 	mul.w	r3, r0, r3
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	3332      	adds	r3, #50	; 0x32
 8003bf0:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <UART_SetConfig+0x118>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bfc:	4419      	add	r1, r3
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009a      	lsls	r2, r3, #2
 8003c08:	441a      	add	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <UART_SetConfig+0x118>)
 8003c16:	fba3 0302 	umull	r0, r3, r3, r2
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2064      	movs	r0, #100	; 0x64
 8003c1e:	fb00 f303 	mul.w	r3, r0, r3
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	3332      	adds	r3, #50	; 0x32
 8003c28:	4a07      	ldr	r2, [pc, #28]	; (8003c48 <UART_SetConfig+0x118>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	440a      	add	r2, r1
 8003c3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40013800 	.word	0x40013800
 8003c48:	51eb851f 	.word	0x51eb851f

08003c4c <atoi>:
 8003c4c:	220a      	movs	r2, #10
 8003c4e:	2100      	movs	r1, #0
 8003c50:	f000 ba52 	b.w	80040f8 <strtol>

08003c54 <__errno>:
 8003c54:	4b01      	ldr	r3, [pc, #4]	; (8003c5c <__errno+0x8>)
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	2000000c 	.word	0x2000000c

08003c60 <exit>:
 8003c60:	b508      	push	{r3, lr}
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <exit+0x20>)
 8003c64:	4604      	mov	r4, r0
 8003c66:	b113      	cbz	r3, 8003c6e <exit+0xe>
 8003c68:	2100      	movs	r1, #0
 8003c6a:	f3af 8000 	nop.w
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <exit+0x24>)
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003c74:	b103      	cbz	r3, 8003c78 <exit+0x18>
 8003c76:	4798      	blx	r3
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f7fd ffe0 	bl	8001c3e <_exit>
 8003c7e:	bf00      	nop
 8003c80:	00000000 	.word	0x00000000
 8003c84:	0800538c 	.word	0x0800538c

08003c88 <__libc_init_array>:
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	2600      	movs	r6, #0
 8003c8c:	4d0c      	ldr	r5, [pc, #48]	; (8003cc0 <__libc_init_array+0x38>)
 8003c8e:	4c0d      	ldr	r4, [pc, #52]	; (8003cc4 <__libc_init_array+0x3c>)
 8003c90:	1b64      	subs	r4, r4, r5
 8003c92:	10a4      	asrs	r4, r4, #2
 8003c94:	42a6      	cmp	r6, r4
 8003c96:	d109      	bne.n	8003cac <__libc_init_array+0x24>
 8003c98:	f001 fb00 	bl	800529c <_init>
 8003c9c:	2600      	movs	r6, #0
 8003c9e:	4d0a      	ldr	r5, [pc, #40]	; (8003cc8 <__libc_init_array+0x40>)
 8003ca0:	4c0a      	ldr	r4, [pc, #40]	; (8003ccc <__libc_init_array+0x44>)
 8003ca2:	1b64      	subs	r4, r4, r5
 8003ca4:	10a4      	asrs	r4, r4, #2
 8003ca6:	42a6      	cmp	r6, r4
 8003ca8:	d105      	bne.n	8003cb6 <__libc_init_array+0x2e>
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
 8003cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb0:	4798      	blx	r3
 8003cb2:	3601      	adds	r6, #1
 8003cb4:	e7ee      	b.n	8003c94 <__libc_init_array+0xc>
 8003cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cba:	4798      	blx	r3
 8003cbc:	3601      	adds	r6, #1
 8003cbe:	e7f2      	b.n	8003ca6 <__libc_init_array+0x1e>
 8003cc0:	080055d8 	.word	0x080055d8
 8003cc4:	080055d8 	.word	0x080055d8
 8003cc8:	080055d8 	.word	0x080055d8
 8003ccc:	080055dc 	.word	0x080055dc

08003cd0 <malloc>:
 8003cd0:	4b02      	ldr	r3, [pc, #8]	; (8003cdc <malloc+0xc>)
 8003cd2:	4601      	mov	r1, r0
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	f000 b88b 	b.w	8003df0 <_malloc_r>
 8003cda:	bf00      	nop
 8003cdc:	2000000c 	.word	0x2000000c

08003ce0 <free>:
 8003ce0:	4b02      	ldr	r3, [pc, #8]	; (8003cec <free+0xc>)
 8003ce2:	4601      	mov	r1, r0
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	f000 b81b 	b.w	8003d20 <_free_r>
 8003cea:	bf00      	nop
 8003cec:	2000000c 	.word	0x2000000c

08003cf0 <memcmp>:
 8003cf0:	b510      	push	{r4, lr}
 8003cf2:	3901      	subs	r1, #1
 8003cf4:	4402      	add	r2, r0
 8003cf6:	4290      	cmp	r0, r2
 8003cf8:	d101      	bne.n	8003cfe <memcmp+0xe>
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	e005      	b.n	8003d0a <memcmp+0x1a>
 8003cfe:	7803      	ldrb	r3, [r0, #0]
 8003d00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003d04:	42a3      	cmp	r3, r4
 8003d06:	d001      	beq.n	8003d0c <memcmp+0x1c>
 8003d08:	1b18      	subs	r0, r3, r4
 8003d0a:	bd10      	pop	{r4, pc}
 8003d0c:	3001      	adds	r0, #1
 8003d0e:	e7f2      	b.n	8003cf6 <memcmp+0x6>

08003d10 <memset>:
 8003d10:	4603      	mov	r3, r0
 8003d12:	4402      	add	r2, r0
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d100      	bne.n	8003d1a <memset+0xa>
 8003d18:	4770      	bx	lr
 8003d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1e:	e7f9      	b.n	8003d14 <memset+0x4>

08003d20 <_free_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4605      	mov	r5, r0
 8003d24:	2900      	cmp	r1, #0
 8003d26:	d040      	beq.n	8003daa <_free_r+0x8a>
 8003d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d2c:	1f0c      	subs	r4, r1, #4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bfb8      	it	lt
 8003d32:	18e4      	addlt	r4, r4, r3
 8003d34:	f000 fb12 	bl	800435c <__malloc_lock>
 8003d38:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <_free_r+0x8c>)
 8003d3a:	6813      	ldr	r3, [r2, #0]
 8003d3c:	b933      	cbnz	r3, 8003d4c <_free_r+0x2c>
 8003d3e:	6063      	str	r3, [r4, #4]
 8003d40:	6014      	str	r4, [r2, #0]
 8003d42:	4628      	mov	r0, r5
 8003d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d48:	f000 bb0e 	b.w	8004368 <__malloc_unlock>
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	d908      	bls.n	8003d62 <_free_r+0x42>
 8003d50:	6820      	ldr	r0, [r4, #0]
 8003d52:	1821      	adds	r1, r4, r0
 8003d54:	428b      	cmp	r3, r1
 8003d56:	bf01      	itttt	eq
 8003d58:	6819      	ldreq	r1, [r3, #0]
 8003d5a:	685b      	ldreq	r3, [r3, #4]
 8003d5c:	1809      	addeq	r1, r1, r0
 8003d5e:	6021      	streq	r1, [r4, #0]
 8003d60:	e7ed      	b.n	8003d3e <_free_r+0x1e>
 8003d62:	461a      	mov	r2, r3
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	b10b      	cbz	r3, 8003d6c <_free_r+0x4c>
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	d9fa      	bls.n	8003d62 <_free_r+0x42>
 8003d6c:	6811      	ldr	r1, [r2, #0]
 8003d6e:	1850      	adds	r0, r2, r1
 8003d70:	42a0      	cmp	r0, r4
 8003d72:	d10b      	bne.n	8003d8c <_free_r+0x6c>
 8003d74:	6820      	ldr	r0, [r4, #0]
 8003d76:	4401      	add	r1, r0
 8003d78:	1850      	adds	r0, r2, r1
 8003d7a:	4283      	cmp	r3, r0
 8003d7c:	6011      	str	r1, [r2, #0]
 8003d7e:	d1e0      	bne.n	8003d42 <_free_r+0x22>
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4401      	add	r1, r0
 8003d86:	6011      	str	r1, [r2, #0]
 8003d88:	6053      	str	r3, [r2, #4]
 8003d8a:	e7da      	b.n	8003d42 <_free_r+0x22>
 8003d8c:	d902      	bls.n	8003d94 <_free_r+0x74>
 8003d8e:	230c      	movs	r3, #12
 8003d90:	602b      	str	r3, [r5, #0]
 8003d92:	e7d6      	b.n	8003d42 <_free_r+0x22>
 8003d94:	6820      	ldr	r0, [r4, #0]
 8003d96:	1821      	adds	r1, r4, r0
 8003d98:	428b      	cmp	r3, r1
 8003d9a:	bf01      	itttt	eq
 8003d9c:	6819      	ldreq	r1, [r3, #0]
 8003d9e:	685b      	ldreq	r3, [r3, #4]
 8003da0:	1809      	addeq	r1, r1, r0
 8003da2:	6021      	streq	r1, [r4, #0]
 8003da4:	6063      	str	r3, [r4, #4]
 8003da6:	6054      	str	r4, [r2, #4]
 8003da8:	e7cb      	b.n	8003d42 <_free_r+0x22>
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	200001ec 	.word	0x200001ec

08003db0 <sbrk_aligned>:
 8003db0:	b570      	push	{r4, r5, r6, lr}
 8003db2:	4e0e      	ldr	r6, [pc, #56]	; (8003dec <sbrk_aligned+0x3c>)
 8003db4:	460c      	mov	r4, r1
 8003db6:	6831      	ldr	r1, [r6, #0]
 8003db8:	4605      	mov	r5, r0
 8003dba:	b911      	cbnz	r1, 8003dc2 <sbrk_aligned+0x12>
 8003dbc:	f000 f88c 	bl	8003ed8 <_sbrk_r>
 8003dc0:	6030      	str	r0, [r6, #0]
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	f000 f887 	bl	8003ed8 <_sbrk_r>
 8003dca:	1c43      	adds	r3, r0, #1
 8003dcc:	d00a      	beq.n	8003de4 <sbrk_aligned+0x34>
 8003dce:	1cc4      	adds	r4, r0, #3
 8003dd0:	f024 0403 	bic.w	r4, r4, #3
 8003dd4:	42a0      	cmp	r0, r4
 8003dd6:	d007      	beq.n	8003de8 <sbrk_aligned+0x38>
 8003dd8:	1a21      	subs	r1, r4, r0
 8003dda:	4628      	mov	r0, r5
 8003ddc:	f000 f87c 	bl	8003ed8 <_sbrk_r>
 8003de0:	3001      	adds	r0, #1
 8003de2:	d101      	bne.n	8003de8 <sbrk_aligned+0x38>
 8003de4:	f04f 34ff 	mov.w	r4, #4294967295
 8003de8:	4620      	mov	r0, r4
 8003dea:	bd70      	pop	{r4, r5, r6, pc}
 8003dec:	200001f0 	.word	0x200001f0

08003df0 <_malloc_r>:
 8003df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df4:	1ccd      	adds	r5, r1, #3
 8003df6:	f025 0503 	bic.w	r5, r5, #3
 8003dfa:	3508      	adds	r5, #8
 8003dfc:	2d0c      	cmp	r5, #12
 8003dfe:	bf38      	it	cc
 8003e00:	250c      	movcc	r5, #12
 8003e02:	2d00      	cmp	r5, #0
 8003e04:	4607      	mov	r7, r0
 8003e06:	db01      	blt.n	8003e0c <_malloc_r+0x1c>
 8003e08:	42a9      	cmp	r1, r5
 8003e0a:	d905      	bls.n	8003e18 <_malloc_r+0x28>
 8003e0c:	230c      	movs	r3, #12
 8003e0e:	2600      	movs	r6, #0
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	4630      	mov	r0, r6
 8003e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e18:	4e2e      	ldr	r6, [pc, #184]	; (8003ed4 <_malloc_r+0xe4>)
 8003e1a:	f000 fa9f 	bl	800435c <__malloc_lock>
 8003e1e:	6833      	ldr	r3, [r6, #0]
 8003e20:	461c      	mov	r4, r3
 8003e22:	bb34      	cbnz	r4, 8003e72 <_malloc_r+0x82>
 8003e24:	4629      	mov	r1, r5
 8003e26:	4638      	mov	r0, r7
 8003e28:	f7ff ffc2 	bl	8003db0 <sbrk_aligned>
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	4604      	mov	r4, r0
 8003e30:	d14d      	bne.n	8003ece <_malloc_r+0xde>
 8003e32:	6834      	ldr	r4, [r6, #0]
 8003e34:	4626      	mov	r6, r4
 8003e36:	2e00      	cmp	r6, #0
 8003e38:	d140      	bne.n	8003ebc <_malloc_r+0xcc>
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	4631      	mov	r1, r6
 8003e3e:	4638      	mov	r0, r7
 8003e40:	eb04 0803 	add.w	r8, r4, r3
 8003e44:	f000 f848 	bl	8003ed8 <_sbrk_r>
 8003e48:	4580      	cmp	r8, r0
 8003e4a:	d13a      	bne.n	8003ec2 <_malloc_r+0xd2>
 8003e4c:	6821      	ldr	r1, [r4, #0]
 8003e4e:	3503      	adds	r5, #3
 8003e50:	1a6d      	subs	r5, r5, r1
 8003e52:	f025 0503 	bic.w	r5, r5, #3
 8003e56:	3508      	adds	r5, #8
 8003e58:	2d0c      	cmp	r5, #12
 8003e5a:	bf38      	it	cc
 8003e5c:	250c      	movcc	r5, #12
 8003e5e:	4638      	mov	r0, r7
 8003e60:	4629      	mov	r1, r5
 8003e62:	f7ff ffa5 	bl	8003db0 <sbrk_aligned>
 8003e66:	3001      	adds	r0, #1
 8003e68:	d02b      	beq.n	8003ec2 <_malloc_r+0xd2>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	442b      	add	r3, r5
 8003e6e:	6023      	str	r3, [r4, #0]
 8003e70:	e00e      	b.n	8003e90 <_malloc_r+0xa0>
 8003e72:	6822      	ldr	r2, [r4, #0]
 8003e74:	1b52      	subs	r2, r2, r5
 8003e76:	d41e      	bmi.n	8003eb6 <_malloc_r+0xc6>
 8003e78:	2a0b      	cmp	r2, #11
 8003e7a:	d916      	bls.n	8003eaa <_malloc_r+0xba>
 8003e7c:	1961      	adds	r1, r4, r5
 8003e7e:	42a3      	cmp	r3, r4
 8003e80:	6025      	str	r5, [r4, #0]
 8003e82:	bf18      	it	ne
 8003e84:	6059      	strne	r1, [r3, #4]
 8003e86:	6863      	ldr	r3, [r4, #4]
 8003e88:	bf08      	it	eq
 8003e8a:	6031      	streq	r1, [r6, #0]
 8003e8c:	5162      	str	r2, [r4, r5]
 8003e8e:	604b      	str	r3, [r1, #4]
 8003e90:	4638      	mov	r0, r7
 8003e92:	f104 060b 	add.w	r6, r4, #11
 8003e96:	f000 fa67 	bl	8004368 <__malloc_unlock>
 8003e9a:	f026 0607 	bic.w	r6, r6, #7
 8003e9e:	1d23      	adds	r3, r4, #4
 8003ea0:	1af2      	subs	r2, r6, r3
 8003ea2:	d0b6      	beq.n	8003e12 <_malloc_r+0x22>
 8003ea4:	1b9b      	subs	r3, r3, r6
 8003ea6:	50a3      	str	r3, [r4, r2]
 8003ea8:	e7b3      	b.n	8003e12 <_malloc_r+0x22>
 8003eaa:	6862      	ldr	r2, [r4, #4]
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	bf0c      	ite	eq
 8003eb0:	6032      	streq	r2, [r6, #0]
 8003eb2:	605a      	strne	r2, [r3, #4]
 8003eb4:	e7ec      	b.n	8003e90 <_malloc_r+0xa0>
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	6864      	ldr	r4, [r4, #4]
 8003eba:	e7b2      	b.n	8003e22 <_malloc_r+0x32>
 8003ebc:	4634      	mov	r4, r6
 8003ebe:	6876      	ldr	r6, [r6, #4]
 8003ec0:	e7b9      	b.n	8003e36 <_malloc_r+0x46>
 8003ec2:	230c      	movs	r3, #12
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	f000 fa4e 	bl	8004368 <__malloc_unlock>
 8003ecc:	e7a1      	b.n	8003e12 <_malloc_r+0x22>
 8003ece:	6025      	str	r5, [r4, #0]
 8003ed0:	e7de      	b.n	8003e90 <_malloc_r+0xa0>
 8003ed2:	bf00      	nop
 8003ed4:	200001ec 	.word	0x200001ec

08003ed8 <_sbrk_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	2300      	movs	r3, #0
 8003edc:	4d05      	ldr	r5, [pc, #20]	; (8003ef4 <_sbrk_r+0x1c>)
 8003ede:	4604      	mov	r4, r0
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	602b      	str	r3, [r5, #0]
 8003ee4:	f7fd ff1e 	bl	8001d24 <_sbrk>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	d102      	bne.n	8003ef2 <_sbrk_r+0x1a>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	b103      	cbz	r3, 8003ef2 <_sbrk_r+0x1a>
 8003ef0:	6023      	str	r3, [r4, #0]
 8003ef2:	bd38      	pop	{r3, r4, r5, pc}
 8003ef4:	200001f8 	.word	0x200001f8

08003ef8 <siprintf>:
 8003ef8:	b40e      	push	{r1, r2, r3}
 8003efa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003efe:	b500      	push	{lr}
 8003f00:	b09c      	sub	sp, #112	; 0x70
 8003f02:	ab1d      	add	r3, sp, #116	; 0x74
 8003f04:	9002      	str	r0, [sp, #8]
 8003f06:	9006      	str	r0, [sp, #24]
 8003f08:	9107      	str	r1, [sp, #28]
 8003f0a:	9104      	str	r1, [sp, #16]
 8003f0c:	4808      	ldr	r0, [pc, #32]	; (8003f30 <siprintf+0x38>)
 8003f0e:	4909      	ldr	r1, [pc, #36]	; (8003f34 <siprintf+0x3c>)
 8003f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f14:	9105      	str	r1, [sp, #20]
 8003f16:	6800      	ldr	r0, [r0, #0]
 8003f18:	a902      	add	r1, sp, #8
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	f000 fa86 	bl	800442c <_svfiprintf_r>
 8003f20:	2200      	movs	r2, #0
 8003f22:	9b02      	ldr	r3, [sp, #8]
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	b01c      	add	sp, #112	; 0x70
 8003f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f2c:	b003      	add	sp, #12
 8003f2e:	4770      	bx	lr
 8003f30:	2000000c 	.word	0x2000000c
 8003f34:	ffff0208 	.word	0xffff0208

08003f38 <strcpy>:
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f3e:	f803 2b01 	strb.w	r2, [r3], #1
 8003f42:	2a00      	cmp	r2, #0
 8003f44:	d1f9      	bne.n	8003f3a <strcpy+0x2>
 8003f46:	4770      	bx	lr

08003f48 <strtok>:
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <strtok+0x5c>)
 8003f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4e:	681f      	ldr	r7, [r3, #0]
 8003f50:	4605      	mov	r5, r0
 8003f52:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003f54:	460e      	mov	r6, r1
 8003f56:	b9ec      	cbnz	r4, 8003f94 <strtok+0x4c>
 8003f58:	2050      	movs	r0, #80	; 0x50
 8003f5a:	f7ff feb9 	bl	8003cd0 <malloc>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	65b8      	str	r0, [r7, #88]	; 0x58
 8003f62:	b920      	cbnz	r0, 8003f6e <strtok+0x26>
 8003f64:	2157      	movs	r1, #87	; 0x57
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <strtok+0x60>)
 8003f68:	4810      	ldr	r0, [pc, #64]	; (8003fac <strtok+0x64>)
 8003f6a:	f000 f8cf 	bl	800410c <__assert_func>
 8003f6e:	e9c0 4400 	strd	r4, r4, [r0]
 8003f72:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003f76:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003f7a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003f7e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003f82:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003f86:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003f8a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003f8e:	6184      	str	r4, [r0, #24]
 8003f90:	7704      	strb	r4, [r0, #28]
 8003f92:	6244      	str	r4, [r0, #36]	; 0x24
 8003f94:	4631      	mov	r1, r6
 8003f96:	4628      	mov	r0, r5
 8003f98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa0:	f000 b806 	b.w	8003fb0 <__strtok_r>
 8003fa4:	2000000c 	.word	0x2000000c
 8003fa8:	08005390 	.word	0x08005390
 8003fac:	080053a7 	.word	0x080053a7

08003fb0 <__strtok_r>:
 8003fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb2:	b908      	cbnz	r0, 8003fb8 <__strtok_r+0x8>
 8003fb4:	6810      	ldr	r0, [r2, #0]
 8003fb6:	b188      	cbz	r0, 8003fdc <__strtok_r+0x2c>
 8003fb8:	4604      	mov	r4, r0
 8003fba:	460f      	mov	r7, r1
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003fc2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003fc6:	b91e      	cbnz	r6, 8003fd0 <__strtok_r+0x20>
 8003fc8:	b965      	cbnz	r5, 8003fe4 <__strtok_r+0x34>
 8003fca:	4628      	mov	r0, r5
 8003fcc:	6015      	str	r5, [r2, #0]
 8003fce:	e005      	b.n	8003fdc <__strtok_r+0x2c>
 8003fd0:	42b5      	cmp	r5, r6
 8003fd2:	d1f6      	bne.n	8003fc2 <__strtok_r+0x12>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f0      	bne.n	8003fba <__strtok_r+0xa>
 8003fd8:	6014      	str	r4, [r2, #0]
 8003fda:	7003      	strb	r3, [r0, #0]
 8003fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fde:	461c      	mov	r4, r3
 8003fe0:	e00c      	b.n	8003ffc <__strtok_r+0x4c>
 8003fe2:	b915      	cbnz	r5, 8003fea <__strtok_r+0x3a>
 8003fe4:	460e      	mov	r6, r1
 8003fe6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003fea:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003fee:	42ab      	cmp	r3, r5
 8003ff0:	d1f7      	bne.n	8003fe2 <__strtok_r+0x32>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f3      	beq.n	8003fde <__strtok_r+0x2e>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003ffc:	6014      	str	r4, [r2, #0]
 8003ffe:	e7ed      	b.n	8003fdc <__strtok_r+0x2c>

08004000 <_strtol_l.constprop.0>:
 8004000:	2b01      	cmp	r3, #1
 8004002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004006:	4680      	mov	r8, r0
 8004008:	d001      	beq.n	800400e <_strtol_l.constprop.0+0xe>
 800400a:	2b24      	cmp	r3, #36	; 0x24
 800400c:	d906      	bls.n	800401c <_strtol_l.constprop.0+0x1c>
 800400e:	f7ff fe21 	bl	8003c54 <__errno>
 8004012:	2316      	movs	r3, #22
 8004014:	6003      	str	r3, [r0, #0]
 8004016:	2000      	movs	r0, #0
 8004018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800401c:	460d      	mov	r5, r1
 800401e:	4f35      	ldr	r7, [pc, #212]	; (80040f4 <_strtol_l.constprop.0+0xf4>)
 8004020:	4628      	mov	r0, r5
 8004022:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004026:	5de6      	ldrb	r6, [r4, r7]
 8004028:	f016 0608 	ands.w	r6, r6, #8
 800402c:	d1f8      	bne.n	8004020 <_strtol_l.constprop.0+0x20>
 800402e:	2c2d      	cmp	r4, #45	; 0x2d
 8004030:	d12f      	bne.n	8004092 <_strtol_l.constprop.0+0x92>
 8004032:	2601      	movs	r6, #1
 8004034:	782c      	ldrb	r4, [r5, #0]
 8004036:	1c85      	adds	r5, r0, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d057      	beq.n	80040ec <_strtol_l.constprop.0+0xec>
 800403c:	2b10      	cmp	r3, #16
 800403e:	d109      	bne.n	8004054 <_strtol_l.constprop.0+0x54>
 8004040:	2c30      	cmp	r4, #48	; 0x30
 8004042:	d107      	bne.n	8004054 <_strtol_l.constprop.0+0x54>
 8004044:	7828      	ldrb	r0, [r5, #0]
 8004046:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800404a:	2858      	cmp	r0, #88	; 0x58
 800404c:	d149      	bne.n	80040e2 <_strtol_l.constprop.0+0xe2>
 800404e:	2310      	movs	r3, #16
 8004050:	786c      	ldrb	r4, [r5, #1]
 8004052:	3502      	adds	r5, #2
 8004054:	2700      	movs	r7, #0
 8004056:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800405a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800405e:	fbbe f9f3 	udiv	r9, lr, r3
 8004062:	4638      	mov	r0, r7
 8004064:	fb03 ea19 	mls	sl, r3, r9, lr
 8004068:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800406c:	f1bc 0f09 	cmp.w	ip, #9
 8004070:	d814      	bhi.n	800409c <_strtol_l.constprop.0+0x9c>
 8004072:	4664      	mov	r4, ip
 8004074:	42a3      	cmp	r3, r4
 8004076:	dd22      	ble.n	80040be <_strtol_l.constprop.0+0xbe>
 8004078:	2f00      	cmp	r7, #0
 800407a:	db1d      	blt.n	80040b8 <_strtol_l.constprop.0+0xb8>
 800407c:	4581      	cmp	r9, r0
 800407e:	d31b      	bcc.n	80040b8 <_strtol_l.constprop.0+0xb8>
 8004080:	d101      	bne.n	8004086 <_strtol_l.constprop.0+0x86>
 8004082:	45a2      	cmp	sl, r4
 8004084:	db18      	blt.n	80040b8 <_strtol_l.constprop.0+0xb8>
 8004086:	2701      	movs	r7, #1
 8004088:	fb00 4003 	mla	r0, r0, r3, r4
 800408c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004090:	e7ea      	b.n	8004068 <_strtol_l.constprop.0+0x68>
 8004092:	2c2b      	cmp	r4, #43	; 0x2b
 8004094:	bf04      	itt	eq
 8004096:	782c      	ldrbeq	r4, [r5, #0]
 8004098:	1c85      	addeq	r5, r0, #2
 800409a:	e7cd      	b.n	8004038 <_strtol_l.constprop.0+0x38>
 800409c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80040a0:	f1bc 0f19 	cmp.w	ip, #25
 80040a4:	d801      	bhi.n	80040aa <_strtol_l.constprop.0+0xaa>
 80040a6:	3c37      	subs	r4, #55	; 0x37
 80040a8:	e7e4      	b.n	8004074 <_strtol_l.constprop.0+0x74>
 80040aa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80040ae:	f1bc 0f19 	cmp.w	ip, #25
 80040b2:	d804      	bhi.n	80040be <_strtol_l.constprop.0+0xbe>
 80040b4:	3c57      	subs	r4, #87	; 0x57
 80040b6:	e7dd      	b.n	8004074 <_strtol_l.constprop.0+0x74>
 80040b8:	f04f 37ff 	mov.w	r7, #4294967295
 80040bc:	e7e6      	b.n	800408c <_strtol_l.constprop.0+0x8c>
 80040be:	2f00      	cmp	r7, #0
 80040c0:	da07      	bge.n	80040d2 <_strtol_l.constprop.0+0xd2>
 80040c2:	2322      	movs	r3, #34	; 0x22
 80040c4:	4670      	mov	r0, lr
 80040c6:	f8c8 3000 	str.w	r3, [r8]
 80040ca:	2a00      	cmp	r2, #0
 80040cc:	d0a4      	beq.n	8004018 <_strtol_l.constprop.0+0x18>
 80040ce:	1e69      	subs	r1, r5, #1
 80040d0:	e005      	b.n	80040de <_strtol_l.constprop.0+0xde>
 80040d2:	b106      	cbz	r6, 80040d6 <_strtol_l.constprop.0+0xd6>
 80040d4:	4240      	negs	r0, r0
 80040d6:	2a00      	cmp	r2, #0
 80040d8:	d09e      	beq.n	8004018 <_strtol_l.constprop.0+0x18>
 80040da:	2f00      	cmp	r7, #0
 80040dc:	d1f7      	bne.n	80040ce <_strtol_l.constprop.0+0xce>
 80040de:	6011      	str	r1, [r2, #0]
 80040e0:	e79a      	b.n	8004018 <_strtol_l.constprop.0+0x18>
 80040e2:	2430      	movs	r4, #48	; 0x30
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1b5      	bne.n	8004054 <_strtol_l.constprop.0+0x54>
 80040e8:	2308      	movs	r3, #8
 80040ea:	e7b3      	b.n	8004054 <_strtol_l.constprop.0+0x54>
 80040ec:	2c30      	cmp	r4, #48	; 0x30
 80040ee:	d0a9      	beq.n	8004044 <_strtol_l.constprop.0+0x44>
 80040f0:	230a      	movs	r3, #10
 80040f2:	e7af      	b.n	8004054 <_strtol_l.constprop.0+0x54>
 80040f4:	08005441 	.word	0x08005441

080040f8 <strtol>:
 80040f8:	4613      	mov	r3, r2
 80040fa:	460a      	mov	r2, r1
 80040fc:	4601      	mov	r1, r0
 80040fe:	4802      	ldr	r0, [pc, #8]	; (8004108 <strtol+0x10>)
 8004100:	6800      	ldr	r0, [r0, #0]
 8004102:	f7ff bf7d 	b.w	8004000 <_strtol_l.constprop.0>
 8004106:	bf00      	nop
 8004108:	2000000c 	.word	0x2000000c

0800410c <__assert_func>:
 800410c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800410e:	4614      	mov	r4, r2
 8004110:	461a      	mov	r2, r3
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <__assert_func+0x2c>)
 8004114:	4605      	mov	r5, r0
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68d8      	ldr	r0, [r3, #12]
 800411a:	b14c      	cbz	r4, 8004130 <__assert_func+0x24>
 800411c:	4b07      	ldr	r3, [pc, #28]	; (800413c <__assert_func+0x30>)
 800411e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004122:	9100      	str	r1, [sp, #0]
 8004124:	462b      	mov	r3, r5
 8004126:	4906      	ldr	r1, [pc, #24]	; (8004140 <__assert_func+0x34>)
 8004128:	f000 f8e4 	bl	80042f4 <fiprintf>
 800412c:	f000 fe82 	bl	8004e34 <abort>
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <__assert_func+0x38>)
 8004132:	461c      	mov	r4, r3
 8004134:	e7f3      	b.n	800411e <__assert_func+0x12>
 8004136:	bf00      	nop
 8004138:	2000000c 	.word	0x2000000c
 800413c:	08005404 	.word	0x08005404
 8004140:	08005411 	.word	0x08005411
 8004144:	0800543f 	.word	0x0800543f

08004148 <std>:
 8004148:	2300      	movs	r3, #0
 800414a:	b510      	push	{r4, lr}
 800414c:	4604      	mov	r4, r0
 800414e:	e9c0 3300 	strd	r3, r3, [r0]
 8004152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004156:	6083      	str	r3, [r0, #8]
 8004158:	8181      	strh	r1, [r0, #12]
 800415a:	6643      	str	r3, [r0, #100]	; 0x64
 800415c:	81c2      	strh	r2, [r0, #14]
 800415e:	6183      	str	r3, [r0, #24]
 8004160:	4619      	mov	r1, r3
 8004162:	2208      	movs	r2, #8
 8004164:	305c      	adds	r0, #92	; 0x5c
 8004166:	f7ff fdd3 	bl	8003d10 <memset>
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <std+0x38>)
 800416c:	6224      	str	r4, [r4, #32]
 800416e:	6263      	str	r3, [r4, #36]	; 0x24
 8004170:	4b04      	ldr	r3, [pc, #16]	; (8004184 <std+0x3c>)
 8004172:	62a3      	str	r3, [r4, #40]	; 0x28
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <std+0x40>)
 8004176:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004178:	4b04      	ldr	r3, [pc, #16]	; (800418c <std+0x44>)
 800417a:	6323      	str	r3, [r4, #48]	; 0x30
 800417c:	bd10      	pop	{r4, pc}
 800417e:	bf00      	nop
 8004180:	08004c09 	.word	0x08004c09
 8004184:	08004c2b 	.word	0x08004c2b
 8004188:	08004c63 	.word	0x08004c63
 800418c:	08004c87 	.word	0x08004c87

08004190 <_cleanup_r>:
 8004190:	4901      	ldr	r1, [pc, #4]	; (8004198 <_cleanup_r+0x8>)
 8004192:	f000 b8c1 	b.w	8004318 <_fwalk_reent>
 8004196:	bf00      	nop
 8004198:	08004f69 	.word	0x08004f69

0800419c <__sfmoreglue>:
 800419c:	2268      	movs	r2, #104	; 0x68
 800419e:	b570      	push	{r4, r5, r6, lr}
 80041a0:	1e4d      	subs	r5, r1, #1
 80041a2:	4355      	muls	r5, r2
 80041a4:	460e      	mov	r6, r1
 80041a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041aa:	f7ff fe21 	bl	8003df0 <_malloc_r>
 80041ae:	4604      	mov	r4, r0
 80041b0:	b140      	cbz	r0, 80041c4 <__sfmoreglue+0x28>
 80041b2:	2100      	movs	r1, #0
 80041b4:	e9c0 1600 	strd	r1, r6, [r0]
 80041b8:	300c      	adds	r0, #12
 80041ba:	60a0      	str	r0, [r4, #8]
 80041bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041c0:	f7ff fda6 	bl	8003d10 <memset>
 80041c4:	4620      	mov	r0, r4
 80041c6:	bd70      	pop	{r4, r5, r6, pc}

080041c8 <__sfp_lock_acquire>:
 80041c8:	4801      	ldr	r0, [pc, #4]	; (80041d0 <__sfp_lock_acquire+0x8>)
 80041ca:	f000 b8c5 	b.w	8004358 <__retarget_lock_acquire_recursive>
 80041ce:	bf00      	nop
 80041d0:	200001f5 	.word	0x200001f5

080041d4 <__sfp_lock_release>:
 80041d4:	4801      	ldr	r0, [pc, #4]	; (80041dc <__sfp_lock_release+0x8>)
 80041d6:	f000 b8c0 	b.w	800435a <__retarget_lock_release_recursive>
 80041da:	bf00      	nop
 80041dc:	200001f5 	.word	0x200001f5

080041e0 <__sinit_lock_acquire>:
 80041e0:	4801      	ldr	r0, [pc, #4]	; (80041e8 <__sinit_lock_acquire+0x8>)
 80041e2:	f000 b8b9 	b.w	8004358 <__retarget_lock_acquire_recursive>
 80041e6:	bf00      	nop
 80041e8:	200001f6 	.word	0x200001f6

080041ec <__sinit_lock_release>:
 80041ec:	4801      	ldr	r0, [pc, #4]	; (80041f4 <__sinit_lock_release+0x8>)
 80041ee:	f000 b8b4 	b.w	800435a <__retarget_lock_release_recursive>
 80041f2:	bf00      	nop
 80041f4:	200001f6 	.word	0x200001f6

080041f8 <__sinit>:
 80041f8:	b510      	push	{r4, lr}
 80041fa:	4604      	mov	r4, r0
 80041fc:	f7ff fff0 	bl	80041e0 <__sinit_lock_acquire>
 8004200:	69a3      	ldr	r3, [r4, #24]
 8004202:	b11b      	cbz	r3, 800420c <__sinit+0x14>
 8004204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004208:	f7ff bff0 	b.w	80041ec <__sinit_lock_release>
 800420c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004210:	6523      	str	r3, [r4, #80]	; 0x50
 8004212:	4b13      	ldr	r3, [pc, #76]	; (8004260 <__sinit+0x68>)
 8004214:	4a13      	ldr	r2, [pc, #76]	; (8004264 <__sinit+0x6c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	62a2      	str	r2, [r4, #40]	; 0x28
 800421a:	42a3      	cmp	r3, r4
 800421c:	bf08      	it	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	4620      	mov	r0, r4
 8004222:	bf08      	it	eq
 8004224:	61a3      	streq	r3, [r4, #24]
 8004226:	f000 f81f 	bl	8004268 <__sfp>
 800422a:	6060      	str	r0, [r4, #4]
 800422c:	4620      	mov	r0, r4
 800422e:	f000 f81b 	bl	8004268 <__sfp>
 8004232:	60a0      	str	r0, [r4, #8]
 8004234:	4620      	mov	r0, r4
 8004236:	f000 f817 	bl	8004268 <__sfp>
 800423a:	2200      	movs	r2, #0
 800423c:	2104      	movs	r1, #4
 800423e:	60e0      	str	r0, [r4, #12]
 8004240:	6860      	ldr	r0, [r4, #4]
 8004242:	f7ff ff81 	bl	8004148 <std>
 8004246:	2201      	movs	r2, #1
 8004248:	2109      	movs	r1, #9
 800424a:	68a0      	ldr	r0, [r4, #8]
 800424c:	f7ff ff7c 	bl	8004148 <std>
 8004250:	2202      	movs	r2, #2
 8004252:	2112      	movs	r1, #18
 8004254:	68e0      	ldr	r0, [r4, #12]
 8004256:	f7ff ff77 	bl	8004148 <std>
 800425a:	2301      	movs	r3, #1
 800425c:	61a3      	str	r3, [r4, #24]
 800425e:	e7d1      	b.n	8004204 <__sinit+0xc>
 8004260:	0800538c 	.word	0x0800538c
 8004264:	08004191 	.word	0x08004191

08004268 <__sfp>:
 8004268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426a:	4607      	mov	r7, r0
 800426c:	f7ff ffac 	bl	80041c8 <__sfp_lock_acquire>
 8004270:	4b1e      	ldr	r3, [pc, #120]	; (80042ec <__sfp+0x84>)
 8004272:	681e      	ldr	r6, [r3, #0]
 8004274:	69b3      	ldr	r3, [r6, #24]
 8004276:	b913      	cbnz	r3, 800427e <__sfp+0x16>
 8004278:	4630      	mov	r0, r6
 800427a:	f7ff ffbd 	bl	80041f8 <__sinit>
 800427e:	3648      	adds	r6, #72	; 0x48
 8004280:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004284:	3b01      	subs	r3, #1
 8004286:	d503      	bpl.n	8004290 <__sfp+0x28>
 8004288:	6833      	ldr	r3, [r6, #0]
 800428a:	b30b      	cbz	r3, 80042d0 <__sfp+0x68>
 800428c:	6836      	ldr	r6, [r6, #0]
 800428e:	e7f7      	b.n	8004280 <__sfp+0x18>
 8004290:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004294:	b9d5      	cbnz	r5, 80042cc <__sfp+0x64>
 8004296:	4b16      	ldr	r3, [pc, #88]	; (80042f0 <__sfp+0x88>)
 8004298:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800429c:	60e3      	str	r3, [r4, #12]
 800429e:	6665      	str	r5, [r4, #100]	; 0x64
 80042a0:	f000 f859 	bl	8004356 <__retarget_lock_init_recursive>
 80042a4:	f7ff ff96 	bl	80041d4 <__sfp_lock_release>
 80042a8:	2208      	movs	r2, #8
 80042aa:	4629      	mov	r1, r5
 80042ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80042b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80042b4:	6025      	str	r5, [r4, #0]
 80042b6:	61a5      	str	r5, [r4, #24]
 80042b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042bc:	f7ff fd28 	bl	8003d10 <memset>
 80042c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80042c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80042c8:	4620      	mov	r0, r4
 80042ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042cc:	3468      	adds	r4, #104	; 0x68
 80042ce:	e7d9      	b.n	8004284 <__sfp+0x1c>
 80042d0:	2104      	movs	r1, #4
 80042d2:	4638      	mov	r0, r7
 80042d4:	f7ff ff62 	bl	800419c <__sfmoreglue>
 80042d8:	4604      	mov	r4, r0
 80042da:	6030      	str	r0, [r6, #0]
 80042dc:	2800      	cmp	r0, #0
 80042de:	d1d5      	bne.n	800428c <__sfp+0x24>
 80042e0:	f7ff ff78 	bl	80041d4 <__sfp_lock_release>
 80042e4:	230c      	movs	r3, #12
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	e7ee      	b.n	80042c8 <__sfp+0x60>
 80042ea:	bf00      	nop
 80042ec:	0800538c 	.word	0x0800538c
 80042f0:	ffff0001 	.word	0xffff0001

080042f4 <fiprintf>:
 80042f4:	b40e      	push	{r1, r2, r3}
 80042f6:	b503      	push	{r0, r1, lr}
 80042f8:	4601      	mov	r1, r0
 80042fa:	ab03      	add	r3, sp, #12
 80042fc:	4805      	ldr	r0, [pc, #20]	; (8004314 <fiprintf+0x20>)
 80042fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004302:	6800      	ldr	r0, [r0, #0]
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	f000 f9b9 	bl	800467c <_vfiprintf_r>
 800430a:	b002      	add	sp, #8
 800430c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004310:	b003      	add	sp, #12
 8004312:	4770      	bx	lr
 8004314:	2000000c 	.word	0x2000000c

08004318 <_fwalk_reent>:
 8004318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800431c:	4606      	mov	r6, r0
 800431e:	4688      	mov	r8, r1
 8004320:	2700      	movs	r7, #0
 8004322:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004326:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800432a:	f1b9 0901 	subs.w	r9, r9, #1
 800432e:	d505      	bpl.n	800433c <_fwalk_reent+0x24>
 8004330:	6824      	ldr	r4, [r4, #0]
 8004332:	2c00      	cmp	r4, #0
 8004334:	d1f7      	bne.n	8004326 <_fwalk_reent+0xe>
 8004336:	4638      	mov	r0, r7
 8004338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800433c:	89ab      	ldrh	r3, [r5, #12]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d907      	bls.n	8004352 <_fwalk_reent+0x3a>
 8004342:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004346:	3301      	adds	r3, #1
 8004348:	d003      	beq.n	8004352 <_fwalk_reent+0x3a>
 800434a:	4629      	mov	r1, r5
 800434c:	4630      	mov	r0, r6
 800434e:	47c0      	blx	r8
 8004350:	4307      	orrs	r7, r0
 8004352:	3568      	adds	r5, #104	; 0x68
 8004354:	e7e9      	b.n	800432a <_fwalk_reent+0x12>

08004356 <__retarget_lock_init_recursive>:
 8004356:	4770      	bx	lr

08004358 <__retarget_lock_acquire_recursive>:
 8004358:	4770      	bx	lr

0800435a <__retarget_lock_release_recursive>:
 800435a:	4770      	bx	lr

0800435c <__malloc_lock>:
 800435c:	4801      	ldr	r0, [pc, #4]	; (8004364 <__malloc_lock+0x8>)
 800435e:	f7ff bffb 	b.w	8004358 <__retarget_lock_acquire_recursive>
 8004362:	bf00      	nop
 8004364:	200001f4 	.word	0x200001f4

08004368 <__malloc_unlock>:
 8004368:	4801      	ldr	r0, [pc, #4]	; (8004370 <__malloc_unlock+0x8>)
 800436a:	f7ff bff6 	b.w	800435a <__retarget_lock_release_recursive>
 800436e:	bf00      	nop
 8004370:	200001f4 	.word	0x200001f4

08004374 <__ssputs_r>:
 8004374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004378:	688e      	ldr	r6, [r1, #8]
 800437a:	4682      	mov	sl, r0
 800437c:	429e      	cmp	r6, r3
 800437e:	460c      	mov	r4, r1
 8004380:	4690      	mov	r8, r2
 8004382:	461f      	mov	r7, r3
 8004384:	d838      	bhi.n	80043f8 <__ssputs_r+0x84>
 8004386:	898a      	ldrh	r2, [r1, #12]
 8004388:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800438c:	d032      	beq.n	80043f4 <__ssputs_r+0x80>
 800438e:	6825      	ldr	r5, [r4, #0]
 8004390:	6909      	ldr	r1, [r1, #16]
 8004392:	3301      	adds	r3, #1
 8004394:	eba5 0901 	sub.w	r9, r5, r1
 8004398:	6965      	ldr	r5, [r4, #20]
 800439a:	444b      	add	r3, r9
 800439c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043a4:	106d      	asrs	r5, r5, #1
 80043a6:	429d      	cmp	r5, r3
 80043a8:	bf38      	it	cc
 80043aa:	461d      	movcc	r5, r3
 80043ac:	0553      	lsls	r3, r2, #21
 80043ae:	d531      	bpl.n	8004414 <__ssputs_r+0xa0>
 80043b0:	4629      	mov	r1, r5
 80043b2:	f7ff fd1d 	bl	8003df0 <_malloc_r>
 80043b6:	4606      	mov	r6, r0
 80043b8:	b950      	cbnz	r0, 80043d0 <__ssputs_r+0x5c>
 80043ba:	230c      	movs	r3, #12
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295
 80043c0:	f8ca 3000 	str.w	r3, [sl]
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ca:	81a3      	strh	r3, [r4, #12]
 80043cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d0:	464a      	mov	r2, r9
 80043d2:	6921      	ldr	r1, [r4, #16]
 80043d4:	f000 fe8a 	bl	80050ec <memcpy>
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e2:	81a3      	strh	r3, [r4, #12]
 80043e4:	6126      	str	r6, [r4, #16]
 80043e6:	444e      	add	r6, r9
 80043e8:	6026      	str	r6, [r4, #0]
 80043ea:	463e      	mov	r6, r7
 80043ec:	6165      	str	r5, [r4, #20]
 80043ee:	eba5 0509 	sub.w	r5, r5, r9
 80043f2:	60a5      	str	r5, [r4, #8]
 80043f4:	42be      	cmp	r6, r7
 80043f6:	d900      	bls.n	80043fa <__ssputs_r+0x86>
 80043f8:	463e      	mov	r6, r7
 80043fa:	4632      	mov	r2, r6
 80043fc:	4641      	mov	r1, r8
 80043fe:	6820      	ldr	r0, [r4, #0]
 8004400:	f000 fe82 	bl	8005108 <memmove>
 8004404:	68a3      	ldr	r3, [r4, #8]
 8004406:	2000      	movs	r0, #0
 8004408:	1b9b      	subs	r3, r3, r6
 800440a:	60a3      	str	r3, [r4, #8]
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	4433      	add	r3, r6
 8004410:	6023      	str	r3, [r4, #0]
 8004412:	e7db      	b.n	80043cc <__ssputs_r+0x58>
 8004414:	462a      	mov	r2, r5
 8004416:	f000 fe91 	bl	800513c <_realloc_r>
 800441a:	4606      	mov	r6, r0
 800441c:	2800      	cmp	r0, #0
 800441e:	d1e1      	bne.n	80043e4 <__ssputs_r+0x70>
 8004420:	4650      	mov	r0, sl
 8004422:	6921      	ldr	r1, [r4, #16]
 8004424:	f7ff fc7c 	bl	8003d20 <_free_r>
 8004428:	e7c7      	b.n	80043ba <__ssputs_r+0x46>
	...

0800442c <_svfiprintf_r>:
 800442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004430:	4698      	mov	r8, r3
 8004432:	898b      	ldrh	r3, [r1, #12]
 8004434:	4607      	mov	r7, r0
 8004436:	061b      	lsls	r3, r3, #24
 8004438:	460d      	mov	r5, r1
 800443a:	4614      	mov	r4, r2
 800443c:	b09d      	sub	sp, #116	; 0x74
 800443e:	d50e      	bpl.n	800445e <_svfiprintf_r+0x32>
 8004440:	690b      	ldr	r3, [r1, #16]
 8004442:	b963      	cbnz	r3, 800445e <_svfiprintf_r+0x32>
 8004444:	2140      	movs	r1, #64	; 0x40
 8004446:	f7ff fcd3 	bl	8003df0 <_malloc_r>
 800444a:	6028      	str	r0, [r5, #0]
 800444c:	6128      	str	r0, [r5, #16]
 800444e:	b920      	cbnz	r0, 800445a <_svfiprintf_r+0x2e>
 8004450:	230c      	movs	r3, #12
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	f04f 30ff 	mov.w	r0, #4294967295
 8004458:	e0d1      	b.n	80045fe <_svfiprintf_r+0x1d2>
 800445a:	2340      	movs	r3, #64	; 0x40
 800445c:	616b      	str	r3, [r5, #20]
 800445e:	2300      	movs	r3, #0
 8004460:	9309      	str	r3, [sp, #36]	; 0x24
 8004462:	2320      	movs	r3, #32
 8004464:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004468:	2330      	movs	r3, #48	; 0x30
 800446a:	f04f 0901 	mov.w	r9, #1
 800446e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004472:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004618 <_svfiprintf_r+0x1ec>
 8004476:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800447a:	4623      	mov	r3, r4
 800447c:	469a      	mov	sl, r3
 800447e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004482:	b10a      	cbz	r2, 8004488 <_svfiprintf_r+0x5c>
 8004484:	2a25      	cmp	r2, #37	; 0x25
 8004486:	d1f9      	bne.n	800447c <_svfiprintf_r+0x50>
 8004488:	ebba 0b04 	subs.w	fp, sl, r4
 800448c:	d00b      	beq.n	80044a6 <_svfiprintf_r+0x7a>
 800448e:	465b      	mov	r3, fp
 8004490:	4622      	mov	r2, r4
 8004492:	4629      	mov	r1, r5
 8004494:	4638      	mov	r0, r7
 8004496:	f7ff ff6d 	bl	8004374 <__ssputs_r>
 800449a:	3001      	adds	r0, #1
 800449c:	f000 80aa 	beq.w	80045f4 <_svfiprintf_r+0x1c8>
 80044a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044a2:	445a      	add	r2, fp
 80044a4:	9209      	str	r2, [sp, #36]	; 0x24
 80044a6:	f89a 3000 	ldrb.w	r3, [sl]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80a2 	beq.w	80045f4 <_svfiprintf_r+0x1c8>
 80044b0:	2300      	movs	r3, #0
 80044b2:	f04f 32ff 	mov.w	r2, #4294967295
 80044b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044ba:	f10a 0a01 	add.w	sl, sl, #1
 80044be:	9304      	str	r3, [sp, #16]
 80044c0:	9307      	str	r3, [sp, #28]
 80044c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044c6:	931a      	str	r3, [sp, #104]	; 0x68
 80044c8:	4654      	mov	r4, sl
 80044ca:	2205      	movs	r2, #5
 80044cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d0:	4851      	ldr	r0, [pc, #324]	; (8004618 <_svfiprintf_r+0x1ec>)
 80044d2:	f000 fdfd 	bl	80050d0 <memchr>
 80044d6:	9a04      	ldr	r2, [sp, #16]
 80044d8:	b9d8      	cbnz	r0, 8004512 <_svfiprintf_r+0xe6>
 80044da:	06d0      	lsls	r0, r2, #27
 80044dc:	bf44      	itt	mi
 80044de:	2320      	movmi	r3, #32
 80044e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044e4:	0711      	lsls	r1, r2, #28
 80044e6:	bf44      	itt	mi
 80044e8:	232b      	movmi	r3, #43	; 0x2b
 80044ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ee:	f89a 3000 	ldrb.w	r3, [sl]
 80044f2:	2b2a      	cmp	r3, #42	; 0x2a
 80044f4:	d015      	beq.n	8004522 <_svfiprintf_r+0xf6>
 80044f6:	4654      	mov	r4, sl
 80044f8:	2000      	movs	r0, #0
 80044fa:	f04f 0c0a 	mov.w	ip, #10
 80044fe:	9a07      	ldr	r2, [sp, #28]
 8004500:	4621      	mov	r1, r4
 8004502:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004506:	3b30      	subs	r3, #48	; 0x30
 8004508:	2b09      	cmp	r3, #9
 800450a:	d94e      	bls.n	80045aa <_svfiprintf_r+0x17e>
 800450c:	b1b0      	cbz	r0, 800453c <_svfiprintf_r+0x110>
 800450e:	9207      	str	r2, [sp, #28]
 8004510:	e014      	b.n	800453c <_svfiprintf_r+0x110>
 8004512:	eba0 0308 	sub.w	r3, r0, r8
 8004516:	fa09 f303 	lsl.w	r3, r9, r3
 800451a:	4313      	orrs	r3, r2
 800451c:	46a2      	mov	sl, r4
 800451e:	9304      	str	r3, [sp, #16]
 8004520:	e7d2      	b.n	80044c8 <_svfiprintf_r+0x9c>
 8004522:	9b03      	ldr	r3, [sp, #12]
 8004524:	1d19      	adds	r1, r3, #4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	9103      	str	r1, [sp, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	bfbb      	ittet	lt
 800452e:	425b      	neglt	r3, r3
 8004530:	f042 0202 	orrlt.w	r2, r2, #2
 8004534:	9307      	strge	r3, [sp, #28]
 8004536:	9307      	strlt	r3, [sp, #28]
 8004538:	bfb8      	it	lt
 800453a:	9204      	strlt	r2, [sp, #16]
 800453c:	7823      	ldrb	r3, [r4, #0]
 800453e:	2b2e      	cmp	r3, #46	; 0x2e
 8004540:	d10c      	bne.n	800455c <_svfiprintf_r+0x130>
 8004542:	7863      	ldrb	r3, [r4, #1]
 8004544:	2b2a      	cmp	r3, #42	; 0x2a
 8004546:	d135      	bne.n	80045b4 <_svfiprintf_r+0x188>
 8004548:	9b03      	ldr	r3, [sp, #12]
 800454a:	3402      	adds	r4, #2
 800454c:	1d1a      	adds	r2, r3, #4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	9203      	str	r2, [sp, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	bfb8      	it	lt
 8004556:	f04f 33ff 	movlt.w	r3, #4294967295
 800455a:	9305      	str	r3, [sp, #20]
 800455c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800461c <_svfiprintf_r+0x1f0>
 8004560:	2203      	movs	r2, #3
 8004562:	4650      	mov	r0, sl
 8004564:	7821      	ldrb	r1, [r4, #0]
 8004566:	f000 fdb3 	bl	80050d0 <memchr>
 800456a:	b140      	cbz	r0, 800457e <_svfiprintf_r+0x152>
 800456c:	2340      	movs	r3, #64	; 0x40
 800456e:	eba0 000a 	sub.w	r0, r0, sl
 8004572:	fa03 f000 	lsl.w	r0, r3, r0
 8004576:	9b04      	ldr	r3, [sp, #16]
 8004578:	3401      	adds	r4, #1
 800457a:	4303      	orrs	r3, r0
 800457c:	9304      	str	r3, [sp, #16]
 800457e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004582:	2206      	movs	r2, #6
 8004584:	4826      	ldr	r0, [pc, #152]	; (8004620 <_svfiprintf_r+0x1f4>)
 8004586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800458a:	f000 fda1 	bl	80050d0 <memchr>
 800458e:	2800      	cmp	r0, #0
 8004590:	d038      	beq.n	8004604 <_svfiprintf_r+0x1d8>
 8004592:	4b24      	ldr	r3, [pc, #144]	; (8004624 <_svfiprintf_r+0x1f8>)
 8004594:	bb1b      	cbnz	r3, 80045de <_svfiprintf_r+0x1b2>
 8004596:	9b03      	ldr	r3, [sp, #12]
 8004598:	3307      	adds	r3, #7
 800459a:	f023 0307 	bic.w	r3, r3, #7
 800459e:	3308      	adds	r3, #8
 80045a0:	9303      	str	r3, [sp, #12]
 80045a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a4:	4433      	add	r3, r6
 80045a6:	9309      	str	r3, [sp, #36]	; 0x24
 80045a8:	e767      	b.n	800447a <_svfiprintf_r+0x4e>
 80045aa:	460c      	mov	r4, r1
 80045ac:	2001      	movs	r0, #1
 80045ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80045b2:	e7a5      	b.n	8004500 <_svfiprintf_r+0xd4>
 80045b4:	2300      	movs	r3, #0
 80045b6:	f04f 0c0a 	mov.w	ip, #10
 80045ba:	4619      	mov	r1, r3
 80045bc:	3401      	adds	r4, #1
 80045be:	9305      	str	r3, [sp, #20]
 80045c0:	4620      	mov	r0, r4
 80045c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045c6:	3a30      	subs	r2, #48	; 0x30
 80045c8:	2a09      	cmp	r2, #9
 80045ca:	d903      	bls.n	80045d4 <_svfiprintf_r+0x1a8>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0c5      	beq.n	800455c <_svfiprintf_r+0x130>
 80045d0:	9105      	str	r1, [sp, #20]
 80045d2:	e7c3      	b.n	800455c <_svfiprintf_r+0x130>
 80045d4:	4604      	mov	r4, r0
 80045d6:	2301      	movs	r3, #1
 80045d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80045dc:	e7f0      	b.n	80045c0 <_svfiprintf_r+0x194>
 80045de:	ab03      	add	r3, sp, #12
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	462a      	mov	r2, r5
 80045e4:	4638      	mov	r0, r7
 80045e6:	4b10      	ldr	r3, [pc, #64]	; (8004628 <_svfiprintf_r+0x1fc>)
 80045e8:	a904      	add	r1, sp, #16
 80045ea:	f3af 8000 	nop.w
 80045ee:	1c42      	adds	r2, r0, #1
 80045f0:	4606      	mov	r6, r0
 80045f2:	d1d6      	bne.n	80045a2 <_svfiprintf_r+0x176>
 80045f4:	89ab      	ldrh	r3, [r5, #12]
 80045f6:	065b      	lsls	r3, r3, #25
 80045f8:	f53f af2c 	bmi.w	8004454 <_svfiprintf_r+0x28>
 80045fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045fe:	b01d      	add	sp, #116	; 0x74
 8004600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004604:	ab03      	add	r3, sp, #12
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	462a      	mov	r2, r5
 800460a:	4638      	mov	r0, r7
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <_svfiprintf_r+0x1fc>)
 800460e:	a904      	add	r1, sp, #16
 8004610:	f000 f9d4 	bl	80049bc <_printf_i>
 8004614:	e7eb      	b.n	80045ee <_svfiprintf_r+0x1c2>
 8004616:	bf00      	nop
 8004618:	080055a4 	.word	0x080055a4
 800461c:	080055aa 	.word	0x080055aa
 8004620:	080055ae 	.word	0x080055ae
 8004624:	00000000 	.word	0x00000000
 8004628:	08004375 	.word	0x08004375

0800462c <__sfputc_r>:
 800462c:	6893      	ldr	r3, [r2, #8]
 800462e:	b410      	push	{r4}
 8004630:	3b01      	subs	r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	6093      	str	r3, [r2, #8]
 8004636:	da07      	bge.n	8004648 <__sfputc_r+0x1c>
 8004638:	6994      	ldr	r4, [r2, #24]
 800463a:	42a3      	cmp	r3, r4
 800463c:	db01      	blt.n	8004642 <__sfputc_r+0x16>
 800463e:	290a      	cmp	r1, #10
 8004640:	d102      	bne.n	8004648 <__sfputc_r+0x1c>
 8004642:	bc10      	pop	{r4}
 8004644:	f000 bb24 	b.w	8004c90 <__swbuf_r>
 8004648:	6813      	ldr	r3, [r2, #0]
 800464a:	1c58      	adds	r0, r3, #1
 800464c:	6010      	str	r0, [r2, #0]
 800464e:	7019      	strb	r1, [r3, #0]
 8004650:	4608      	mov	r0, r1
 8004652:	bc10      	pop	{r4}
 8004654:	4770      	bx	lr

08004656 <__sfputs_r>:
 8004656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004658:	4606      	mov	r6, r0
 800465a:	460f      	mov	r7, r1
 800465c:	4614      	mov	r4, r2
 800465e:	18d5      	adds	r5, r2, r3
 8004660:	42ac      	cmp	r4, r5
 8004662:	d101      	bne.n	8004668 <__sfputs_r+0x12>
 8004664:	2000      	movs	r0, #0
 8004666:	e007      	b.n	8004678 <__sfputs_r+0x22>
 8004668:	463a      	mov	r2, r7
 800466a:	4630      	mov	r0, r6
 800466c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004670:	f7ff ffdc 	bl	800462c <__sfputc_r>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d1f3      	bne.n	8004660 <__sfputs_r+0xa>
 8004678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800467c <_vfiprintf_r>:
 800467c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004680:	460d      	mov	r5, r1
 8004682:	4614      	mov	r4, r2
 8004684:	4698      	mov	r8, r3
 8004686:	4606      	mov	r6, r0
 8004688:	b09d      	sub	sp, #116	; 0x74
 800468a:	b118      	cbz	r0, 8004694 <_vfiprintf_r+0x18>
 800468c:	6983      	ldr	r3, [r0, #24]
 800468e:	b90b      	cbnz	r3, 8004694 <_vfiprintf_r+0x18>
 8004690:	f7ff fdb2 	bl	80041f8 <__sinit>
 8004694:	4b89      	ldr	r3, [pc, #548]	; (80048bc <_vfiprintf_r+0x240>)
 8004696:	429d      	cmp	r5, r3
 8004698:	d11b      	bne.n	80046d2 <_vfiprintf_r+0x56>
 800469a:	6875      	ldr	r5, [r6, #4]
 800469c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800469e:	07d9      	lsls	r1, r3, #31
 80046a0:	d405      	bmi.n	80046ae <_vfiprintf_r+0x32>
 80046a2:	89ab      	ldrh	r3, [r5, #12]
 80046a4:	059a      	lsls	r2, r3, #22
 80046a6:	d402      	bmi.n	80046ae <_vfiprintf_r+0x32>
 80046a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046aa:	f7ff fe55 	bl	8004358 <__retarget_lock_acquire_recursive>
 80046ae:	89ab      	ldrh	r3, [r5, #12]
 80046b0:	071b      	lsls	r3, r3, #28
 80046b2:	d501      	bpl.n	80046b8 <_vfiprintf_r+0x3c>
 80046b4:	692b      	ldr	r3, [r5, #16]
 80046b6:	b9eb      	cbnz	r3, 80046f4 <_vfiprintf_r+0x78>
 80046b8:	4629      	mov	r1, r5
 80046ba:	4630      	mov	r0, r6
 80046bc:	f000 fb4c 	bl	8004d58 <__swsetup_r>
 80046c0:	b1c0      	cbz	r0, 80046f4 <_vfiprintf_r+0x78>
 80046c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046c4:	07dc      	lsls	r4, r3, #31
 80046c6:	d50e      	bpl.n	80046e6 <_vfiprintf_r+0x6a>
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295
 80046cc:	b01d      	add	sp, #116	; 0x74
 80046ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d2:	4b7b      	ldr	r3, [pc, #492]	; (80048c0 <_vfiprintf_r+0x244>)
 80046d4:	429d      	cmp	r5, r3
 80046d6:	d101      	bne.n	80046dc <_vfiprintf_r+0x60>
 80046d8:	68b5      	ldr	r5, [r6, #8]
 80046da:	e7df      	b.n	800469c <_vfiprintf_r+0x20>
 80046dc:	4b79      	ldr	r3, [pc, #484]	; (80048c4 <_vfiprintf_r+0x248>)
 80046de:	429d      	cmp	r5, r3
 80046e0:	bf08      	it	eq
 80046e2:	68f5      	ldreq	r5, [r6, #12]
 80046e4:	e7da      	b.n	800469c <_vfiprintf_r+0x20>
 80046e6:	89ab      	ldrh	r3, [r5, #12]
 80046e8:	0598      	lsls	r0, r3, #22
 80046ea:	d4ed      	bmi.n	80046c8 <_vfiprintf_r+0x4c>
 80046ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046ee:	f7ff fe34 	bl	800435a <__retarget_lock_release_recursive>
 80046f2:	e7e9      	b.n	80046c8 <_vfiprintf_r+0x4c>
 80046f4:	2300      	movs	r3, #0
 80046f6:	9309      	str	r3, [sp, #36]	; 0x24
 80046f8:	2320      	movs	r3, #32
 80046fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046fe:	2330      	movs	r3, #48	; 0x30
 8004700:	f04f 0901 	mov.w	r9, #1
 8004704:	f8cd 800c 	str.w	r8, [sp, #12]
 8004708:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80048c8 <_vfiprintf_r+0x24c>
 800470c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004710:	4623      	mov	r3, r4
 8004712:	469a      	mov	sl, r3
 8004714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004718:	b10a      	cbz	r2, 800471e <_vfiprintf_r+0xa2>
 800471a:	2a25      	cmp	r2, #37	; 0x25
 800471c:	d1f9      	bne.n	8004712 <_vfiprintf_r+0x96>
 800471e:	ebba 0b04 	subs.w	fp, sl, r4
 8004722:	d00b      	beq.n	800473c <_vfiprintf_r+0xc0>
 8004724:	465b      	mov	r3, fp
 8004726:	4622      	mov	r2, r4
 8004728:	4629      	mov	r1, r5
 800472a:	4630      	mov	r0, r6
 800472c:	f7ff ff93 	bl	8004656 <__sfputs_r>
 8004730:	3001      	adds	r0, #1
 8004732:	f000 80aa 	beq.w	800488a <_vfiprintf_r+0x20e>
 8004736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004738:	445a      	add	r2, fp
 800473a:	9209      	str	r2, [sp, #36]	; 0x24
 800473c:	f89a 3000 	ldrb.w	r3, [sl]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80a2 	beq.w	800488a <_vfiprintf_r+0x20e>
 8004746:	2300      	movs	r3, #0
 8004748:	f04f 32ff 	mov.w	r2, #4294967295
 800474c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004750:	f10a 0a01 	add.w	sl, sl, #1
 8004754:	9304      	str	r3, [sp, #16]
 8004756:	9307      	str	r3, [sp, #28]
 8004758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800475c:	931a      	str	r3, [sp, #104]	; 0x68
 800475e:	4654      	mov	r4, sl
 8004760:	2205      	movs	r2, #5
 8004762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004766:	4858      	ldr	r0, [pc, #352]	; (80048c8 <_vfiprintf_r+0x24c>)
 8004768:	f000 fcb2 	bl	80050d0 <memchr>
 800476c:	9a04      	ldr	r2, [sp, #16]
 800476e:	b9d8      	cbnz	r0, 80047a8 <_vfiprintf_r+0x12c>
 8004770:	06d1      	lsls	r1, r2, #27
 8004772:	bf44      	itt	mi
 8004774:	2320      	movmi	r3, #32
 8004776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800477a:	0713      	lsls	r3, r2, #28
 800477c:	bf44      	itt	mi
 800477e:	232b      	movmi	r3, #43	; 0x2b
 8004780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004784:	f89a 3000 	ldrb.w	r3, [sl]
 8004788:	2b2a      	cmp	r3, #42	; 0x2a
 800478a:	d015      	beq.n	80047b8 <_vfiprintf_r+0x13c>
 800478c:	4654      	mov	r4, sl
 800478e:	2000      	movs	r0, #0
 8004790:	f04f 0c0a 	mov.w	ip, #10
 8004794:	9a07      	ldr	r2, [sp, #28]
 8004796:	4621      	mov	r1, r4
 8004798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800479c:	3b30      	subs	r3, #48	; 0x30
 800479e:	2b09      	cmp	r3, #9
 80047a0:	d94e      	bls.n	8004840 <_vfiprintf_r+0x1c4>
 80047a2:	b1b0      	cbz	r0, 80047d2 <_vfiprintf_r+0x156>
 80047a4:	9207      	str	r2, [sp, #28]
 80047a6:	e014      	b.n	80047d2 <_vfiprintf_r+0x156>
 80047a8:	eba0 0308 	sub.w	r3, r0, r8
 80047ac:	fa09 f303 	lsl.w	r3, r9, r3
 80047b0:	4313      	orrs	r3, r2
 80047b2:	46a2      	mov	sl, r4
 80047b4:	9304      	str	r3, [sp, #16]
 80047b6:	e7d2      	b.n	800475e <_vfiprintf_r+0xe2>
 80047b8:	9b03      	ldr	r3, [sp, #12]
 80047ba:	1d19      	adds	r1, r3, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	9103      	str	r1, [sp, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bfbb      	ittet	lt
 80047c4:	425b      	neglt	r3, r3
 80047c6:	f042 0202 	orrlt.w	r2, r2, #2
 80047ca:	9307      	strge	r3, [sp, #28]
 80047cc:	9307      	strlt	r3, [sp, #28]
 80047ce:	bfb8      	it	lt
 80047d0:	9204      	strlt	r2, [sp, #16]
 80047d2:	7823      	ldrb	r3, [r4, #0]
 80047d4:	2b2e      	cmp	r3, #46	; 0x2e
 80047d6:	d10c      	bne.n	80047f2 <_vfiprintf_r+0x176>
 80047d8:	7863      	ldrb	r3, [r4, #1]
 80047da:	2b2a      	cmp	r3, #42	; 0x2a
 80047dc:	d135      	bne.n	800484a <_vfiprintf_r+0x1ce>
 80047de:	9b03      	ldr	r3, [sp, #12]
 80047e0:	3402      	adds	r4, #2
 80047e2:	1d1a      	adds	r2, r3, #4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	9203      	str	r2, [sp, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bfb8      	it	lt
 80047ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80047f0:	9305      	str	r3, [sp, #20]
 80047f2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80048cc <_vfiprintf_r+0x250>
 80047f6:	2203      	movs	r2, #3
 80047f8:	4650      	mov	r0, sl
 80047fa:	7821      	ldrb	r1, [r4, #0]
 80047fc:	f000 fc68 	bl	80050d0 <memchr>
 8004800:	b140      	cbz	r0, 8004814 <_vfiprintf_r+0x198>
 8004802:	2340      	movs	r3, #64	; 0x40
 8004804:	eba0 000a 	sub.w	r0, r0, sl
 8004808:	fa03 f000 	lsl.w	r0, r3, r0
 800480c:	9b04      	ldr	r3, [sp, #16]
 800480e:	3401      	adds	r4, #1
 8004810:	4303      	orrs	r3, r0
 8004812:	9304      	str	r3, [sp, #16]
 8004814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004818:	2206      	movs	r2, #6
 800481a:	482d      	ldr	r0, [pc, #180]	; (80048d0 <_vfiprintf_r+0x254>)
 800481c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004820:	f000 fc56 	bl	80050d0 <memchr>
 8004824:	2800      	cmp	r0, #0
 8004826:	d03f      	beq.n	80048a8 <_vfiprintf_r+0x22c>
 8004828:	4b2a      	ldr	r3, [pc, #168]	; (80048d4 <_vfiprintf_r+0x258>)
 800482a:	bb1b      	cbnz	r3, 8004874 <_vfiprintf_r+0x1f8>
 800482c:	9b03      	ldr	r3, [sp, #12]
 800482e:	3307      	adds	r3, #7
 8004830:	f023 0307 	bic.w	r3, r3, #7
 8004834:	3308      	adds	r3, #8
 8004836:	9303      	str	r3, [sp, #12]
 8004838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800483a:	443b      	add	r3, r7
 800483c:	9309      	str	r3, [sp, #36]	; 0x24
 800483e:	e767      	b.n	8004710 <_vfiprintf_r+0x94>
 8004840:	460c      	mov	r4, r1
 8004842:	2001      	movs	r0, #1
 8004844:	fb0c 3202 	mla	r2, ip, r2, r3
 8004848:	e7a5      	b.n	8004796 <_vfiprintf_r+0x11a>
 800484a:	2300      	movs	r3, #0
 800484c:	f04f 0c0a 	mov.w	ip, #10
 8004850:	4619      	mov	r1, r3
 8004852:	3401      	adds	r4, #1
 8004854:	9305      	str	r3, [sp, #20]
 8004856:	4620      	mov	r0, r4
 8004858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800485c:	3a30      	subs	r2, #48	; 0x30
 800485e:	2a09      	cmp	r2, #9
 8004860:	d903      	bls.n	800486a <_vfiprintf_r+0x1ee>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0c5      	beq.n	80047f2 <_vfiprintf_r+0x176>
 8004866:	9105      	str	r1, [sp, #20]
 8004868:	e7c3      	b.n	80047f2 <_vfiprintf_r+0x176>
 800486a:	4604      	mov	r4, r0
 800486c:	2301      	movs	r3, #1
 800486e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004872:	e7f0      	b.n	8004856 <_vfiprintf_r+0x1da>
 8004874:	ab03      	add	r3, sp, #12
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	462a      	mov	r2, r5
 800487a:	4630      	mov	r0, r6
 800487c:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <_vfiprintf_r+0x25c>)
 800487e:	a904      	add	r1, sp, #16
 8004880:	f3af 8000 	nop.w
 8004884:	4607      	mov	r7, r0
 8004886:	1c78      	adds	r0, r7, #1
 8004888:	d1d6      	bne.n	8004838 <_vfiprintf_r+0x1bc>
 800488a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800488c:	07d9      	lsls	r1, r3, #31
 800488e:	d405      	bmi.n	800489c <_vfiprintf_r+0x220>
 8004890:	89ab      	ldrh	r3, [r5, #12]
 8004892:	059a      	lsls	r2, r3, #22
 8004894:	d402      	bmi.n	800489c <_vfiprintf_r+0x220>
 8004896:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004898:	f7ff fd5f 	bl	800435a <__retarget_lock_release_recursive>
 800489c:	89ab      	ldrh	r3, [r5, #12]
 800489e:	065b      	lsls	r3, r3, #25
 80048a0:	f53f af12 	bmi.w	80046c8 <_vfiprintf_r+0x4c>
 80048a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048a6:	e711      	b.n	80046cc <_vfiprintf_r+0x50>
 80048a8:	ab03      	add	r3, sp, #12
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	462a      	mov	r2, r5
 80048ae:	4630      	mov	r0, r6
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <_vfiprintf_r+0x25c>)
 80048b2:	a904      	add	r1, sp, #16
 80048b4:	f000 f882 	bl	80049bc <_printf_i>
 80048b8:	e7e4      	b.n	8004884 <_vfiprintf_r+0x208>
 80048ba:	bf00      	nop
 80048bc:	08005564 	.word	0x08005564
 80048c0:	08005584 	.word	0x08005584
 80048c4:	08005544 	.word	0x08005544
 80048c8:	080055a4 	.word	0x080055a4
 80048cc:	080055aa 	.word	0x080055aa
 80048d0:	080055ae 	.word	0x080055ae
 80048d4:	00000000 	.word	0x00000000
 80048d8:	08004657 	.word	0x08004657

080048dc <_printf_common>:
 80048dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e0:	4616      	mov	r6, r2
 80048e2:	4699      	mov	r9, r3
 80048e4:	688a      	ldr	r2, [r1, #8]
 80048e6:	690b      	ldr	r3, [r1, #16]
 80048e8:	4607      	mov	r7, r0
 80048ea:	4293      	cmp	r3, r2
 80048ec:	bfb8      	it	lt
 80048ee:	4613      	movlt	r3, r2
 80048f0:	6033      	str	r3, [r6, #0]
 80048f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048f6:	460c      	mov	r4, r1
 80048f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048fc:	b10a      	cbz	r2, 8004902 <_printf_common+0x26>
 80048fe:	3301      	adds	r3, #1
 8004900:	6033      	str	r3, [r6, #0]
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	0699      	lsls	r1, r3, #26
 8004906:	bf42      	ittt	mi
 8004908:	6833      	ldrmi	r3, [r6, #0]
 800490a:	3302      	addmi	r3, #2
 800490c:	6033      	strmi	r3, [r6, #0]
 800490e:	6825      	ldr	r5, [r4, #0]
 8004910:	f015 0506 	ands.w	r5, r5, #6
 8004914:	d106      	bne.n	8004924 <_printf_common+0x48>
 8004916:	f104 0a19 	add.w	sl, r4, #25
 800491a:	68e3      	ldr	r3, [r4, #12]
 800491c:	6832      	ldr	r2, [r6, #0]
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	42ab      	cmp	r3, r5
 8004922:	dc28      	bgt.n	8004976 <_printf_common+0x9a>
 8004924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004928:	1e13      	subs	r3, r2, #0
 800492a:	6822      	ldr	r2, [r4, #0]
 800492c:	bf18      	it	ne
 800492e:	2301      	movne	r3, #1
 8004930:	0692      	lsls	r2, r2, #26
 8004932:	d42d      	bmi.n	8004990 <_printf_common+0xb4>
 8004934:	4649      	mov	r1, r9
 8004936:	4638      	mov	r0, r7
 8004938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800493c:	47c0      	blx	r8
 800493e:	3001      	adds	r0, #1
 8004940:	d020      	beq.n	8004984 <_printf_common+0xa8>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	68e5      	ldr	r5, [r4, #12]
 8004946:	f003 0306 	and.w	r3, r3, #6
 800494a:	2b04      	cmp	r3, #4
 800494c:	bf18      	it	ne
 800494e:	2500      	movne	r5, #0
 8004950:	6832      	ldr	r2, [r6, #0]
 8004952:	f04f 0600 	mov.w	r6, #0
 8004956:	68a3      	ldr	r3, [r4, #8]
 8004958:	bf08      	it	eq
 800495a:	1aad      	subeq	r5, r5, r2
 800495c:	6922      	ldr	r2, [r4, #16]
 800495e:	bf08      	it	eq
 8004960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004964:	4293      	cmp	r3, r2
 8004966:	bfc4      	itt	gt
 8004968:	1a9b      	subgt	r3, r3, r2
 800496a:	18ed      	addgt	r5, r5, r3
 800496c:	341a      	adds	r4, #26
 800496e:	42b5      	cmp	r5, r6
 8004970:	d11a      	bne.n	80049a8 <_printf_common+0xcc>
 8004972:	2000      	movs	r0, #0
 8004974:	e008      	b.n	8004988 <_printf_common+0xac>
 8004976:	2301      	movs	r3, #1
 8004978:	4652      	mov	r2, sl
 800497a:	4649      	mov	r1, r9
 800497c:	4638      	mov	r0, r7
 800497e:	47c0      	blx	r8
 8004980:	3001      	adds	r0, #1
 8004982:	d103      	bne.n	800498c <_printf_common+0xb0>
 8004984:	f04f 30ff 	mov.w	r0, #4294967295
 8004988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800498c:	3501      	adds	r5, #1
 800498e:	e7c4      	b.n	800491a <_printf_common+0x3e>
 8004990:	2030      	movs	r0, #48	; 0x30
 8004992:	18e1      	adds	r1, r4, r3
 8004994:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800499e:	4422      	add	r2, r4
 80049a0:	3302      	adds	r3, #2
 80049a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049a6:	e7c5      	b.n	8004934 <_printf_common+0x58>
 80049a8:	2301      	movs	r3, #1
 80049aa:	4622      	mov	r2, r4
 80049ac:	4649      	mov	r1, r9
 80049ae:	4638      	mov	r0, r7
 80049b0:	47c0      	blx	r8
 80049b2:	3001      	adds	r0, #1
 80049b4:	d0e6      	beq.n	8004984 <_printf_common+0xa8>
 80049b6:	3601      	adds	r6, #1
 80049b8:	e7d9      	b.n	800496e <_printf_common+0x92>
	...

080049bc <_printf_i>:
 80049bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049c0:	7e0f      	ldrb	r7, [r1, #24]
 80049c2:	4691      	mov	r9, r2
 80049c4:	2f78      	cmp	r7, #120	; 0x78
 80049c6:	4680      	mov	r8, r0
 80049c8:	460c      	mov	r4, r1
 80049ca:	469a      	mov	sl, r3
 80049cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049d2:	d807      	bhi.n	80049e4 <_printf_i+0x28>
 80049d4:	2f62      	cmp	r7, #98	; 0x62
 80049d6:	d80a      	bhi.n	80049ee <_printf_i+0x32>
 80049d8:	2f00      	cmp	r7, #0
 80049da:	f000 80d9 	beq.w	8004b90 <_printf_i+0x1d4>
 80049de:	2f58      	cmp	r7, #88	; 0x58
 80049e0:	f000 80a4 	beq.w	8004b2c <_printf_i+0x170>
 80049e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049ec:	e03a      	b.n	8004a64 <_printf_i+0xa8>
 80049ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049f2:	2b15      	cmp	r3, #21
 80049f4:	d8f6      	bhi.n	80049e4 <_printf_i+0x28>
 80049f6:	a101      	add	r1, pc, #4	; (adr r1, 80049fc <_printf_i+0x40>)
 80049f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049fc:	08004a55 	.word	0x08004a55
 8004a00:	08004a69 	.word	0x08004a69
 8004a04:	080049e5 	.word	0x080049e5
 8004a08:	080049e5 	.word	0x080049e5
 8004a0c:	080049e5 	.word	0x080049e5
 8004a10:	080049e5 	.word	0x080049e5
 8004a14:	08004a69 	.word	0x08004a69
 8004a18:	080049e5 	.word	0x080049e5
 8004a1c:	080049e5 	.word	0x080049e5
 8004a20:	080049e5 	.word	0x080049e5
 8004a24:	080049e5 	.word	0x080049e5
 8004a28:	08004b77 	.word	0x08004b77
 8004a2c:	08004a99 	.word	0x08004a99
 8004a30:	08004b59 	.word	0x08004b59
 8004a34:	080049e5 	.word	0x080049e5
 8004a38:	080049e5 	.word	0x080049e5
 8004a3c:	08004b99 	.word	0x08004b99
 8004a40:	080049e5 	.word	0x080049e5
 8004a44:	08004a99 	.word	0x08004a99
 8004a48:	080049e5 	.word	0x080049e5
 8004a4c:	080049e5 	.word	0x080049e5
 8004a50:	08004b61 	.word	0x08004b61
 8004a54:	682b      	ldr	r3, [r5, #0]
 8004a56:	1d1a      	adds	r2, r3, #4
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	602a      	str	r2, [r5, #0]
 8004a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0a4      	b.n	8004bb2 <_printf_i+0x1f6>
 8004a68:	6820      	ldr	r0, [r4, #0]
 8004a6a:	6829      	ldr	r1, [r5, #0]
 8004a6c:	0606      	lsls	r6, r0, #24
 8004a6e:	f101 0304 	add.w	r3, r1, #4
 8004a72:	d50a      	bpl.n	8004a8a <_printf_i+0xce>
 8004a74:	680e      	ldr	r6, [r1, #0]
 8004a76:	602b      	str	r3, [r5, #0]
 8004a78:	2e00      	cmp	r6, #0
 8004a7a:	da03      	bge.n	8004a84 <_printf_i+0xc8>
 8004a7c:	232d      	movs	r3, #45	; 0x2d
 8004a7e:	4276      	negs	r6, r6
 8004a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a84:	230a      	movs	r3, #10
 8004a86:	485e      	ldr	r0, [pc, #376]	; (8004c00 <_printf_i+0x244>)
 8004a88:	e019      	b.n	8004abe <_printf_i+0x102>
 8004a8a:	680e      	ldr	r6, [r1, #0]
 8004a8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a90:	602b      	str	r3, [r5, #0]
 8004a92:	bf18      	it	ne
 8004a94:	b236      	sxthne	r6, r6
 8004a96:	e7ef      	b.n	8004a78 <_printf_i+0xbc>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	6820      	ldr	r0, [r4, #0]
 8004a9c:	1d19      	adds	r1, r3, #4
 8004a9e:	6029      	str	r1, [r5, #0]
 8004aa0:	0601      	lsls	r1, r0, #24
 8004aa2:	d501      	bpl.n	8004aa8 <_printf_i+0xec>
 8004aa4:	681e      	ldr	r6, [r3, #0]
 8004aa6:	e002      	b.n	8004aae <_printf_i+0xf2>
 8004aa8:	0646      	lsls	r6, r0, #25
 8004aaa:	d5fb      	bpl.n	8004aa4 <_printf_i+0xe8>
 8004aac:	881e      	ldrh	r6, [r3, #0]
 8004aae:	2f6f      	cmp	r7, #111	; 0x6f
 8004ab0:	bf0c      	ite	eq
 8004ab2:	2308      	moveq	r3, #8
 8004ab4:	230a      	movne	r3, #10
 8004ab6:	4852      	ldr	r0, [pc, #328]	; (8004c00 <_printf_i+0x244>)
 8004ab8:	2100      	movs	r1, #0
 8004aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004abe:	6865      	ldr	r5, [r4, #4]
 8004ac0:	2d00      	cmp	r5, #0
 8004ac2:	bfa8      	it	ge
 8004ac4:	6821      	ldrge	r1, [r4, #0]
 8004ac6:	60a5      	str	r5, [r4, #8]
 8004ac8:	bfa4      	itt	ge
 8004aca:	f021 0104 	bicge.w	r1, r1, #4
 8004ace:	6021      	strge	r1, [r4, #0]
 8004ad0:	b90e      	cbnz	r6, 8004ad6 <_printf_i+0x11a>
 8004ad2:	2d00      	cmp	r5, #0
 8004ad4:	d04d      	beq.n	8004b72 <_printf_i+0x1b6>
 8004ad6:	4615      	mov	r5, r2
 8004ad8:	fbb6 f1f3 	udiv	r1, r6, r3
 8004adc:	fb03 6711 	mls	r7, r3, r1, r6
 8004ae0:	5dc7      	ldrb	r7, [r0, r7]
 8004ae2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ae6:	4637      	mov	r7, r6
 8004ae8:	42bb      	cmp	r3, r7
 8004aea:	460e      	mov	r6, r1
 8004aec:	d9f4      	bls.n	8004ad8 <_printf_i+0x11c>
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d10b      	bne.n	8004b0a <_printf_i+0x14e>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	07de      	lsls	r6, r3, #31
 8004af6:	d508      	bpl.n	8004b0a <_printf_i+0x14e>
 8004af8:	6923      	ldr	r3, [r4, #16]
 8004afa:	6861      	ldr	r1, [r4, #4]
 8004afc:	4299      	cmp	r1, r3
 8004afe:	bfde      	ittt	le
 8004b00:	2330      	movle	r3, #48	; 0x30
 8004b02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b0a:	1b52      	subs	r2, r2, r5
 8004b0c:	6122      	str	r2, [r4, #16]
 8004b0e:	464b      	mov	r3, r9
 8004b10:	4621      	mov	r1, r4
 8004b12:	4640      	mov	r0, r8
 8004b14:	f8cd a000 	str.w	sl, [sp]
 8004b18:	aa03      	add	r2, sp, #12
 8004b1a:	f7ff fedf 	bl	80048dc <_printf_common>
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d14c      	bne.n	8004bbc <_printf_i+0x200>
 8004b22:	f04f 30ff 	mov.w	r0, #4294967295
 8004b26:	b004      	add	sp, #16
 8004b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2c:	4834      	ldr	r0, [pc, #208]	; (8004c00 <_printf_i+0x244>)
 8004b2e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b32:	6829      	ldr	r1, [r5, #0]
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b3a:	6029      	str	r1, [r5, #0]
 8004b3c:	061d      	lsls	r5, r3, #24
 8004b3e:	d514      	bpl.n	8004b6a <_printf_i+0x1ae>
 8004b40:	07df      	lsls	r7, r3, #31
 8004b42:	bf44      	itt	mi
 8004b44:	f043 0320 	orrmi.w	r3, r3, #32
 8004b48:	6023      	strmi	r3, [r4, #0]
 8004b4a:	b91e      	cbnz	r6, 8004b54 <_printf_i+0x198>
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	f023 0320 	bic.w	r3, r3, #32
 8004b52:	6023      	str	r3, [r4, #0]
 8004b54:	2310      	movs	r3, #16
 8004b56:	e7af      	b.n	8004ab8 <_printf_i+0xfc>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	f043 0320 	orr.w	r3, r3, #32
 8004b5e:	6023      	str	r3, [r4, #0]
 8004b60:	2378      	movs	r3, #120	; 0x78
 8004b62:	4828      	ldr	r0, [pc, #160]	; (8004c04 <_printf_i+0x248>)
 8004b64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b68:	e7e3      	b.n	8004b32 <_printf_i+0x176>
 8004b6a:	0659      	lsls	r1, r3, #25
 8004b6c:	bf48      	it	mi
 8004b6e:	b2b6      	uxthmi	r6, r6
 8004b70:	e7e6      	b.n	8004b40 <_printf_i+0x184>
 8004b72:	4615      	mov	r5, r2
 8004b74:	e7bb      	b.n	8004aee <_printf_i+0x132>
 8004b76:	682b      	ldr	r3, [r5, #0]
 8004b78:	6826      	ldr	r6, [r4, #0]
 8004b7a:	1d18      	adds	r0, r3, #4
 8004b7c:	6961      	ldr	r1, [r4, #20]
 8004b7e:	6028      	str	r0, [r5, #0]
 8004b80:	0635      	lsls	r5, r6, #24
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	d501      	bpl.n	8004b8a <_printf_i+0x1ce>
 8004b86:	6019      	str	r1, [r3, #0]
 8004b88:	e002      	b.n	8004b90 <_printf_i+0x1d4>
 8004b8a:	0670      	lsls	r0, r6, #25
 8004b8c:	d5fb      	bpl.n	8004b86 <_printf_i+0x1ca>
 8004b8e:	8019      	strh	r1, [r3, #0]
 8004b90:	2300      	movs	r3, #0
 8004b92:	4615      	mov	r5, r2
 8004b94:	6123      	str	r3, [r4, #16]
 8004b96:	e7ba      	b.n	8004b0e <_printf_i+0x152>
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	1d1a      	adds	r2, r3, #4
 8004b9e:	602a      	str	r2, [r5, #0]
 8004ba0:	681d      	ldr	r5, [r3, #0]
 8004ba2:	6862      	ldr	r2, [r4, #4]
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f000 fa93 	bl	80050d0 <memchr>
 8004baa:	b108      	cbz	r0, 8004bb0 <_printf_i+0x1f4>
 8004bac:	1b40      	subs	r0, r0, r5
 8004bae:	6060      	str	r0, [r4, #4]
 8004bb0:	6863      	ldr	r3, [r4, #4]
 8004bb2:	6123      	str	r3, [r4, #16]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bba:	e7a8      	b.n	8004b0e <_printf_i+0x152>
 8004bbc:	462a      	mov	r2, r5
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	4640      	mov	r0, r8
 8004bc2:	6923      	ldr	r3, [r4, #16]
 8004bc4:	47d0      	blx	sl
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	d0ab      	beq.n	8004b22 <_printf_i+0x166>
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	079b      	lsls	r3, r3, #30
 8004bce:	d413      	bmi.n	8004bf8 <_printf_i+0x23c>
 8004bd0:	68e0      	ldr	r0, [r4, #12]
 8004bd2:	9b03      	ldr	r3, [sp, #12]
 8004bd4:	4298      	cmp	r0, r3
 8004bd6:	bfb8      	it	lt
 8004bd8:	4618      	movlt	r0, r3
 8004bda:	e7a4      	b.n	8004b26 <_printf_i+0x16a>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	4632      	mov	r2, r6
 8004be0:	4649      	mov	r1, r9
 8004be2:	4640      	mov	r0, r8
 8004be4:	47d0      	blx	sl
 8004be6:	3001      	adds	r0, #1
 8004be8:	d09b      	beq.n	8004b22 <_printf_i+0x166>
 8004bea:	3501      	adds	r5, #1
 8004bec:	68e3      	ldr	r3, [r4, #12]
 8004bee:	9903      	ldr	r1, [sp, #12]
 8004bf0:	1a5b      	subs	r3, r3, r1
 8004bf2:	42ab      	cmp	r3, r5
 8004bf4:	dcf2      	bgt.n	8004bdc <_printf_i+0x220>
 8004bf6:	e7eb      	b.n	8004bd0 <_printf_i+0x214>
 8004bf8:	2500      	movs	r5, #0
 8004bfa:	f104 0619 	add.w	r6, r4, #25
 8004bfe:	e7f5      	b.n	8004bec <_printf_i+0x230>
 8004c00:	080055b5 	.word	0x080055b5
 8004c04:	080055c6 	.word	0x080055c6

08004c08 <__sread>:
 8004c08:	b510      	push	{r4, lr}
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c10:	f000 fac4 	bl	800519c <_read_r>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	bfab      	itete	ge
 8004c18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c1a:	89a3      	ldrhlt	r3, [r4, #12]
 8004c1c:	181b      	addge	r3, r3, r0
 8004c1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c22:	bfac      	ite	ge
 8004c24:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c26:	81a3      	strhlt	r3, [r4, #12]
 8004c28:	bd10      	pop	{r4, pc}

08004c2a <__swrite>:
 8004c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2e:	461f      	mov	r7, r3
 8004c30:	898b      	ldrh	r3, [r1, #12]
 8004c32:	4605      	mov	r5, r0
 8004c34:	05db      	lsls	r3, r3, #23
 8004c36:	460c      	mov	r4, r1
 8004c38:	4616      	mov	r6, r2
 8004c3a:	d505      	bpl.n	8004c48 <__swrite+0x1e>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c44:	f000 f9cc 	bl	8004fe0 <_lseek_r>
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	4632      	mov	r2, r6
 8004c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c50:	81a3      	strh	r3, [r4, #12]
 8004c52:	4628      	mov	r0, r5
 8004c54:	463b      	mov	r3, r7
 8004c56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c5e:	f000 b869 	b.w	8004d34 <_write_r>

08004c62 <__sseek>:
 8004c62:	b510      	push	{r4, lr}
 8004c64:	460c      	mov	r4, r1
 8004c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c6a:	f000 f9b9 	bl	8004fe0 <_lseek_r>
 8004c6e:	1c43      	adds	r3, r0, #1
 8004c70:	89a3      	ldrh	r3, [r4, #12]
 8004c72:	bf15      	itete	ne
 8004c74:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c7e:	81a3      	strheq	r3, [r4, #12]
 8004c80:	bf18      	it	ne
 8004c82:	81a3      	strhne	r3, [r4, #12]
 8004c84:	bd10      	pop	{r4, pc}

08004c86 <__sclose>:
 8004c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c8a:	f000 b8db 	b.w	8004e44 <_close_r>
	...

08004c90 <__swbuf_r>:
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	460e      	mov	r6, r1
 8004c94:	4614      	mov	r4, r2
 8004c96:	4605      	mov	r5, r0
 8004c98:	b118      	cbz	r0, 8004ca2 <__swbuf_r+0x12>
 8004c9a:	6983      	ldr	r3, [r0, #24]
 8004c9c:	b90b      	cbnz	r3, 8004ca2 <__swbuf_r+0x12>
 8004c9e:	f7ff faab 	bl	80041f8 <__sinit>
 8004ca2:	4b21      	ldr	r3, [pc, #132]	; (8004d28 <__swbuf_r+0x98>)
 8004ca4:	429c      	cmp	r4, r3
 8004ca6:	d12b      	bne.n	8004d00 <__swbuf_r+0x70>
 8004ca8:	686c      	ldr	r4, [r5, #4]
 8004caa:	69a3      	ldr	r3, [r4, #24]
 8004cac:	60a3      	str	r3, [r4, #8]
 8004cae:	89a3      	ldrh	r3, [r4, #12]
 8004cb0:	071a      	lsls	r2, r3, #28
 8004cb2:	d52f      	bpl.n	8004d14 <__swbuf_r+0x84>
 8004cb4:	6923      	ldr	r3, [r4, #16]
 8004cb6:	b36b      	cbz	r3, 8004d14 <__swbuf_r+0x84>
 8004cb8:	6923      	ldr	r3, [r4, #16]
 8004cba:	6820      	ldr	r0, [r4, #0]
 8004cbc:	b2f6      	uxtb	r6, r6
 8004cbe:	1ac0      	subs	r0, r0, r3
 8004cc0:	6963      	ldr	r3, [r4, #20]
 8004cc2:	4637      	mov	r7, r6
 8004cc4:	4283      	cmp	r3, r0
 8004cc6:	dc04      	bgt.n	8004cd2 <__swbuf_r+0x42>
 8004cc8:	4621      	mov	r1, r4
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f000 f94c 	bl	8004f68 <_fflush_r>
 8004cd0:	bb30      	cbnz	r0, 8004d20 <__swbuf_r+0x90>
 8004cd2:	68a3      	ldr	r3, [r4, #8]
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	60a3      	str	r3, [r4, #8]
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	6022      	str	r2, [r4, #0]
 8004ce0:	701e      	strb	r6, [r3, #0]
 8004ce2:	6963      	ldr	r3, [r4, #20]
 8004ce4:	4283      	cmp	r3, r0
 8004ce6:	d004      	beq.n	8004cf2 <__swbuf_r+0x62>
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	07db      	lsls	r3, r3, #31
 8004cec:	d506      	bpl.n	8004cfc <__swbuf_r+0x6c>
 8004cee:	2e0a      	cmp	r6, #10
 8004cf0:	d104      	bne.n	8004cfc <__swbuf_r+0x6c>
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f000 f937 	bl	8004f68 <_fflush_r>
 8004cfa:	b988      	cbnz	r0, 8004d20 <__swbuf_r+0x90>
 8004cfc:	4638      	mov	r0, r7
 8004cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d00:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <__swbuf_r+0x9c>)
 8004d02:	429c      	cmp	r4, r3
 8004d04:	d101      	bne.n	8004d0a <__swbuf_r+0x7a>
 8004d06:	68ac      	ldr	r4, [r5, #8]
 8004d08:	e7cf      	b.n	8004caa <__swbuf_r+0x1a>
 8004d0a:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <__swbuf_r+0xa0>)
 8004d0c:	429c      	cmp	r4, r3
 8004d0e:	bf08      	it	eq
 8004d10:	68ec      	ldreq	r4, [r5, #12]
 8004d12:	e7ca      	b.n	8004caa <__swbuf_r+0x1a>
 8004d14:	4621      	mov	r1, r4
 8004d16:	4628      	mov	r0, r5
 8004d18:	f000 f81e 	bl	8004d58 <__swsetup_r>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d0cb      	beq.n	8004cb8 <__swbuf_r+0x28>
 8004d20:	f04f 37ff 	mov.w	r7, #4294967295
 8004d24:	e7ea      	b.n	8004cfc <__swbuf_r+0x6c>
 8004d26:	bf00      	nop
 8004d28:	08005564 	.word	0x08005564
 8004d2c:	08005584 	.word	0x08005584
 8004d30:	08005544 	.word	0x08005544

08004d34 <_write_r>:
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	4604      	mov	r4, r0
 8004d38:	4608      	mov	r0, r1
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	4d05      	ldr	r5, [pc, #20]	; (8004d54 <_write_r+0x20>)
 8004d40:	602a      	str	r2, [r5, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f7fc ffa2 	bl	8001c8c <_write>
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	d102      	bne.n	8004d52 <_write_r+0x1e>
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	b103      	cbz	r3, 8004d52 <_write_r+0x1e>
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	bd38      	pop	{r3, r4, r5, pc}
 8004d54:	200001f8 	.word	0x200001f8

08004d58 <__swsetup_r>:
 8004d58:	4b32      	ldr	r3, [pc, #200]	; (8004e24 <__swsetup_r+0xcc>)
 8004d5a:	b570      	push	{r4, r5, r6, lr}
 8004d5c:	681d      	ldr	r5, [r3, #0]
 8004d5e:	4606      	mov	r6, r0
 8004d60:	460c      	mov	r4, r1
 8004d62:	b125      	cbz	r5, 8004d6e <__swsetup_r+0x16>
 8004d64:	69ab      	ldr	r3, [r5, #24]
 8004d66:	b913      	cbnz	r3, 8004d6e <__swsetup_r+0x16>
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f7ff fa45 	bl	80041f8 <__sinit>
 8004d6e:	4b2e      	ldr	r3, [pc, #184]	; (8004e28 <__swsetup_r+0xd0>)
 8004d70:	429c      	cmp	r4, r3
 8004d72:	d10f      	bne.n	8004d94 <__swsetup_r+0x3c>
 8004d74:	686c      	ldr	r4, [r5, #4]
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d7c:	0719      	lsls	r1, r3, #28
 8004d7e:	d42c      	bmi.n	8004dda <__swsetup_r+0x82>
 8004d80:	06dd      	lsls	r5, r3, #27
 8004d82:	d411      	bmi.n	8004da8 <__swsetup_r+0x50>
 8004d84:	2309      	movs	r3, #9
 8004d86:	6033      	str	r3, [r6, #0]
 8004d88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d90:	81a3      	strh	r3, [r4, #12]
 8004d92:	e03e      	b.n	8004e12 <__swsetup_r+0xba>
 8004d94:	4b25      	ldr	r3, [pc, #148]	; (8004e2c <__swsetup_r+0xd4>)
 8004d96:	429c      	cmp	r4, r3
 8004d98:	d101      	bne.n	8004d9e <__swsetup_r+0x46>
 8004d9a:	68ac      	ldr	r4, [r5, #8]
 8004d9c:	e7eb      	b.n	8004d76 <__swsetup_r+0x1e>
 8004d9e:	4b24      	ldr	r3, [pc, #144]	; (8004e30 <__swsetup_r+0xd8>)
 8004da0:	429c      	cmp	r4, r3
 8004da2:	bf08      	it	eq
 8004da4:	68ec      	ldreq	r4, [r5, #12]
 8004da6:	e7e6      	b.n	8004d76 <__swsetup_r+0x1e>
 8004da8:	0758      	lsls	r0, r3, #29
 8004daa:	d512      	bpl.n	8004dd2 <__swsetup_r+0x7a>
 8004dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dae:	b141      	cbz	r1, 8004dc2 <__swsetup_r+0x6a>
 8004db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004db4:	4299      	cmp	r1, r3
 8004db6:	d002      	beq.n	8004dbe <__swsetup_r+0x66>
 8004db8:	4630      	mov	r0, r6
 8004dba:	f7fe ffb1 	bl	8003d20 <_free_r>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	6363      	str	r3, [r4, #52]	; 0x34
 8004dc2:	89a3      	ldrh	r3, [r4, #12]
 8004dc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004dc8:	81a3      	strh	r3, [r4, #12]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	6063      	str	r3, [r4, #4]
 8004dce:	6923      	ldr	r3, [r4, #16]
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	89a3      	ldrh	r3, [r4, #12]
 8004dd4:	f043 0308 	orr.w	r3, r3, #8
 8004dd8:	81a3      	strh	r3, [r4, #12]
 8004dda:	6923      	ldr	r3, [r4, #16]
 8004ddc:	b94b      	cbnz	r3, 8004df2 <__swsetup_r+0x9a>
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de8:	d003      	beq.n	8004df2 <__swsetup_r+0x9a>
 8004dea:	4621      	mov	r1, r4
 8004dec:	4630      	mov	r0, r6
 8004dee:	f000 f92f 	bl	8005050 <__smakebuf_r>
 8004df2:	89a0      	ldrh	r0, [r4, #12]
 8004df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004df8:	f010 0301 	ands.w	r3, r0, #1
 8004dfc:	d00a      	beq.n	8004e14 <__swsetup_r+0xbc>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60a3      	str	r3, [r4, #8]
 8004e02:	6963      	ldr	r3, [r4, #20]
 8004e04:	425b      	negs	r3, r3
 8004e06:	61a3      	str	r3, [r4, #24]
 8004e08:	6923      	ldr	r3, [r4, #16]
 8004e0a:	b943      	cbnz	r3, 8004e1e <__swsetup_r+0xc6>
 8004e0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e10:	d1ba      	bne.n	8004d88 <__swsetup_r+0x30>
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
 8004e14:	0781      	lsls	r1, r0, #30
 8004e16:	bf58      	it	pl
 8004e18:	6963      	ldrpl	r3, [r4, #20]
 8004e1a:	60a3      	str	r3, [r4, #8]
 8004e1c:	e7f4      	b.n	8004e08 <__swsetup_r+0xb0>
 8004e1e:	2000      	movs	r0, #0
 8004e20:	e7f7      	b.n	8004e12 <__swsetup_r+0xba>
 8004e22:	bf00      	nop
 8004e24:	2000000c 	.word	0x2000000c
 8004e28:	08005564 	.word	0x08005564
 8004e2c:	08005584 	.word	0x08005584
 8004e30:	08005544 	.word	0x08005544

08004e34 <abort>:
 8004e34:	2006      	movs	r0, #6
 8004e36:	b508      	push	{r3, lr}
 8004e38:	f000 f9ea 	bl	8005210 <raise>
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	f7fc fefe 	bl	8001c3e <_exit>
	...

08004e44 <_close_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	2300      	movs	r3, #0
 8004e48:	4d05      	ldr	r5, [pc, #20]	; (8004e60 <_close_r+0x1c>)
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	602b      	str	r3, [r5, #0]
 8004e50:	f7fc ff38 	bl	8001cc4 <_close>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d102      	bne.n	8004e5e <_close_r+0x1a>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	b103      	cbz	r3, 8004e5e <_close_r+0x1a>
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	200001f8 	.word	0x200001f8

08004e64 <__sflush_r>:
 8004e64:	898a      	ldrh	r2, [r1, #12]
 8004e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e68:	4605      	mov	r5, r0
 8004e6a:	0710      	lsls	r0, r2, #28
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	d457      	bmi.n	8004f20 <__sflush_r+0xbc>
 8004e70:	684b      	ldr	r3, [r1, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	dc04      	bgt.n	8004e80 <__sflush_r+0x1c>
 8004e76:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	dc01      	bgt.n	8004e80 <__sflush_r+0x1c>
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e82:	2e00      	cmp	r6, #0
 8004e84:	d0fa      	beq.n	8004e7c <__sflush_r+0x18>
 8004e86:	2300      	movs	r3, #0
 8004e88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e8c:	682f      	ldr	r7, [r5, #0]
 8004e8e:	602b      	str	r3, [r5, #0]
 8004e90:	d032      	beq.n	8004ef8 <__sflush_r+0x94>
 8004e92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	075a      	lsls	r2, r3, #29
 8004e98:	d505      	bpl.n	8004ea6 <__sflush_r+0x42>
 8004e9a:	6863      	ldr	r3, [r4, #4]
 8004e9c:	1ac0      	subs	r0, r0, r3
 8004e9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ea0:	b10b      	cbz	r3, 8004ea6 <__sflush_r+0x42>
 8004ea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ea4:	1ac0      	subs	r0, r0, r3
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004eac:	4628      	mov	r0, r5
 8004eae:	6a21      	ldr	r1, [r4, #32]
 8004eb0:	47b0      	blx	r6
 8004eb2:	1c43      	adds	r3, r0, #1
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	d106      	bne.n	8004ec6 <__sflush_r+0x62>
 8004eb8:	6829      	ldr	r1, [r5, #0]
 8004eba:	291d      	cmp	r1, #29
 8004ebc:	d82c      	bhi.n	8004f18 <__sflush_r+0xb4>
 8004ebe:	4a29      	ldr	r2, [pc, #164]	; (8004f64 <__sflush_r+0x100>)
 8004ec0:	40ca      	lsrs	r2, r1
 8004ec2:	07d6      	lsls	r6, r2, #31
 8004ec4:	d528      	bpl.n	8004f18 <__sflush_r+0xb4>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	6062      	str	r2, [r4, #4]
 8004eca:	6922      	ldr	r2, [r4, #16]
 8004ecc:	04d9      	lsls	r1, r3, #19
 8004ece:	6022      	str	r2, [r4, #0]
 8004ed0:	d504      	bpl.n	8004edc <__sflush_r+0x78>
 8004ed2:	1c42      	adds	r2, r0, #1
 8004ed4:	d101      	bne.n	8004eda <__sflush_r+0x76>
 8004ed6:	682b      	ldr	r3, [r5, #0]
 8004ed8:	b903      	cbnz	r3, 8004edc <__sflush_r+0x78>
 8004eda:	6560      	str	r0, [r4, #84]	; 0x54
 8004edc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ede:	602f      	str	r7, [r5, #0]
 8004ee0:	2900      	cmp	r1, #0
 8004ee2:	d0cb      	beq.n	8004e7c <__sflush_r+0x18>
 8004ee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ee8:	4299      	cmp	r1, r3
 8004eea:	d002      	beq.n	8004ef2 <__sflush_r+0x8e>
 8004eec:	4628      	mov	r0, r5
 8004eee:	f7fe ff17 	bl	8003d20 <_free_r>
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	6360      	str	r0, [r4, #52]	; 0x34
 8004ef6:	e7c2      	b.n	8004e7e <__sflush_r+0x1a>
 8004ef8:	6a21      	ldr	r1, [r4, #32]
 8004efa:	2301      	movs	r3, #1
 8004efc:	4628      	mov	r0, r5
 8004efe:	47b0      	blx	r6
 8004f00:	1c41      	adds	r1, r0, #1
 8004f02:	d1c7      	bne.n	8004e94 <__sflush_r+0x30>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0c4      	beq.n	8004e94 <__sflush_r+0x30>
 8004f0a:	2b1d      	cmp	r3, #29
 8004f0c:	d001      	beq.n	8004f12 <__sflush_r+0xae>
 8004f0e:	2b16      	cmp	r3, #22
 8004f10:	d101      	bne.n	8004f16 <__sflush_r+0xb2>
 8004f12:	602f      	str	r7, [r5, #0]
 8004f14:	e7b2      	b.n	8004e7c <__sflush_r+0x18>
 8004f16:	89a3      	ldrh	r3, [r4, #12]
 8004f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f1c:	81a3      	strh	r3, [r4, #12]
 8004f1e:	e7ae      	b.n	8004e7e <__sflush_r+0x1a>
 8004f20:	690f      	ldr	r7, [r1, #16]
 8004f22:	2f00      	cmp	r7, #0
 8004f24:	d0aa      	beq.n	8004e7c <__sflush_r+0x18>
 8004f26:	0793      	lsls	r3, r2, #30
 8004f28:	bf18      	it	ne
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	680e      	ldr	r6, [r1, #0]
 8004f2e:	bf08      	it	eq
 8004f30:	694b      	ldreq	r3, [r1, #20]
 8004f32:	1bf6      	subs	r6, r6, r7
 8004f34:	600f      	str	r7, [r1, #0]
 8004f36:	608b      	str	r3, [r1, #8]
 8004f38:	2e00      	cmp	r6, #0
 8004f3a:	dd9f      	ble.n	8004e7c <__sflush_r+0x18>
 8004f3c:	4633      	mov	r3, r6
 8004f3e:	463a      	mov	r2, r7
 8004f40:	4628      	mov	r0, r5
 8004f42:	6a21      	ldr	r1, [r4, #32]
 8004f44:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004f48:	47e0      	blx	ip
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	dc06      	bgt.n	8004f5c <__sflush_r+0xf8>
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	f04f 30ff 	mov.w	r0, #4294967295
 8004f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f58:	81a3      	strh	r3, [r4, #12]
 8004f5a:	e790      	b.n	8004e7e <__sflush_r+0x1a>
 8004f5c:	4407      	add	r7, r0
 8004f5e:	1a36      	subs	r6, r6, r0
 8004f60:	e7ea      	b.n	8004f38 <__sflush_r+0xd4>
 8004f62:	bf00      	nop
 8004f64:	20400001 	.word	0x20400001

08004f68 <_fflush_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	690b      	ldr	r3, [r1, #16]
 8004f6c:	4605      	mov	r5, r0
 8004f6e:	460c      	mov	r4, r1
 8004f70:	b913      	cbnz	r3, 8004f78 <_fflush_r+0x10>
 8004f72:	2500      	movs	r5, #0
 8004f74:	4628      	mov	r0, r5
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	b118      	cbz	r0, 8004f82 <_fflush_r+0x1a>
 8004f7a:	6983      	ldr	r3, [r0, #24]
 8004f7c:	b90b      	cbnz	r3, 8004f82 <_fflush_r+0x1a>
 8004f7e:	f7ff f93b 	bl	80041f8 <__sinit>
 8004f82:	4b14      	ldr	r3, [pc, #80]	; (8004fd4 <_fflush_r+0x6c>)
 8004f84:	429c      	cmp	r4, r3
 8004f86:	d11b      	bne.n	8004fc0 <_fflush_r+0x58>
 8004f88:	686c      	ldr	r4, [r5, #4]
 8004f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0ef      	beq.n	8004f72 <_fflush_r+0xa>
 8004f92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f94:	07d0      	lsls	r0, r2, #31
 8004f96:	d404      	bmi.n	8004fa2 <_fflush_r+0x3a>
 8004f98:	0599      	lsls	r1, r3, #22
 8004f9a:	d402      	bmi.n	8004fa2 <_fflush_r+0x3a>
 8004f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f9e:	f7ff f9db 	bl	8004358 <__retarget_lock_acquire_recursive>
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	f7ff ff5d 	bl	8004e64 <__sflush_r>
 8004faa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fac:	4605      	mov	r5, r0
 8004fae:	07da      	lsls	r2, r3, #31
 8004fb0:	d4e0      	bmi.n	8004f74 <_fflush_r+0xc>
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	059b      	lsls	r3, r3, #22
 8004fb6:	d4dd      	bmi.n	8004f74 <_fflush_r+0xc>
 8004fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fba:	f7ff f9ce 	bl	800435a <__retarget_lock_release_recursive>
 8004fbe:	e7d9      	b.n	8004f74 <_fflush_r+0xc>
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <_fflush_r+0x70>)
 8004fc2:	429c      	cmp	r4, r3
 8004fc4:	d101      	bne.n	8004fca <_fflush_r+0x62>
 8004fc6:	68ac      	ldr	r4, [r5, #8]
 8004fc8:	e7df      	b.n	8004f8a <_fflush_r+0x22>
 8004fca:	4b04      	ldr	r3, [pc, #16]	; (8004fdc <_fflush_r+0x74>)
 8004fcc:	429c      	cmp	r4, r3
 8004fce:	bf08      	it	eq
 8004fd0:	68ec      	ldreq	r4, [r5, #12]
 8004fd2:	e7da      	b.n	8004f8a <_fflush_r+0x22>
 8004fd4:	08005564 	.word	0x08005564
 8004fd8:	08005584 	.word	0x08005584
 8004fdc:	08005544 	.word	0x08005544

08004fe0 <_lseek_r>:
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	4608      	mov	r0, r1
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	2200      	movs	r2, #0
 8004fea:	4d05      	ldr	r5, [pc, #20]	; (8005000 <_lseek_r+0x20>)
 8004fec:	602a      	str	r2, [r5, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f7fc fe8c 	bl	8001d0c <_lseek>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d102      	bne.n	8004ffe <_lseek_r+0x1e>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	b103      	cbz	r3, 8004ffe <_lseek_r+0x1e>
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	200001f8 	.word	0x200001f8

08005004 <__swhatbuf_r>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	460e      	mov	r6, r1
 8005008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800500c:	4614      	mov	r4, r2
 800500e:	2900      	cmp	r1, #0
 8005010:	461d      	mov	r5, r3
 8005012:	b096      	sub	sp, #88	; 0x58
 8005014:	da08      	bge.n	8005028 <__swhatbuf_r+0x24>
 8005016:	2200      	movs	r2, #0
 8005018:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800501c:	602a      	str	r2, [r5, #0]
 800501e:	061a      	lsls	r2, r3, #24
 8005020:	d410      	bmi.n	8005044 <__swhatbuf_r+0x40>
 8005022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005026:	e00e      	b.n	8005046 <__swhatbuf_r+0x42>
 8005028:	466a      	mov	r2, sp
 800502a:	f000 f90d 	bl	8005248 <_fstat_r>
 800502e:	2800      	cmp	r0, #0
 8005030:	dbf1      	blt.n	8005016 <__swhatbuf_r+0x12>
 8005032:	9a01      	ldr	r2, [sp, #4]
 8005034:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005038:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800503c:	425a      	negs	r2, r3
 800503e:	415a      	adcs	r2, r3
 8005040:	602a      	str	r2, [r5, #0]
 8005042:	e7ee      	b.n	8005022 <__swhatbuf_r+0x1e>
 8005044:	2340      	movs	r3, #64	; 0x40
 8005046:	2000      	movs	r0, #0
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	b016      	add	sp, #88	; 0x58
 800504c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005050 <__smakebuf_r>:
 8005050:	898b      	ldrh	r3, [r1, #12]
 8005052:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005054:	079d      	lsls	r5, r3, #30
 8005056:	4606      	mov	r6, r0
 8005058:	460c      	mov	r4, r1
 800505a:	d507      	bpl.n	800506c <__smakebuf_r+0x1c>
 800505c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	6123      	str	r3, [r4, #16]
 8005064:	2301      	movs	r3, #1
 8005066:	6163      	str	r3, [r4, #20]
 8005068:	b002      	add	sp, #8
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	466a      	mov	r2, sp
 800506e:	ab01      	add	r3, sp, #4
 8005070:	f7ff ffc8 	bl	8005004 <__swhatbuf_r>
 8005074:	9900      	ldr	r1, [sp, #0]
 8005076:	4605      	mov	r5, r0
 8005078:	4630      	mov	r0, r6
 800507a:	f7fe feb9 	bl	8003df0 <_malloc_r>
 800507e:	b948      	cbnz	r0, 8005094 <__smakebuf_r+0x44>
 8005080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005084:	059a      	lsls	r2, r3, #22
 8005086:	d4ef      	bmi.n	8005068 <__smakebuf_r+0x18>
 8005088:	f023 0303 	bic.w	r3, r3, #3
 800508c:	f043 0302 	orr.w	r3, r3, #2
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	e7e3      	b.n	800505c <__smakebuf_r+0xc>
 8005094:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <__smakebuf_r+0x7c>)
 8005096:	62b3      	str	r3, [r6, #40]	; 0x28
 8005098:	89a3      	ldrh	r3, [r4, #12]
 800509a:	6020      	str	r0, [r4, #0]
 800509c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a0:	81a3      	strh	r3, [r4, #12]
 80050a2:	9b00      	ldr	r3, [sp, #0]
 80050a4:	6120      	str	r0, [r4, #16]
 80050a6:	6163      	str	r3, [r4, #20]
 80050a8:	9b01      	ldr	r3, [sp, #4]
 80050aa:	b15b      	cbz	r3, 80050c4 <__smakebuf_r+0x74>
 80050ac:	4630      	mov	r0, r6
 80050ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050b2:	f000 f8db 	bl	800526c <_isatty_r>
 80050b6:	b128      	cbz	r0, 80050c4 <__smakebuf_r+0x74>
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	f023 0303 	bic.w	r3, r3, #3
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	81a3      	strh	r3, [r4, #12]
 80050c4:	89a0      	ldrh	r0, [r4, #12]
 80050c6:	4305      	orrs	r5, r0
 80050c8:	81a5      	strh	r5, [r4, #12]
 80050ca:	e7cd      	b.n	8005068 <__smakebuf_r+0x18>
 80050cc:	08004191 	.word	0x08004191

080050d0 <memchr>:
 80050d0:	4603      	mov	r3, r0
 80050d2:	b510      	push	{r4, lr}
 80050d4:	b2c9      	uxtb	r1, r1
 80050d6:	4402      	add	r2, r0
 80050d8:	4293      	cmp	r3, r2
 80050da:	4618      	mov	r0, r3
 80050dc:	d101      	bne.n	80050e2 <memchr+0x12>
 80050de:	2000      	movs	r0, #0
 80050e0:	e003      	b.n	80050ea <memchr+0x1a>
 80050e2:	7804      	ldrb	r4, [r0, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	428c      	cmp	r4, r1
 80050e8:	d1f6      	bne.n	80050d8 <memchr+0x8>
 80050ea:	bd10      	pop	{r4, pc}

080050ec <memcpy>:
 80050ec:	440a      	add	r2, r1
 80050ee:	4291      	cmp	r1, r2
 80050f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80050f4:	d100      	bne.n	80050f8 <memcpy+0xc>
 80050f6:	4770      	bx	lr
 80050f8:	b510      	push	{r4, lr}
 80050fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050fe:	4291      	cmp	r1, r2
 8005100:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005104:	d1f9      	bne.n	80050fa <memcpy+0xe>
 8005106:	bd10      	pop	{r4, pc}

08005108 <memmove>:
 8005108:	4288      	cmp	r0, r1
 800510a:	b510      	push	{r4, lr}
 800510c:	eb01 0402 	add.w	r4, r1, r2
 8005110:	d902      	bls.n	8005118 <memmove+0x10>
 8005112:	4284      	cmp	r4, r0
 8005114:	4623      	mov	r3, r4
 8005116:	d807      	bhi.n	8005128 <memmove+0x20>
 8005118:	1e43      	subs	r3, r0, #1
 800511a:	42a1      	cmp	r1, r4
 800511c:	d008      	beq.n	8005130 <memmove+0x28>
 800511e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005122:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005126:	e7f8      	b.n	800511a <memmove+0x12>
 8005128:	4601      	mov	r1, r0
 800512a:	4402      	add	r2, r0
 800512c:	428a      	cmp	r2, r1
 800512e:	d100      	bne.n	8005132 <memmove+0x2a>
 8005130:	bd10      	pop	{r4, pc}
 8005132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800513a:	e7f7      	b.n	800512c <memmove+0x24>

0800513c <_realloc_r>:
 800513c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005140:	4680      	mov	r8, r0
 8005142:	4614      	mov	r4, r2
 8005144:	460e      	mov	r6, r1
 8005146:	b921      	cbnz	r1, 8005152 <_realloc_r+0x16>
 8005148:	4611      	mov	r1, r2
 800514a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800514e:	f7fe be4f 	b.w	8003df0 <_malloc_r>
 8005152:	b92a      	cbnz	r2, 8005160 <_realloc_r+0x24>
 8005154:	f7fe fde4 	bl	8003d20 <_free_r>
 8005158:	4625      	mov	r5, r4
 800515a:	4628      	mov	r0, r5
 800515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005160:	f000 f894 	bl	800528c <_malloc_usable_size_r>
 8005164:	4284      	cmp	r4, r0
 8005166:	4607      	mov	r7, r0
 8005168:	d802      	bhi.n	8005170 <_realloc_r+0x34>
 800516a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800516e:	d812      	bhi.n	8005196 <_realloc_r+0x5a>
 8005170:	4621      	mov	r1, r4
 8005172:	4640      	mov	r0, r8
 8005174:	f7fe fe3c 	bl	8003df0 <_malloc_r>
 8005178:	4605      	mov	r5, r0
 800517a:	2800      	cmp	r0, #0
 800517c:	d0ed      	beq.n	800515a <_realloc_r+0x1e>
 800517e:	42bc      	cmp	r4, r7
 8005180:	4622      	mov	r2, r4
 8005182:	4631      	mov	r1, r6
 8005184:	bf28      	it	cs
 8005186:	463a      	movcs	r2, r7
 8005188:	f7ff ffb0 	bl	80050ec <memcpy>
 800518c:	4631      	mov	r1, r6
 800518e:	4640      	mov	r0, r8
 8005190:	f7fe fdc6 	bl	8003d20 <_free_r>
 8005194:	e7e1      	b.n	800515a <_realloc_r+0x1e>
 8005196:	4635      	mov	r5, r6
 8005198:	e7df      	b.n	800515a <_realloc_r+0x1e>
	...

0800519c <_read_r>:
 800519c:	b538      	push	{r3, r4, r5, lr}
 800519e:	4604      	mov	r4, r0
 80051a0:	4608      	mov	r0, r1
 80051a2:	4611      	mov	r1, r2
 80051a4:	2200      	movs	r2, #0
 80051a6:	4d05      	ldr	r5, [pc, #20]	; (80051bc <_read_r+0x20>)
 80051a8:	602a      	str	r2, [r5, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	f7fc fd51 	bl	8001c52 <_read>
 80051b0:	1c43      	adds	r3, r0, #1
 80051b2:	d102      	bne.n	80051ba <_read_r+0x1e>
 80051b4:	682b      	ldr	r3, [r5, #0]
 80051b6:	b103      	cbz	r3, 80051ba <_read_r+0x1e>
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	bd38      	pop	{r3, r4, r5, pc}
 80051bc:	200001f8 	.word	0x200001f8

080051c0 <_raise_r>:
 80051c0:	291f      	cmp	r1, #31
 80051c2:	b538      	push	{r3, r4, r5, lr}
 80051c4:	4604      	mov	r4, r0
 80051c6:	460d      	mov	r5, r1
 80051c8:	d904      	bls.n	80051d4 <_raise_r+0x14>
 80051ca:	2316      	movs	r3, #22
 80051cc:	6003      	str	r3, [r0, #0]
 80051ce:	f04f 30ff 	mov.w	r0, #4294967295
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
 80051d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80051d6:	b112      	cbz	r2, 80051de <_raise_r+0x1e>
 80051d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80051dc:	b94b      	cbnz	r3, 80051f2 <_raise_r+0x32>
 80051de:	4620      	mov	r0, r4
 80051e0:	f000 f830 	bl	8005244 <_getpid_r>
 80051e4:	462a      	mov	r2, r5
 80051e6:	4601      	mov	r1, r0
 80051e8:	4620      	mov	r0, r4
 80051ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ee:	f000 b817 	b.w	8005220 <_kill_r>
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d00a      	beq.n	800520c <_raise_r+0x4c>
 80051f6:	1c59      	adds	r1, r3, #1
 80051f8:	d103      	bne.n	8005202 <_raise_r+0x42>
 80051fa:	2316      	movs	r3, #22
 80051fc:	6003      	str	r3, [r0, #0]
 80051fe:	2001      	movs	r0, #1
 8005200:	e7e7      	b.n	80051d2 <_raise_r+0x12>
 8005202:	2400      	movs	r4, #0
 8005204:	4628      	mov	r0, r5
 8005206:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800520a:	4798      	blx	r3
 800520c:	2000      	movs	r0, #0
 800520e:	e7e0      	b.n	80051d2 <_raise_r+0x12>

08005210 <raise>:
 8005210:	4b02      	ldr	r3, [pc, #8]	; (800521c <raise+0xc>)
 8005212:	4601      	mov	r1, r0
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	f7ff bfd3 	b.w	80051c0 <_raise_r>
 800521a:	bf00      	nop
 800521c:	2000000c 	.word	0x2000000c

08005220 <_kill_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	2300      	movs	r3, #0
 8005224:	4d06      	ldr	r5, [pc, #24]	; (8005240 <_kill_r+0x20>)
 8005226:	4604      	mov	r4, r0
 8005228:	4608      	mov	r0, r1
 800522a:	4611      	mov	r1, r2
 800522c:	602b      	str	r3, [r5, #0]
 800522e:	f7fc fcf6 	bl	8001c1e <_kill>
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	d102      	bne.n	800523c <_kill_r+0x1c>
 8005236:	682b      	ldr	r3, [r5, #0]
 8005238:	b103      	cbz	r3, 800523c <_kill_r+0x1c>
 800523a:	6023      	str	r3, [r4, #0]
 800523c:	bd38      	pop	{r3, r4, r5, pc}
 800523e:	bf00      	nop
 8005240:	200001f8 	.word	0x200001f8

08005244 <_getpid_r>:
 8005244:	f7fc bce4 	b.w	8001c10 <_getpid>

08005248 <_fstat_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	2300      	movs	r3, #0
 800524c:	4d06      	ldr	r5, [pc, #24]	; (8005268 <_fstat_r+0x20>)
 800524e:	4604      	mov	r4, r0
 8005250:	4608      	mov	r0, r1
 8005252:	4611      	mov	r1, r2
 8005254:	602b      	str	r3, [r5, #0]
 8005256:	f7fc fd40 	bl	8001cda <_fstat>
 800525a:	1c43      	adds	r3, r0, #1
 800525c:	d102      	bne.n	8005264 <_fstat_r+0x1c>
 800525e:	682b      	ldr	r3, [r5, #0]
 8005260:	b103      	cbz	r3, 8005264 <_fstat_r+0x1c>
 8005262:	6023      	str	r3, [r4, #0]
 8005264:	bd38      	pop	{r3, r4, r5, pc}
 8005266:	bf00      	nop
 8005268:	200001f8 	.word	0x200001f8

0800526c <_isatty_r>:
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	2300      	movs	r3, #0
 8005270:	4d05      	ldr	r5, [pc, #20]	; (8005288 <_isatty_r+0x1c>)
 8005272:	4604      	mov	r4, r0
 8005274:	4608      	mov	r0, r1
 8005276:	602b      	str	r3, [r5, #0]
 8005278:	f7fc fd3e 	bl	8001cf8 <_isatty>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d102      	bne.n	8005286 <_isatty_r+0x1a>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	b103      	cbz	r3, 8005286 <_isatty_r+0x1a>
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	200001f8 	.word	0x200001f8

0800528c <_malloc_usable_size_r>:
 800528c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005290:	1f18      	subs	r0, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	bfbc      	itt	lt
 8005296:	580b      	ldrlt	r3, [r1, r0]
 8005298:	18c0      	addlt	r0, r0, r3
 800529a:	4770      	bx	lr

0800529c <_init>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	bf00      	nop
 80052a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a2:	bc08      	pop	{r3}
 80052a4:	469e      	mov	lr, r3
 80052a6:	4770      	bx	lr

080052a8 <_fini>:
 80052a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052aa:	bf00      	nop
 80052ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ae:	bc08      	pop	{r3}
 80052b0:	469e      	mov	lr, r3
 80052b2:	4770      	bx	lr
